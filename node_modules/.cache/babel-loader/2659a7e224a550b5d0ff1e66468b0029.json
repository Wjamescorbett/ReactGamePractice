{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\freeb\\\\OneDrive\\\\Desktop\\\\Game_Project\\\\Game_Project_Frontend\\\\GameFrontEnd\\\\src\\\\components\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport Home from './Home/Home';\nimport Navbar from './Navbar/Navbar';\nimport Layout from './Layout/Layout';\nimport GameBoard from './GameBoard/GameBoard';\nimport RoomTwo from './RoomTwo/RoomTwo';\nimport RoomThree from './RoomThree/RoomThree';\nimport RoomFour from './RoomFour/RoomFour';\nimport RoomFive from './RoomFive/RoomFive';\nimport RoomSix from './RoomSix/RoomSix';\nimport RoomSeven from './RoomSeven/RoomSeven';\nimport RoomEight from './RoomEight/RoomEight';\nimport RoomNine from './RoomNine/RoomNine';\nimport RoomTen from './RoomTen/RoomTen';\nimport RoomEleven from './RoomEleven/RoomEleven';\nimport RoomTwelve from './RoomTwelve/RoomTwelve';\nimport DamageEffects from './DamageEffects/DamageEffects';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [gameTick, setGameTick] = useState(0);\n  const [breakLoop, setBreakLoop] = useState(0);\n  const [player, setPlayer] = useState({\n    playerHealth: 0,\n    playerMaxHealth: 0,\n    playerAttackLow: 0,\n    playerAttackHigh: 0,\n    playerSpeed: 0,\n    playerMaxSpeed: 0,\n    playerArmor: 0,\n    playerCoins: 0,\n    playerHealthPotion: 0,\n    playerHealthPotionEffect: 15,\n    playerStaminaPotion: 0,\n    playerDamageDone: 0\n  });\n  const [playerAttackTimerState, setPlayerAttackTimerState] = useState(0);\n  const [playerAttackTimerStateMax, setPlayerAttackTimerStateMax] = useState(0);\n  const [runPlayerAttackTimer, setRunPlayerAttackTimer] = useState(false);\n  const [playerAttacked, setPlayerAttacked] = useState(1);\n  const [startCombatCheck, setStartCombatCheck] = useState(false);\n  const [enemyOne, setEnemyOne] = useState({\n    enemyMaxHealth: 0,\n    enemyHealth: 0,\n    enemyAttackLow: 0,\n    enemyAttackHigh: 0,\n    enemySpeed: 0,\n    enemyMaxSpeed: 0,\n    enemyArmor: 0,\n    enemyReward: 0,\n    enemyRewardCheck: 0\n  });\n  const [enemyTwo, setEnemyTwo] = useState({\n    enemy2MaxHealth: 1,\n    enemy2Health: 1,\n    enemy2AttackLow: 0,\n    enemy2AttackHigh: 0,\n    enemy2Speed: 0,\n    enemy2MaxSpeed: 0,\n    enemy2Armor: 0,\n    enemy2Reward: 0,\n    enemy2RewardCheck: 0\n  });\n  const [enemyThree, setEnemyThree] = useState({\n    enemy3MaxHealth: 1,\n    enemy3Health: 1,\n    enemy3AttackLow: 0,\n    enemy3AttackHigh: 0,\n    enemy3Speed: 0,\n    enemy3MaxSpeed: 0,\n    enemy3Armor: 0,\n    enemy3Reward: 0,\n    enemy3RewardCheck: 0\n  });\n  const [numberOfEnemiesInRoom, setNumberOfEnemiesInRoom] = useState(0); // const [enemyDamageDone, setEnemyDamageDone] = useState(0)\n\n  const [currentRoom, setCurrentRoom] = useState(0);\n  const [currentRoomStatus, setCurrentRoomStatus] = useState(0);\n  const [roomTwoStatus, setRoomTwoStatus] = useState(0);\n  const [roomThreeStatus, setRoomThreeStatus] = useState(0);\n  const [roomFourStatus, setRoomFourStatus] = useState(0);\n  const [roomFiveStatus, setRoomFiveStatus] = useState(0);\n  const [roomSixStatus, setRoomSixStatus] = useState(0);\n  const [roomSevenStatus, setRoomSevenStatus] = useState(0);\n  const [roomEightStatus, setRoomEightStatus] = useState(0);\n  const [roomNineStatus, setRoomNineStatus] = useState(0);\n  const [roomTenStatus, setRoomTenStatus] = useState(0);\n  const [roomElevenStatus, setRoomElevenStatus] = useState(0);\n  const [roomTwelveStatus, setRoomTwelveStatus] = useState(0);\n  const [runEnemyOneAttackTimer, setRunEnemyOneAttackTimer] = useState(false);\n  const [runEnemyTwoAttackTimer, setRunEnemyTwoAttackTimer] = useState(false);\n  const [runEnemyThreeAttackTimer, setRunEnemyThreeAttackTimer] = useState(false); // class App extends Component {\n  //     constructor(props) {\n  //         super(props);\n  //         this.state = {\n  //             roomTime: 0,\n  //             roomBreakLoop: 0,\n  //             breakLoop: 0,\n  //             gameTick: -1,\n  //             roomThreeStatus: 0,\n  //             roomFourStatus: 0,\n  //             roomFiveStatus: 0,\n  //             roomSevenStatus: 0,\n  //             roomEightStatus: 0,\n  //             roomTenStatus: 0,\n  //             roomElevenStatus: 0,\n  //             roomTwelveStatus:0,\n  //             currentRoom: 0,\n  //             currentRoomStatus: 0,\n  //             startCombatCheck: false,\n  //             playerAttacked: 1,\n  //         }\n  //     }\n\n  useEffect(() => {\n    if (playerAttackTimerState < 0 & runPlayerAttackTimer === false) {\n      setPlayerAttackTimerState(playerAttackTimerStateMax);\n      setPlayerAttacked(2);\n    }\n\n    if (playerAttackTimerState >= 0 & runPlayerAttackTimer === true) {\n      setRunPlayerAttackTimer(false);\n\n      if (enemyOne.enemyHealth > 0 || enemyTwo.enemy2Health > 0 || enemyThree.enemy3Health > 0) {\n        playerAttackTimer(playerAttackTimerState);\n      }\n    }\n\n    if (enemyOne.enemyHealth > 0 & startCombatCheck === true & runEnemyOneAttackTimer === true) {\n      setRunEnemyOneAttackTimer(false);\n      enemyOneAttackTimer();\n    }\n\n    if (enemyTwo.enemy2Health > 0 & startCombatCheck === true & runEnemyTwoAttackTimer === true) {\n      setRunEnemyTwoAttackTimer(false);\n      enemyTwoAttackTimer();\n    }\n\n    if (enemyThree.enemy3Health > 0 & startCombatCheck === true & runEnemyThreeAttackTimer === true) {\n      setRunEnemyThreeAttackTimer(false);\n      enemyThreeAttackTimer();\n    }\n\n    if (enemyOne.enemyHealth <= 0 & enemyTwo.enemy2Health <= 0 & enemyThree.enemy3Health <= 0) {\n      setCurrentRoomStatusClearEnemy();\n      setStartCombatCheck(false);\n    }\n  });\n\n  function devButtonUpgrade() {\n    setPlayer(prevPlayer => {\n      return { ...prevPlayer,\n        playerHealth: player.playerMaxHealth,\n        playerAttackHigh: player.playerAttackHigh + 5,\n        playerCoins: player.playerCoins + 100\n      };\n    });\n  }\n\n  function devButtonDowngrade() {\n    setPlayer(prevPlayer => {\n      return { ...prevPlayer,\n        playerAttackHigh: player.playerAttackHigh - 5\n      };\n    });\n  }\n\n  function useHealthPotion() {\n    if (player.playerHealthPotion <= 0) {\n      return alert(\"You are out of health potions!\");\n    }\n\n    if (player.playerHealth + player.playerHealthPotionEffect > player.playerMaxHealth) {\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerHealthPotion: player.playerHealthPotion - 1,\n          playerHealth: player.playerMaxHealth\n        };\n      });\n    }\n\n    if (player.playerHealth >= player.playerMaxHealth) {\n      return alert(\"You are at max health!\");\n    } else {\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerHealthPotion: player.playerHealthPotion - 1,\n          playerHealth: player.playerHealth + player.playerHealthPotionEffect\n        };\n      });\n    }\n  } // useStaminaPotion = () => {\n  //     if(this.state.playerStaminaPotion <= 0){\n  //         return(alert(\"You are out of stamina potions!\"))\n  //     }\n  //     if(this.state.playerSpeed === this.state.maxPlayerSpeed){\n  //         return(alert(\"You're already at max speed!\"))\n  //     } else {\n  //         this.setState({\n  //             playerStaminaPotion: this.state.playerStaminaPotion - 1,\n  //             playerSpeed: this.state.maxPlayerSpeed,\n  //         })\n  //     }\n  // }\n\n\n  function buyFromStore(item) {\n    if (item === \"health\") {\n      if (player.playerCoins >= 5) {\n        setPlayer(prevPlayer => {\n          return { ...prevPlayer,\n            playerCoins: player.playerCoins - 5,\n            playerMaxHealth: player.playerMaxHealth + 10\n          };\n        }); // setPlayerCoins(prevPlayerCoins => prevPlayerCoins - 5)\n        // setPlayerMaxHealth(prevPlayerMaxHealth => prevPlayerMaxHealth + 10)\n      } else {\n        alert(\"You can't afford a health upgrade.\");\n      }\n    } // if(item === \"attackLow\"){\n    //     if(this.state.playerCoins >= 6 & this.state.playerAttackLow < this.state.playerAttackHigh){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 6,\n    //             playerAttackLow: this.state.playerAttackLow + 1,\n    //         })\n    //     } \n    //     if(this.state.playerAttackLow >= this.state.playerAttackHigh){\n    //         alert(\"Your minimum attack can not exceed you maximum attack.\")\n    //     }\n    //     if(this.state.playerCoins < 6){\n    //         alert(\"You can't afford a minimum attack upgrade.\")\n    //     }\n    // }\n    // if(item === \"attackHigh\"){\n    //     if(this.state.playerCoins >= 3){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 3,\n    //             playerAttackHigh: this.state.playerAttackHigh + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a maximum attack upgrade.\")\n    //     }\n    // }\n    // if(item === \"speed\"){\n    //     if(this.state.playerCoins >= 2){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 2,\n    //             maxPlayerSpeed: this.state.maxPlayerSpeed + 1,\n    //             playerSpeed: this.state.playerSpeed + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a speed upgrade.\")\n    //     }\n    // }\n    // if(item === \"armor\"){\n    //     if(this.state.playerCoins >= 3){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 3,\n    //             playerArmor: this.state.playerArmor + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford an armor upgrade.\")\n    //     }\n    // }\n    // if(item === \"healthPotion\"){\n    //     if(this.state.playerHealthPotion >= 10){\n    //         return (alert (\"You can only have up to ten health potions.\"))\n    //     }\n    //     if(this.state.playerCoins >= 2){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 2,\n    //             playerHealthPotion: this.state.playerHealthPotion + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a health potion.\")\n    //     }\n    // }\n    // if(item === \"staminaPotion\"){\n    //     if(this.state.playerStaminaPotion >= 8){\n    //         return (alert(\"You can only have up to eight stamina potions.\"))\n    //     }\n    //     if(this.state.playerCoins >= 1){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 1,\n    //             playerStaminaPotion: this.state.playerStaminaPotion + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a stamina potion.\")\n    //     }\n    // }\n\n  }\n\n  function resetRoomStatus() {\n    setRoomTwoStatus(0);\n    setRoomThreeStatus(0);\n    setRoomFiveStatus(0);\n    setRoomSixStatus(0);\n    setRoomSevenStatus(0);\n    setRoomNineStatus(0);\n    setRoomTenStatus(0);\n    setRoomElevenStatus(0);\n    setEnemyOne(prevEnemyOne => {\n      return { ...prevEnemyOne,\n        enemyRewardCheck: 0\n      };\n    });\n    setEnemyTwo(prevEnemyTwo => {\n      return { ...prevEnemyTwo,\n        enemy2RewardCheck: 0\n      };\n    });\n    setEnemyThree(prevEnemyThree => {\n      return { ...prevEnemyThree,\n        enemy3RewardCheck: 0\n      };\n    });\n    setPlayerAttacked(1);\n    setStartCombatCheck(false);\n    setPlayer(prevPlayer => {\n      return { ...prevPlayer,\n        playerSpeed: player.playerMaxSpeed\n      };\n    });\n  }\n\n  function pickClass(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion, attackTimer) {\n    console.log(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion, attackTimer);\n    setPlayer(prevPlayer => {\n      return { ...prevPlayer,\n        playerHealth: health,\n        playerMaxHealth: maxHealth,\n        playerAttackLow: attackLow,\n        playerAttackHigh: attackHigh,\n        playerSpeed: speed,\n        playerMaxSpeed: maxSpeed,\n        playerArmor: armor,\n        playerCoins: coins,\n        playerHealthPotion: healthPotion,\n        playerStaminaPotion: staminaPotion\n      };\n    });\n    setPlayerAttackTimerState(attackTimer);\n    setPlayerAttackTimerStateMax(attackTimer);\n    gameTime();\n  }\n\n  function createEnemy(maxHealth, health, attackLow, attackHigh, speed, armor, reward, maxHealth2, health2, attack2Low, attack2High, speed2, armor2, reward2, maxHealth3, health3, attack3Low, attack3High, speed3, armor3, reward3, numberOfEnemiesInRoom) {\n    setEnemyOne(prevEnemyOne => {\n      return { ...prevEnemyOne,\n        enemyMaxHealth: maxHealth,\n        enemyHealth: health,\n        enemyAttackLow: attackLow,\n        enemyAttackHigh: attackHigh,\n        enemySpeed: speed,\n        enemyMaxSpeed: speed,\n        enemyArmor: armor,\n        enemyReward: reward\n      };\n    });\n    setEnemyTwo(prevEnemyTwo => {\n      return { ...prevEnemyTwo,\n        enemy2MaxHealth: maxHealth2,\n        enemy2Health: health2,\n        enemy2AttackLow: attack2Low,\n        enemy2AttackHigh: attack2High,\n        enemy2Speed: speed2,\n        enemy2MaxSpeed: speed2,\n        enemy2Armor: armor2,\n        enemy2Reward: reward2\n      };\n    });\n    setEnemyThree(prevEnemyThree => {\n      return { ...prevEnemyThree,\n        enemy3MaxHealth: maxHealth3,\n        enemy3Health: health3,\n        enemy3AttackLow: attack3Low,\n        enemy3AttackHigh: attack3High,\n        enemy3Speed: speed3,\n        enemy3MaxSpeed: speed3,\n        enemy3Armor: armor3,\n        enemy3Reward: reward3\n      };\n    });\n    setNumberOfEnemiesInRoom(numberOfEnemiesInRoom);\n  } // *ROOM MOVEMENT, CREATES ENEMIES FOR NEXT ROOM, ACCOUNTS FOR AND CHANGES PLAYER SPEED\n\n\n  function roomMovement(nowCurrentRoom) {\n    setCurrentRoom(nowCurrentRoom);\n    setPlayerAttackTimerState(playerAttackTimerStateMax);\n    setPlayerAttacked(1);\n\n    if (player.playerSpeed > 0) {\n      setCurrentRoom(nowCurrentRoom);\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerSpeed: player.playerSpeed - 1\n        };\n      });\n    } // ?enemyMaxHealth, EnemyHealth, enemyAttackLow, enemyAttackHigh, enemySpeed, enemyArmor, enemyReward\n\n\n    if (nowCurrentRoom === 2 & roomTwoStatus === 0) {\n      createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);\n    }\n\n    if (nowCurrentRoom === 6 & roomSixStatus === 0) {\n      createEnemy(20, 20, 2, 3, 7, 1, 1, 20, 20, 2, 3, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2); //Two Circles\n    }\n\n    if (nowCurrentRoom === 9 & roomNineStatus === 0) {\n      createEnemy(30, 30, 4, 5, 4, 2, 10, 15, 15, 10, 14, 3, 5, 25, 4, 4, 1, 5, 10, 10, 5, 3); //Semi-Circle - Parallelogram - Trapezium\n    }\n  } // function roomMovement(currentRoom) {\n  //     if(player.playerSpeed > 0){\n  //         setCurrentRoom(currentRoom)\n  //         setPlayer(prevPlayer => {\n  //             return {...prevPlayer,\n  //                 playerSpeed: player.playerSpeed - 1\n  //             }\n  //         })\n  //         this.setState({\n  //             currentRoom: currentRoom,\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             enemyRewardCheck: 0,\n  //             playerDamageDone: 0,\n  //             enemyDamageDone: 0,\n  //             playerAttacked: 1,\n  //         })\n  //     }\n  //     if(this.state.playerSpeed <= 0){\n  //         this.playerHasNoSpeed()\n  //     }\n  //     if(currentRoom === 2 & this.state.roomTwoStatus === 0){\n  //         this.createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Circle 20, 2, 3, 1, 1, 1\n  //         }\n  // if(currentRoom === 3 & this.state.roomThreeStatus === 0){\n  //     this.createEnemy(15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Square 15, 4, 5, 2, 2, 2\n  // }\n  // if(currentRoom === 4 & this.state.roomFourStatus === 0){\n  //     this.createEnemy(50, 50, 5, 7, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Boss Triangle\n  // }\n  // if(currentRoom === 5 & this.state.roomFiveStatus === 0){\n  //     this.createEnemy(15, 15, 10, 12, 2, 5, 25, 10, 10, 3, 5, 9, 4, 10, 0, 0, 0, 0, 0, 0, 0, 2) //Parallelogram 15, 10, 12, 2, 5, 25 - Trapezium 10, 3, 5, 9, 4, 10\n  // }\n  // if(currentRoom === 6 & this.state.roomSixStatus === 0){\n  //     this.createEnemy(20, 20, 2, 3, 7, 1, 1, 20, 20, 2, 3, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2) //Two Circles\n  // }\n  // if(currentRoom === 7 & this.state.roomSevenStatus === 0){\n  //     this.createEnemy(15, 15, 4, 5, 2, 2, 2, 15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2) // Two Squares\n  // }\n  // if(currentRoom === 8 & this.state.roomEightStatus === 0){\n  //     this.createEnemy(80, 80, 6, 8, 3, 4, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One BOSS pentagon\n  // }\n  // if(currentRoom === 9 & this.state.roomNineStatus === 0){\n  //     this.createEnemy(30, 30, 4, 5, 2, 2, 10, 15, 15, 10, 14, 2, 5, 25, 4, 4, 1, 5, 10, 10, 5, 3) //Semi-Circle - Parallelogram - Trapezium\n  // }\n  // if(currentRoom === 10 & this.state.roomTenStatus === 0){\n  //     this.createEnemy(100, 100, 4, 7, 2, 2, 20, 100, 100, 4, 7, 2, 2, 20, 0, 0, 0, 0, 0, 0, 0, 2) //Two Hexagons\n  // }\n  // if(currentRoom === 11 & this.state.roomElevenStatus === 0){\n  //     this.createEnemy(50, 50, 5, 8, 4, 3, 15, 50, 50, 5, 8, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 2)\n  // }\n  // if(currentRoom === 12 & this.state.roomTwelveStatus === 0){\n  //     this.createEnemy(500, 500, 15, 20, 8, 8, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)\n  // }\n  // }\n  // *TIMED COMBAT\n\n\n  function startCombat() {\n    setStartCombatCheck(true);\n    setRunPlayerAttackTimer(true);\n  }\n\n  function playerAttackRandomizer(playerAttackLow, playerAttackHigh) {\n    return Math.floor(Math.random() * (playerAttackHigh - playerAttackLow + 1) + playerAttackLow);\n  }\n\n  function currentEnemyAttackRandomizer(enemyAttackLow, enemyAttackHigh) {\n    return Math.floor(Math.random() * (enemyAttackHigh - enemyAttackLow + 1) + enemyAttackLow);\n  }\n\n  function showToastMessageRed(damageTaken) {\n    toast.error(`You took ${damageTaken} damage !`, {\n      position: toast.POSITION.TOP_RIGHT,\n      autoClose: 1500\n    });\n  } // playerHasNoSpeed = () => {\n  //     alert(\"You have no more speed! You took 10 damage. Return to Room One or use a stamina potion to regain your speed.\")\n  //     this.setState({\n  //         playerHealth: this.state.playerHealth - 10,\n  //         enemyRewardCheck: 0,\n  //         enemy2RewardCheck: 0,\n  //         enemy3RewardCheck: 0,\n  //     })\n  // }\n  // *BEGINNING OF ENEMY COMBAT ATTACK SEQUENCE\n  // *START ENEMY ONE TIMED ATTACK SEQUENCE\n\n\n  function enemyOneAttackTimer() {\n    console.log(\"Enemy ONE Attack Timer\");\n\n    if (enemyOne.enemySpeed > 0) {\n      setEnemyOne(prevEnemyOne => {\n        return { ...prevEnemyOne,\n          enemySpeed: enemyOne.enemySpeed - 1\n        };\n      });\n    }\n\n    if (enemyOne.enemySpeed <= 0) {\n      enemyOneCounterAttack();\n      setEnemyOne(prevEnemyOne => {\n        return { ...prevEnemyOne,\n          enemySpeed: enemyOne.enemyMaxSpeed\n        };\n      });\n    }\n  }\n\n  function enemyOneCounterAttack() {\n    var currentEnemyAttack = currentEnemyAttackRandomizer(enemyOne.enemyAttackLow, enemyOne.enemyAttackHigh) - player.playerArmor;\n\n    if (currentEnemyAttack <= 0) {\n      currentEnemyAttack = 1;\n    }\n\n    playerTakeDamage(currentEnemyAttack);\n  } // !END ENEMY ONE TIMED ATTACK SEQUENCE --- AFTER PLAYER TAKE DAMAGE\n  // *START ENEMY TWO TIMED ATTACK SEQUENCE\n\n\n  function enemyTwoAttackTimer() {\n    console.log(\"Enemy TWO Attack Timer\");\n\n    if (enemyTwo.enemy2Speed > 0) {\n      setEnemyTwo(prevEnemyTwo => {\n        return { ...prevEnemyTwo,\n          enemy2Speed: enemyTwo.enemy2Speed - 1\n        };\n      });\n    }\n\n    if (enemyTwo.enemy2Speed <= 0) {\n      enemyTwoCounterAttack();\n      setEnemyTwo(prevEnemyTwo => {\n        return { ...prevEnemyTwo,\n          enemy2Speed: enemyTwo.enemy2MaxSpeed\n        };\n      });\n    }\n  }\n\n  function enemyTwoCounterAttack() {\n    var currentEnemyAttack = currentEnemyAttackRandomizer(enemyTwo.enemy2AttackLow, enemyTwo.enemy2AttackHigh) - player.playerArmor;\n\n    if (currentEnemyAttack <= 0) {\n      currentEnemyAttack = 1;\n    }\n\n    playerTakeDamage(currentEnemyAttack);\n  } // !END ENEMY TWO TIMED ATTACK SEQUENCE --- AFTER PLAYER TAKE DAMAGE\n  // *START ENEMY THREE TIMED ATTACK SEQUENCE\n\n\n  function enemyThreeAttackTimer() {\n    console.log(\"Enemy THREE Attack Timer\");\n\n    if (enemyThree.enemy3Speed > 0) {\n      setEnemyThree(prevEnemyThree => {\n        return { ...prevEnemyThree,\n          enemy3Speed: enemyThree.enemy3Speed - 1\n        };\n      });\n    }\n\n    if (enemyThree.enemy3Speed <= 0) {\n      enemyThreeCounterAttack();\n      setEnemyThree(prevEnemyThree => {\n        return { ...prevEnemyThree,\n          enemy3Speed: enemyThree.enemy3MaxSpeed\n        };\n      });\n    }\n  }\n\n  function enemyThreeCounterAttack() {\n    var currentEnemyAttack = currentEnemyAttackRandomizer(enemyThree.enemy3AttackLow, enemyThree.enemy3AttackHigh) - player.playerArmor;\n\n    if (currentEnemyAttack <= 0) {\n      currentEnemyAttack = 1;\n    }\n\n    playerTakeDamage(currentEnemyAttack);\n  } // !END ENEMY THREE TIMED ATTACK SEQUENCE --- AFTER PLAYER TAKE DAMAGE\n\n\n  function playerTakeDamage(damageTaken) {\n    setPlayer(prevPlayer => {\n      return { ...prevPlayer,\n        playerHealth: player.playerHealth - damageTaken\n      };\n    });\n    showToastMessageRed(damageTaken);\n  } // *START PLAYER ATTACK TIMER\n\n\n  function playerAttackTimer(timer) {\n    var timeHolder = timer;\n\n    if (timeHolder >= 0) {\n      console.log(`THIS IS PLAYER ATTACK TIMER ${timeHolder}`);\n      playerAttackTimerSetState(timeHolder);\n    }\n  }\n\n  function playerAttackTimerSetState(timer) {\n    var newTimeHolder = timer - 1;\n    setTimeout(() => {\n      setPlayerAttackTimerState(prevPlayerAttackTimerState => prevPlayerAttackTimerState - 1);\n    }, 1000);\n    setTimeout(() => {\n      playerAttackTimer(newTimeHolder);\n    }, 1000);\n  } // !END PLAYER ATTACK TIMER\n  // *PLAYER ATTACK BUTTON STARTS HERE\n\n\n  function playerAttackMove(attackEnemy) {\n    var currentPlayerAttack = playerAttackRandomizer(player.playerAttackLow, player.playerAttackHigh);\n\n    if (attackEnemy === 1 & enemyOne.enemyHealth <= 0) {\n      deadCheck(currentPlayerAttack, attackEnemy);\n      alert(\"You killed this enemy!\");\n    }\n\n    if (attackEnemy === 1 & enemyOne.enemyHealth > 0) {\n      currentPlayerAttack = currentPlayerAttack - enemyOne.enemyArmor;\n\n      if (currentPlayerAttack <= 0) {\n        currentPlayerAttack = 1;\n      }\n\n      playerAttackMoveSetState(1, currentPlayerAttack);\n      deadCheck(currentPlayerAttack, attackEnemy);\n    }\n\n    if (attackEnemy === 2 & enemyTwo.enemy2Health <= 0) {\n      deadCheck(currentPlayerAttack, attackEnemy);\n      alert(\"You killed enemy 2!\");\n    }\n\n    if (attackEnemy === 2 & enemyTwo.enemy2Health > 0) {\n      currentPlayerAttack = currentPlayerAttack - enemyTwo.enemy2Armor;\n\n      if (currentPlayerAttack <= 0) {\n        currentPlayerAttack = 1;\n      }\n\n      playerAttackMoveSetState(2, currentPlayerAttack);\n      deadCheck(currentPlayerAttack, attackEnemy);\n    }\n\n    if (attackEnemy === 3 & enemyThree.enemy3Health <= 0) {\n      deadCheck(currentPlayerAttack, attackEnemy);\n      alert(\"You killed enemy 3!\");\n    }\n\n    if (attackEnemy === 3 & enemyThree.enemy3Health > 0) {\n      currentPlayerAttack = currentPlayerAttack - enemyThree.enemy3Armor;\n\n      if (currentPlayerAttack <= 0) {\n        currentPlayerAttack = 1;\n      }\n\n      playerAttackMoveSetState(3, currentPlayerAttack);\n      deadCheck(currentPlayerAttack, attackEnemy);\n    }\n  }\n\n  function playerAttackMoveSetState(attackEnemyNumber, currentPlayerAttack) {\n    if (attackEnemyNumber === 1) {\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerDamageDone: currentPlayerAttack\n        };\n      });\n      setEnemyOne(prevEnemyOne => {\n        return { ...prevEnemyOne,\n          enemyHealth: enemyOne.enemyHealth - currentPlayerAttack\n        };\n      });\n      setPlayerAttacked(1);\n      showToastMessage(currentPlayerAttack, attackEnemyNumber);\n    }\n\n    if (attackEnemyNumber === 2) {\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerDamageDone: currentPlayerAttack\n        };\n      });\n      setEnemyTwo(prevEnemyTwo => {\n        return { ...prevEnemyTwo,\n          enemy2Health: enemyTwo.enemy2Health - currentPlayerAttack\n        };\n      });\n      setPlayerAttacked(1);\n      showToastMessage(currentPlayerAttack, attackEnemyNumber);\n    }\n\n    if (attackEnemyNumber === 3) {\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerDamageDone: currentPlayerAttack\n        };\n      });\n      setEnemyThree(prevEnemyThree => {\n        return { ...prevEnemyThree,\n          enemy3Health: enemyThree.enemy3Health - currentPlayerAttack\n        };\n      });\n      setPlayerAttacked(1);\n      showToastMessage(currentPlayerAttack, attackEnemyNumber);\n    }\n  }\n\n  function deadCheck(currentPlayerAttack, attackEnemy) {\n    if (enemyOne.enemyHealth - currentPlayerAttack <= 0 & enemyOne.enemyRewardCheck === 0 & attackEnemy === 1) {\n      deadCheckSetState(1);\n    }\n\n    if (enemyTwo.enemy2Health - currentPlayerAttack <= 0 & enemyTwo.enemy2RewardCheck === 0 & attackEnemy === 2) {\n      deadCheckSetState(2);\n    }\n\n    if (enemyThree.enemy3Health - currentPlayerAttack <= 0 & enemyThree.enemy3RewardCheck === 0 & attackEnemy === 3) {\n      deadCheckSetState(3);\n    }\n\n    setRunPlayerAttackTimer(true);\n  }\n\n  function deadCheckSetState(enemyNumber) {\n    if (enemyNumber === 1) {\n      setEnemyOne(prevEnemyOne => {\n        return { ...prevEnemyOne,\n          enemyHealth: 0,\n          enemyRewardCheck: 1\n        };\n      });\n      console.log(\"SET ENEMY ONE KILLED --------------------------------------------------------\");\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerCoins: player.playerCoins + enemyOne.enemyReward\n        };\n      });\n    }\n\n    if (enemyNumber === 2) {\n      setEnemyTwo(prevEnemyTwo => {\n        return { ...prevEnemyTwo,\n          enemy2Health: 0,\n          enemy2RewardCheck: 1\n        };\n      });\n      console.log(\"SET ENEMY TWO KILLED --------------------------------------------------------\");\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerCoins: player.playerCoins + enemyTwo.enemy2Reward\n        };\n      });\n    }\n\n    if (enemyNumber === 3) {\n      setEnemyThree(prevEnemyThree => {\n        return { ...prevEnemyThree,\n          enemy3Health: 0,\n          enemy3RewardCheck: 1\n        };\n      });\n      console.log(\"SET ENEMY THREE KILLED --------------------------------------------------------\");\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerCoins: player.playerCoins + enemyTwo.enemy3Reward\n        };\n      });\n    }\n  }\n\n  function setCurrentRoomStatusClearEnemy() {\n    if (currentRoom === 2) {\n      setRoomTwoStatus(1);\n    } // if(this.state.currentRoom === 3){\n    //     this.setState({\n    //         roomThreeStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 4){\n    //     this.setState({\n    //         roomFourStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 5){\n    //     this.setState({\n    //         roomFiveStatus: 1,\n    //     })\n    // }\n\n\n    if (currentRoom === 6) {\n      setRoomSixStatus(1);\n    } // if(this.state.currentRoom === 7){\n    //     this.setState({\n    //         roomSevenStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 8){\n    //     this.setState({\n    //         roomEightStatus: 1,\n    //     })\n    // }\n\n\n    if (currentRoom === 9) {\n      setRoomNineStatus(1);\n    } // if(this.state.currentRoom === 10){\n    //     this.setState({\n    //         roomTenStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 11){\n    //     this.setState({\n    //         roomElevenStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 12){\n    //     this.setState({\n    //         roomTwelveStatus: 1,\n    //     })\n    // }\n\n  } //                                         // !END OF ATTACK SEQUENCE\n  //                                         // *BEGINNING OF DODGE SEQUENCE\n  // playerDodgeMove = () => {\n  //     var playerSpeedThisDodgeAttack = Math.floor(Math.random() * (100 - this.state.playerSpeed + 1) + this.state.playerSpeed)\n  //     var enemySpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemySpeed + 1) + this.state.enemySpeed)\n  //     var enemy2SpeedThisRound = 0\n  //     var enemy3SpeedThisRound = 0\n  //     var playerDamageTaken = 0\n  //     if(this.state.playerSpeed > 0){\n  //         if(this.state.enemy2Speed > 0){\n  //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy2Speed + 1) + this.state.enemy2Speed)\n  //         }\n  //         if(this.state.enemy3Speed > 0){\n  //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy3Speed + 1) + this.state.enemy3Speed)\n  //         }\n  //         console.log(playerSpeedThisDodgeAttack)\n  //         console.log(enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound)\n  //         if(playerSpeedThisDodgeAttack > enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\n  //             console.log(\"Successful Dodge\")\n  //             this.enemyWithMostHealth()\n  //             }\n  //         if(playerSpeedThisDodgeAttack <= enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\n  //             console.log(\"Player Missed Dodge\")\n  //             this.playerMissedDodge()\n  //             }\n  //         }\n  //     if(this.state.playerSpeed <= 0){\n  //         alert(\"You have no speed to dodge!\")\n  //     }\n  // }\n  //     // player attacks enemy with highest health with full attack power if the ransomizer is greater than the enemies; speed \n  // enemyWithMostHealth = () => {\n  //     var highEnemyHealth = Math.max(this.state.enemyHealth, this.state.enemy2Health, this.state.enemy3Health)\n  //     if(highEnemyHealth === this.state.enemyHealth){\n  //         this.setState({\n  //             enemyHealth: this.state.enemyHealth - (this.state.playerAttackHigh - this.state.enemyArmor),\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\n  //             })\n  //             return\n  //     }\n  //     if(highEnemyHealth === this.state.enemy2Health){\n  //         this.setState({\n  //             enemy2Health: this.state.enemy2Health - (this.state.playerAttackHigh - this.state.enemy2Armor),\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\n  //             })\n  //             return\n  //     }\n  //     if(highEnemyHealth === this.state.enemy3Health){\n  //         this.setState({\n  //             enemy3Health: this.state.enemy3Health - (this.state.playerAttackHigh - this.state.enemy3Armor),\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\n  //             })\n  //             return\n  //     }\n  // }\n  // playerMissedDodge = () => {\n  //     var currentEnemyAttack = this.currentEnemyAttackRandomizer(this.state.enemyAttackLow, this.state.enemyAttackHigh)\n  //     var currentEnemy2Attack = this.currentEnemyAttackRandomizer(this.state.enemy2AttackLow, this.state.enemy2AttackHigh)\n  //     var currentEnemy3Attack = this.currentEnemyAttackRandomizer(this.state.enemy3AttackLow, this.state.enemy3AttackHigh)\n  //     var playerDamage = currentEnemyAttack + currentEnemy2Attack + currentEnemy3Attack\n  //     this.setState({\n  //         playerHealth: this.state.playerHealth - playerDamage,\n  //         playerSpeed: this.state.playerSpeed - 1,\n  //         enemyDamageDone: playerDamage,\n  //         })\n  // }\n  //                                         // !END DODGE SEQUENCE\n  // typeOfEnemyAttack = () => {\n  // }\n  // openChest = () => {\n  //     if(this.state.currentRoom === 4){\n  //         this.setState({\n  //             healthPotionEffect: this.state.healthPotionEffect + 15,\n  //             roomFourStatus: 2,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 8){\n  //         this.setState({\n  //             healthPotionEffect: this.state.healthPotionEffect + 15,\n  //             roomEightStatus: 2,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 12){\n  //         this.setState({\n  //             healthPotionEffect: this.state.healthPotionEffect + 15,\n  //             roomTwelveStatus: 2,\n  //         })\n  //     }\n  // }\n  //                                         // *ON-SCREEN PROMPTS\n\n\n  function showToastMessage(currentPlayerAttack, attackEnemyNumber) {\n    if (attackEnemyNumber === 1) {\n      toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 1 !\", {\n        position: toast.POSITION.TOP_CENTER\n      });\n    }\n\n    if (attackEnemyNumber === 2) {\n      toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 2 !\", {\n        position: toast.POSITION.TOP_CENTER\n      });\n    }\n\n    if (attackEnemyNumber === 3) {\n      toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 3 !\", {\n        position: toast.POSITION.TOP_CENTER\n      });\n    }\n  } // *GAME TIMER/BREAKLOOP TIMER\n\n\n  function gameTime() {\n    setBreakLoop(prevBreakLoop => prevBreakLoop + 1);\n    setGameTick(prevGameTick => prevGameTick + 1);\n    setRunEnemyOneAttackTimer(true);\n    setRunEnemyTwoAttackTimer(true);\n    setRunEnemyThreeAttackTimer(true);\n\n    if (breakLoop < 300) {\n      setTimeout(() => {\n        gameTime();\n      }, 1000);\n    }\n\n    console.log(`gameTime() ran. gameTick is at ${gameTick}`);\n  } //  !END GAME TIMER\n  //                                         //  *ROOM TIMER\n  // roomTime = () => {\n  //     this.roomTimeSetState()\n  //     if(this.state.roomBreakLoop < 300){\n  //         setTimeout(() => {this.roomTime(); }, 1000);\n  //     }\n  //     console.log(`gameRoomTime() is running. roomTime is at ${this.state.roomTime}`)\n  // }\n  // roomTimeSetState = () => {\n  //     this.setState({\n  //         roomTime: this.state.roomTime + 1,\n  //         roomBreakLoop: this.state.roomBreakLoop + 1,\n  //     })\n  // }\n  // !END ROOM TIMER\n  // render() {\n\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      resetRoomStatus: resetRoomStatus,\n      gameTick: gameTick,\n      devButtonUpgrade: devButtonUpgrade,\n      devButtonDowngrade: devButtonDowngrade,\n      player: player\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1008,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1009,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {\n          player: player,\n          enemyOne: enemyOne,\n          pickClass: pickClass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/GameBoard\",\n        element: /*#__PURE__*/_jsxDEV(GameBoard, {\n          useHealthPotion: useHealthPotion,\n          buyFromStore: buyFromStore,\n          roomMovement: roomMovement,\n          createEnemy: createEnemy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 55\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1013,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/RoomTwo\",\n        element: /*#__PURE__*/_jsxDEV(RoomTwo, {\n          resetRoomStatus: resetRoomStatus,\n          roomMovement: roomMovement,\n          enemyOne: enemyOne,\n          roomTwoStatus: roomTwoStatus,\n          currentRoom: currentRoom,\n          numberOfEnemiesInRoom: numberOfEnemiesInRoom,\n          startCombatCheck: startCombatCheck,\n          startCombat: startCombat,\n          playerAttacked: playerAttacked,\n          playerAttackTimerState: playerAttackTimerState,\n          playerAttackTimerStateMax: playerAttackTimerStateMax,\n          playerAttackMove: playerAttackMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 53\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/RoomSix\",\n        element: /*#__PURE__*/_jsxDEV(RoomSix, {\n          roomMovement: roomMovement,\n          enemyOne: enemyOne,\n          enemyTwo: enemyTwo,\n          roomSixStatus: roomSixStatus,\n          currentRoom: currentRoom,\n          numberOfEnemiesInRoom: numberOfEnemiesInRoom,\n          startCombatCheck: startCombatCheck,\n          startCombat: startCombat,\n          playerAttacked: playerAttacked,\n          playerAttackTimerState: playerAttackTimerState,\n          playerAttackTimerStateMax: playerAttackTimerStateMax,\n          playerAttackMove: playerAttackMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1025,\n          columnNumber: 53\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/RoomNine\",\n        element: /*#__PURE__*/_jsxDEV(RoomNine, {\n          roomMovement: roomMovement,\n          enemyOne: enemyOne,\n          enemyTwo: enemyTwo,\n          enemyThree: enemyThree,\n          roomNineStatus: roomNineStatus,\n          currentRoom: currentRoom,\n          numberOfEnemiesInRoom: numberOfEnemiesInRoom,\n          startCombatCheck: startCombatCheck,\n          startCombat: startCombat,\n          playerAttacked: playerAttacked,\n          playerAttackTimerState: playerAttackTimerState,\n          playerAttackTimerStateMax: playerAttackTimerStateMax,\n          playerAttackMove: playerAttackMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1031,\n          columnNumber: 54\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1031,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1010,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1007,\n    columnNumber: 13\n  }, this);\n}\n\n_s(App, \"BXnXydiLHEl5TAVfVYMSZuuDuWg=\");\n\n_c = App;\nexport default App; // playerMaxSpeed={playerMaxSpeed} playerMaxHealth={playerMaxHealth} playerHealth={playerHealth} playerAttackLow={playerAttackLow} playerAttackHigh={playerAttackHigh} playerSpeed={playerSpeed} playerArmor={playerArmor} playerCoins={playerCoins} playerHealthPotion={playerHealthPotion} playerStaminaPotion={playerStaminaPotion}\n// enemyHealth={enemyHealth} enemyMaxHealth={enemyMaxHealth} enemyAttackLow={enemyAttackLow} enemyAttackHigh={enemyAttackHigh} enemySpeed={enemySpeed} enemyMaxSpeed={enemyMaxSpeed} enemyArmor={enemyArmor} enemyReward={enemyReward}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","ReactDOM","useState","useEffect","BrowserRouter","Routes","Route","Link","Home","Navbar","Layout","GameBoard","RoomTwo","RoomThree","RoomFour","RoomFive","RoomSix","RoomSeven","RoomEight","RoomNine","RoomTen","RoomEleven","RoomTwelve","DamageEffects","ToastContainer","toast","App","gameTick","setGameTick","breakLoop","setBreakLoop","player","setPlayer","playerHealth","playerMaxHealth","playerAttackLow","playerAttackHigh","playerSpeed","playerMaxSpeed","playerArmor","playerCoins","playerHealthPotion","playerHealthPotionEffect","playerStaminaPotion","playerDamageDone","playerAttackTimerState","setPlayerAttackTimerState","playerAttackTimerStateMax","setPlayerAttackTimerStateMax","runPlayerAttackTimer","setRunPlayerAttackTimer","playerAttacked","setPlayerAttacked","startCombatCheck","setStartCombatCheck","enemyOne","setEnemyOne","enemyMaxHealth","enemyHealth","enemyAttackLow","enemyAttackHigh","enemySpeed","enemyMaxSpeed","enemyArmor","enemyReward","enemyRewardCheck","enemyTwo","setEnemyTwo","enemy2MaxHealth","enemy2Health","enemy2AttackLow","enemy2AttackHigh","enemy2Speed","enemy2MaxSpeed","enemy2Armor","enemy2Reward","enemy2RewardCheck","enemyThree","setEnemyThree","enemy3MaxHealth","enemy3Health","enemy3AttackLow","enemy3AttackHigh","enemy3Speed","enemy3MaxSpeed","enemy3Armor","enemy3Reward","enemy3RewardCheck","numberOfEnemiesInRoom","setNumberOfEnemiesInRoom","currentRoom","setCurrentRoom","currentRoomStatus","setCurrentRoomStatus","roomTwoStatus","setRoomTwoStatus","roomThreeStatus","setRoomThreeStatus","roomFourStatus","setRoomFourStatus","roomFiveStatus","setRoomFiveStatus","roomSixStatus","setRoomSixStatus","roomSevenStatus","setRoomSevenStatus","roomEightStatus","setRoomEightStatus","roomNineStatus","setRoomNineStatus","roomTenStatus","setRoomTenStatus","roomElevenStatus","setRoomElevenStatus","roomTwelveStatus","setRoomTwelveStatus","runEnemyOneAttackTimer","setRunEnemyOneAttackTimer","runEnemyTwoAttackTimer","setRunEnemyTwoAttackTimer","runEnemyThreeAttackTimer","setRunEnemyThreeAttackTimer","playerAttackTimer","enemyOneAttackTimer","enemyTwoAttackTimer","enemyThreeAttackTimer","setCurrentRoomStatusClearEnemy","devButtonUpgrade","prevPlayer","devButtonDowngrade","useHealthPotion","alert","buyFromStore","item","resetRoomStatus","prevEnemyOne","prevEnemyTwo","prevEnemyThree","pickClass","health","maxHealth","attackLow","attackHigh","speed","maxSpeed","armor","coins","healthPotion","staminaPotion","attackTimer","console","log","gameTime","createEnemy","reward","maxHealth2","health2","attack2Low","attack2High","speed2","armor2","reward2","maxHealth3","health3","attack3Low","attack3High","speed3","armor3","reward3","roomMovement","nowCurrentRoom","startCombat","playerAttackRandomizer","Math","floor","random","currentEnemyAttackRandomizer","showToastMessageRed","damageTaken","error","position","POSITION","TOP_RIGHT","autoClose","enemyOneCounterAttack","currentEnemyAttack","playerTakeDamage","enemyTwoCounterAttack","enemyThreeCounterAttack","timer","timeHolder","playerAttackTimerSetState","newTimeHolder","setTimeout","prevPlayerAttackTimerState","playerAttackMove","attackEnemy","currentPlayerAttack","deadCheck","playerAttackMoveSetState","attackEnemyNumber","showToastMessage","deadCheckSetState","enemyNumber","success","TOP_CENTER","prevBreakLoop","prevGameTick"],"sources":["C:/Users/freeb/OneDrive/Desktop/Game_Project/Game_Project_Frontend/GameFrontEnd/src/components/App.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useState, useEffect } from 'react'\r\nimport { BrowserRouter, Routes, Route, Link } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Home from './Home/Home';\r\nimport Navbar from './Navbar/Navbar';\r\nimport Layout from './Layout/Layout';\r\nimport GameBoard from './GameBoard/GameBoard';\r\nimport RoomTwo from './RoomTwo/RoomTwo';\r\nimport RoomThree from './RoomThree/RoomThree';\r\nimport RoomFour from './RoomFour/RoomFour';\r\nimport RoomFive from './RoomFive/RoomFive';\r\nimport RoomSix from './RoomSix/RoomSix';\r\nimport RoomSeven from './RoomSeven/RoomSeven';\r\nimport RoomEight from './RoomEight/RoomEight';\r\nimport RoomNine from './RoomNine/RoomNine';\r\nimport RoomTen from './RoomTen/RoomTen';\r\nimport RoomEleven from './RoomEleven/RoomEleven';\r\nimport RoomTwelve from './RoomTwelve/RoomTwelve';\r\nimport DamageEffects from './DamageEffects/DamageEffects';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nfunction App() {\r\n    const [gameTick, setGameTick] = useState(0)\r\n    const [breakLoop, setBreakLoop] = useState(0)\r\n\r\n    const [player, setPlayer] = useState({\r\n        playerHealth: 0,\r\n        playerMaxHealth: 0,\r\n        playerAttackLow: 0,\r\n        playerAttackHigh: 0,\r\n        playerSpeed: 0,\r\n        playerMaxSpeed: 0,\r\n        playerArmor: 0,\r\n        playerCoins: 0,\r\n        playerHealthPotion: 0,\r\n        playerHealthPotionEffect: 15,\r\n        playerStaminaPotion: 0,\r\n        playerDamageDone: 0\r\n    })\r\n\r\n    const [playerAttackTimerState, setPlayerAttackTimerState] = useState(0)\r\n    const [playerAttackTimerStateMax, setPlayerAttackTimerStateMax] = useState(0)\r\n    const [runPlayerAttackTimer, setRunPlayerAttackTimer] = useState(false)\r\n\r\n    const [playerAttacked, setPlayerAttacked] = useState(1)\r\n\r\n\r\n    const [startCombatCheck, setStartCombatCheck] = useState(false)\r\n\r\n    const [enemyOne, setEnemyOne] = useState({\r\n        enemyMaxHealth: 0, \r\n        enemyHealth: 0, \r\n        enemyAttackLow: 0,\r\n        enemyAttackHigh: 0, \r\n        enemySpeed: 0, \r\n        enemyMaxSpeed: 0, \r\n        enemyArmor: 0, \r\n        enemyReward: 0,\r\n        enemyRewardCheck: 0\r\n    })\r\n\r\n    const [enemyTwo, setEnemyTwo] = useState({\r\n        enemy2MaxHealth: 1, \r\n        enemy2Health: 1, \r\n        enemy2AttackLow: 0, \r\n        enemy2AttackHigh: 0,\r\n        enemy2Speed: 0, \r\n        enemy2MaxSpeed: 0, \r\n        enemy2Armor: 0, \r\n        enemy2Reward: 0,\r\n        enemy2RewardCheck: 0\r\n    })\r\n    const [enemyThree, setEnemyThree] = useState({\r\n        enemy3MaxHealth: 1, \r\n        enemy3Health: 1, \r\n        enemy3AttackLow: 0, \r\n        enemy3AttackHigh: 0, \r\n        enemy3Speed: 0, \r\n        enemy3MaxSpeed: 0, \r\n        enemy3Armor: 0, \r\n        enemy3Reward: 0,\r\n        enemy3RewardCheck: 0\r\n    })\r\n\r\n    const [numberOfEnemiesInRoom, setNumberOfEnemiesInRoom] = useState(0)\r\n    // const [enemyDamageDone, setEnemyDamageDone] = useState(0)\r\n\r\n    const[currentRoom, setCurrentRoom] = useState(0)\r\n    const[currentRoomStatus, setCurrentRoomStatus] = useState(0)\r\n\r\n    const [roomTwoStatus, setRoomTwoStatus] = useState(0)\r\n    const [roomThreeStatus, setRoomThreeStatus] = useState(0)\r\n    const [roomFourStatus, setRoomFourStatus] = useState(0)\r\n    const [roomFiveStatus, setRoomFiveStatus] = useState(0)\r\n    const [roomSixStatus, setRoomSixStatus] = useState(0)\r\n    const [roomSevenStatus, setRoomSevenStatus] = useState(0)\r\n    const [roomEightStatus, setRoomEightStatus] = useState(0)\r\n    const [roomNineStatus, setRoomNineStatus] = useState(0)\r\n    const [roomTenStatus, setRoomTenStatus] = useState(0)\r\n    const [roomElevenStatus, setRoomElevenStatus] = useState(0)\r\n    const [roomTwelveStatus, setRoomTwelveStatus] = useState(0)\r\n\r\n\r\n\r\n    const [runEnemyOneAttackTimer, setRunEnemyOneAttackTimer] = useState(false)\r\n    const [runEnemyTwoAttackTimer, setRunEnemyTwoAttackTimer] = useState(false)\r\n    const [runEnemyThreeAttackTimer, setRunEnemyThreeAttackTimer] = useState(false)\r\n\r\n\r\n\r\n// class App extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             roomTime: 0,\r\n//             roomBreakLoop: 0,\r\n//             breakLoop: 0,\r\n//             gameTick: -1,\r\n//             roomThreeStatus: 0,\r\n//             roomFourStatus: 0,\r\n//             roomFiveStatus: 0,\r\n//             roomSevenStatus: 0,\r\n//             roomEightStatus: 0,\r\n//             roomTenStatus: 0,\r\n//             roomElevenStatus: 0,\r\n//             roomTwelveStatus:0,\r\n//             currentRoom: 0,\r\n//             currentRoomStatus: 0,\r\n//             startCombatCheck: false,\r\n//             playerAttacked: 1,\r\n//         }\r\n//     }\r\n\r\nuseEffect(() => {\r\n    if(playerAttackTimerState < 0 & runPlayerAttackTimer === false){\r\n        setPlayerAttackTimerState(playerAttackTimerStateMax)\r\n        setPlayerAttacked(2)\r\n    }\r\n    if(playerAttackTimerState >= 0 & runPlayerAttackTimer === true){\r\n        setRunPlayerAttackTimer(false)\r\n        if(enemyOne.enemyHealth > 0 || enemyTwo.enemy2Health > 0 || enemyThree.enemy3Health > 0){\r\n            playerAttackTimer(playerAttackTimerState)\r\n        }\r\n    }\r\n    if(enemyOne.enemyHealth > 0 & startCombatCheck === true & runEnemyOneAttackTimer === true){\r\n        setRunEnemyOneAttackTimer(false)\r\n        enemyOneAttackTimer()\r\n    }\r\n    if(enemyTwo.enemy2Health > 0 & startCombatCheck === true & runEnemyTwoAttackTimer === true){\r\n        setRunEnemyTwoAttackTimer(false)\r\n        enemyTwoAttackTimer()\r\n    }\r\n    if(enemyThree.enemy3Health > 0 & startCombatCheck === true & runEnemyThreeAttackTimer === true){\r\n        setRunEnemyThreeAttackTimer(false)\r\n        enemyThreeAttackTimer()\r\n    }\r\n    if(enemyOne.enemyHealth <= 0 & enemyTwo.enemy2Health <= 0 & enemyThree.enemy3Health <= 0){\r\n        setCurrentRoomStatusClearEnemy()\r\n        setStartCombatCheck(false)\r\n    }\r\n\r\n})\r\n\r\n\r\n\r\n    function devButtonUpgrade() {\r\n        setPlayer (prevPlayer => {\r\n            return {...prevPlayer,\r\n            playerHealth: player.playerMaxHealth,\r\n            playerAttackHigh: player.playerAttackHigh + 5,\r\n            playerCoins: player.playerCoins + 100\r\n        }\r\n        })\r\n    }\r\n\r\n    function devButtonDowngrade() {\r\n        setPlayer (prevPlayer => {\r\n            return {...prevPlayer,\r\n            playerAttackHigh: player.playerAttackHigh - 5,\r\n        }\r\n        })\r\n    }\r\n\r\n    function useHealthPotion() {\r\n        if(player.playerHealthPotion <= 0){\r\n            return(alert(\"You are out of health potions!\"))\r\n        }\r\n        if(player.playerHealth + player.playerHealthPotionEffect > player.playerMaxHealth){\r\n            setPlayer (prevPlayer => {\r\n                return {...prevPlayer,\r\n                playerHealthPotion: player.playerHealthPotion - 1,\r\n                playerHealth: player.playerMaxHealth\r\n            }\r\n            })\r\n        } \r\n        if(player.playerHealth >= player.playerMaxHealth){\r\n            return(alert(\"You are at max health!\"))\r\n        }\r\n        else {\r\n            setPlayer (prevPlayer => {\r\n                return {...prevPlayer,\r\n                playerHealthPotion: player.playerHealthPotion - 1,\r\n                playerHealth: player.playerHealth + player.playerHealthPotionEffect\r\n            }\r\n            })\r\n        }\r\n    }\r\n\r\n    // useStaminaPotion = () => {\r\n    //     if(this.state.playerStaminaPotion <= 0){\r\n    //         return(alert(\"You are out of stamina potions!\"))\r\n    //     }\r\n    //     if(this.state.playerSpeed === this.state.maxPlayerSpeed){\r\n    //         return(alert(\"You're already at max speed!\"))\r\n    //     } else {\r\n    //         this.setState({\r\n    //             playerStaminaPotion: this.state.playerStaminaPotion - 1,\r\n    //             playerSpeed: this.state.maxPlayerSpeed,\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    function buyFromStore(item) {\r\n        if(item === \"health\"){\r\n            if(player.playerCoins >= 5){\r\n                setPlayer(prevPlayer =>{\r\n                    return {...prevPlayer,\r\n                    playerCoins: player.playerCoins - 5,\r\n                    playerMaxHealth: player.playerMaxHealth + 10\r\n                    }\r\n                })\r\n                // setPlayerCoins(prevPlayerCoins => prevPlayerCoins - 5)\r\n                // setPlayerMaxHealth(prevPlayerMaxHealth => prevPlayerMaxHealth + 10)\r\n            } else {\r\n                alert(\"You can't afford a health upgrade.\")\r\n            }\r\n        }\r\n        // if(item === \"attackLow\"){\r\n        //     if(this.state.playerCoins >= 6 & this.state.playerAttackLow < this.state.playerAttackHigh){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 6,\r\n        //             playerAttackLow: this.state.playerAttackLow + 1,\r\n        //         })\r\n        //     } \r\n        //     if(this.state.playerAttackLow >= this.state.playerAttackHigh){\r\n        //         alert(\"Your minimum attack can not exceed you maximum attack.\")\r\n        //     }\r\n        //     if(this.state.playerCoins < 6){\r\n        //         alert(\"You can't afford a minimum attack upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"attackHigh\"){\r\n        //     if(this.state.playerCoins >= 3){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 3,\r\n        //             playerAttackHigh: this.state.playerAttackHigh + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a maximum attack upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"speed\"){\r\n        //     if(this.state.playerCoins >= 2){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 2,\r\n        //             maxPlayerSpeed: this.state.maxPlayerSpeed + 1,\r\n        //             playerSpeed: this.state.playerSpeed + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a speed upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"armor\"){\r\n        //     if(this.state.playerCoins >= 3){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 3,\r\n        //             playerArmor: this.state.playerArmor + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford an armor upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"healthPotion\"){\r\n        //     if(this.state.playerHealthPotion >= 10){\r\n        //         return (alert (\"You can only have up to ten health potions.\"))\r\n        //     }\r\n        //     if(this.state.playerCoins >= 2){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 2,\r\n        //             playerHealthPotion: this.state.playerHealthPotion + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a health potion.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"staminaPotion\"){\r\n        //     if(this.state.playerStaminaPotion >= 8){\r\n        //         return (alert(\"You can only have up to eight stamina potions.\"))\r\n        //     }\r\n        //     if(this.state.playerCoins >= 1){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 1,\r\n        //             playerStaminaPotion: this.state.playerStaminaPotion + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a stamina potion.\")\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    function resetRoomStatus() {\r\n        setRoomTwoStatus(0)\r\n        setRoomThreeStatus(0)\r\n        setRoomFiveStatus(0)\r\n        setRoomSixStatus(0)\r\n        setRoomSevenStatus(0)\r\n        setRoomNineStatus(0)\r\n        setRoomTenStatus(0)\r\n        setRoomElevenStatus(0)\r\n        setEnemyOne(prevEnemyOne => {\r\n            return {...prevEnemyOne, \r\n                enemyRewardCheck: 0\r\n            }\r\n        })\r\n        setEnemyTwo(prevEnemyTwo => {\r\n            return {...prevEnemyTwo, \r\n                enemy2RewardCheck: 0\r\n            }\r\n        })\r\n        setEnemyThree(prevEnemyThree => {\r\n            return {...prevEnemyThree, \r\n                enemy3RewardCheck: 0\r\n            }\r\n        })\r\n        setPlayerAttacked(1)\r\n        setStartCombatCheck(false)\r\n        setPlayer(prevPlayer =>{\r\n            return {...prevPlayer,\r\n            playerSpeed: player.playerMaxSpeed\r\n            }\r\n        })\r\n    }\r\n\r\n    function pickClass(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion, attackTimer) {\r\n        console.log(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion, attackTimer)\r\n        setPlayer(prevPlayer => {\r\n            return {...prevPlayer,\r\n            playerHealth: health,\r\n            playerMaxHealth: maxHealth,\r\n            playerAttackLow: attackLow,\r\n            playerAttackHigh: attackHigh,\r\n            playerSpeed: speed,\r\n            playerMaxSpeed: maxSpeed,\r\n            playerArmor: armor,\r\n            playerCoins: coins,\r\n            playerHealthPotion: healthPotion,\r\n            playerStaminaPotion: staminaPotion\r\n        }\r\n        })\r\n        setPlayerAttackTimerState(attackTimer)\r\n        setPlayerAttackTimerStateMax(attackTimer)\r\n        gameTime()\r\n    }\r\n\r\n    function createEnemy(maxHealth, health, attackLow, attackHigh, speed, armor, reward, maxHealth2, health2, attack2Low, attack2High, speed2, armor2, reward2, maxHealth3, health3, attack3Low, attack3High, speed3, armor3, reward3, numberOfEnemiesInRoom) {\r\n        setEnemyOne(prevEnemyOne => {\r\n            return {...prevEnemyOne, \r\n                enemyMaxHealth: maxHealth,\r\n                enemyHealth: health,\r\n                enemyAttackLow: attackLow,\r\n                enemyAttackHigh: attackHigh,\r\n                enemySpeed: speed,\r\n                enemyMaxSpeed: speed,\r\n                enemyArmor: armor,\r\n                enemyReward: reward\r\n            }\r\n        })\r\n        setEnemyTwo(prevEnemyTwo => {\r\n            return {...prevEnemyTwo,\r\n                enemy2MaxHealth: maxHealth2,\r\n                enemy2Health: health2,\r\n                enemy2AttackLow: attack2Low,\r\n                enemy2AttackHigh: attack2High,\r\n                enemy2Speed: speed2,\r\n                enemy2MaxSpeed: speed2,\r\n                enemy2Armor: armor2,\r\n                enemy2Reward: reward2\r\n            }\r\n        })\r\n        setEnemyThree(prevEnemyThree => {\r\n            return {...prevEnemyThree,\r\n                enemy3MaxHealth: maxHealth3,\r\n                enemy3Health: health3,\r\n                enemy3AttackLow: attack3Low,\r\n                enemy3AttackHigh: attack3High,\r\n                enemy3Speed: speed3,\r\n                enemy3MaxSpeed: speed3,\r\n                enemy3Armor: armor3,\r\n                enemy3Reward: reward3\r\n            }\r\n        })\r\n        setNumberOfEnemiesInRoom(numberOfEnemiesInRoom)\r\n    }\r\n\r\n                        // *ROOM MOVEMENT, CREATES ENEMIES FOR NEXT ROOM, ACCOUNTS FOR AND CHANGES PLAYER SPEED\r\n\r\n    function roomMovement(nowCurrentRoom){\r\n        setCurrentRoom(nowCurrentRoom)\r\n        setPlayerAttackTimerState(playerAttackTimerStateMax)\r\n        setPlayerAttacked(1)\r\n        if(player.playerSpeed > 0){\r\n            setCurrentRoom(nowCurrentRoom)\r\n            setPlayer(prevPlayer => {\r\n                return {...prevPlayer,\r\n                    playerSpeed: player.playerSpeed - 1\r\n                }\r\n            })\r\n        }\r\n            // ?enemyMaxHealth, EnemyHealth, enemyAttackLow, enemyAttackHigh, enemySpeed, enemyArmor, enemyReward\r\n        if(nowCurrentRoom === 2 & roomTwoStatus === 0) {\r\n            createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)\r\n        }\r\n        if(nowCurrentRoom === 6 & roomSixStatus === 0){\r\n            createEnemy(20, 20, 2, 3, 7, 1, 1, 20, 20, 2, 3, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2) //Two Circles\r\n        }\r\n        if(nowCurrentRoom === 9 & roomNineStatus === 0){\r\n            createEnemy(30, 30, 4, 5, 4, 2, 10, 15, 15, 10, 14, 3, 5, 25, 4, 4, 1, 5, 10, 10, 5, 3) //Semi-Circle - Parallelogram - Trapezium\r\n        }\r\n    }\r\n\r\n    // function roomMovement(currentRoom) {\r\n    //     if(player.playerSpeed > 0){\r\n    //         setCurrentRoom(currentRoom)\r\n    //         setPlayer(prevPlayer => {\r\n    //             return {...prevPlayer,\r\n    //                 playerSpeed: player.playerSpeed - 1\r\n    //             }\r\n    //         })\r\n\r\n    //         this.setState({\r\n    //             currentRoom: currentRoom,\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             enemyRewardCheck: 0,\r\n    //             playerDamageDone: 0,\r\n    //             enemyDamageDone: 0,\r\n    //             playerAttacked: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.playerSpeed <= 0){\r\n    //         this.playerHasNoSpeed()\r\n    //     }\r\n\r\n    //     if(currentRoom === 2 & this.state.roomTwoStatus === 0){\r\n    //         this.createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Circle 20, 2, 3, 1, 1, 1\r\n    //         }\r\n        // if(currentRoom === 3 & this.state.roomThreeStatus === 0){\r\n        //     this.createEnemy(15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Square 15, 4, 5, 2, 2, 2\r\n        // }\r\n        // if(currentRoom === 4 & this.state.roomFourStatus === 0){\r\n        //     this.createEnemy(50, 50, 5, 7, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Boss Triangle\r\n        // }\r\n        // if(currentRoom === 5 & this.state.roomFiveStatus === 0){\r\n        //     this.createEnemy(15, 15, 10, 12, 2, 5, 25, 10, 10, 3, 5, 9, 4, 10, 0, 0, 0, 0, 0, 0, 0, 2) //Parallelogram 15, 10, 12, 2, 5, 25 - Trapezium 10, 3, 5, 9, 4, 10\r\n        // }\r\n        // if(currentRoom === 6 & this.state.roomSixStatus === 0){\r\n        //     this.createEnemy(20, 20, 2, 3, 7, 1, 1, 20, 20, 2, 3, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2) //Two Circles\r\n        // }\r\n        // if(currentRoom === 7 & this.state.roomSevenStatus === 0){\r\n        //     this.createEnemy(15, 15, 4, 5, 2, 2, 2, 15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2) // Two Squares\r\n        // }\r\n        // if(currentRoom === 8 & this.state.roomEightStatus === 0){\r\n        //     this.createEnemy(80, 80, 6, 8, 3, 4, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One BOSS pentagon\r\n        // }\r\n        // if(currentRoom === 9 & this.state.roomNineStatus === 0){\r\n        //     this.createEnemy(30, 30, 4, 5, 2, 2, 10, 15, 15, 10, 14, 2, 5, 25, 4, 4, 1, 5, 10, 10, 5, 3) //Semi-Circle - Parallelogram - Trapezium\r\n        // }\r\n        // if(currentRoom === 10 & this.state.roomTenStatus === 0){\r\n        //     this.createEnemy(100, 100, 4, 7, 2, 2, 20, 100, 100, 4, 7, 2, 2, 20, 0, 0, 0, 0, 0, 0, 0, 2) //Two Hexagons\r\n        // }\r\n        // if(currentRoom === 11 & this.state.roomElevenStatus === 0){\r\n        //     this.createEnemy(50, 50, 5, 8, 4, 3, 15, 50, 50, 5, 8, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 2)\r\n        // }\r\n        // if(currentRoom === 12 & this.state.roomTwelveStatus === 0){\r\n        //     this.createEnemy(500, 500, 15, 20, 8, 8, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)\r\n        // }\r\n    // }\r\n                                            // *TIMED COMBAT\r\n    function startCombat() {\r\n        setStartCombatCheck(true)\r\n        setRunPlayerAttackTimer(true)\r\n    }\r\n\r\n    function playerAttackRandomizer(playerAttackLow, playerAttackHigh) {\r\n        return Math.floor(Math.random() * (playerAttackHigh - playerAttackLow + 1) + playerAttackLow)\r\n    }\r\n\r\n    function currentEnemyAttackRandomizer(enemyAttackLow, enemyAttackHigh) {\r\n        return Math.floor(Math.random() * (enemyAttackHigh - enemyAttackLow + 1) + enemyAttackLow)\r\n    }\r\n\r\n\r\n    function showToastMessageRed(damageTaken) {\r\n        toast.error(`You took ${damageTaken} damage !`, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            autoClose: 1500\r\n        });\r\n    }\r\n\r\n    // playerHasNoSpeed = () => {\r\n    //     alert(\"You have no more speed! You took 10 damage. Return to Room One or use a stamina potion to regain your speed.\")\r\n    //     this.setState({\r\n    //         playerHealth: this.state.playerHealth - 10,\r\n    //         enemyRewardCheck: 0,\r\n    //         enemy2RewardCheck: 0,\r\n    //         enemy3RewardCheck: 0,\r\n    //     })\r\n    // }\r\n\r\n\r\n                                            // *BEGINNING OF ENEMY COMBAT ATTACK SEQUENCE\r\n    // *START ENEMY ONE TIMED ATTACK SEQUENCE\r\n    function enemyOneAttackTimer(){\r\n        console.log(\"Enemy ONE Attack Timer\")\r\n        if(enemyOne.enemySpeed > 0){\r\n            setEnemyOne(prevEnemyOne => {\r\n                return {...prevEnemyOne,\r\n                    enemySpeed: enemyOne.enemySpeed - 1\r\n                }\r\n            })\r\n        }\r\n        if(enemyOne.enemySpeed <= 0){\r\n            enemyOneCounterAttack()\r\n            setEnemyOne(prevEnemyOne => {\r\n                return {...prevEnemyOne,\r\n                    enemySpeed: enemyOne.enemyMaxSpeed\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    function enemyOneCounterAttack() {\r\n        var currentEnemyAttack = currentEnemyAttackRandomizer(enemyOne.enemyAttackLow, enemyOne.enemyAttackHigh) - player.playerArmor\r\n        if(currentEnemyAttack <= 0){\r\n            currentEnemyAttack = 1\r\n        }\r\n        playerTakeDamage(currentEnemyAttack)\r\n    }\r\n    // !END ENEMY ONE TIMED ATTACK SEQUENCE --- AFTER PLAYER TAKE DAMAGE\r\n\r\n    // *START ENEMY TWO TIMED ATTACK SEQUENCE\r\n    function enemyTwoAttackTimer(){\r\n        console.log(\"Enemy TWO Attack Timer\")\r\n        if(enemyTwo.enemy2Speed > 0){\r\n            setEnemyTwo(prevEnemyTwo => {\r\n                return {...prevEnemyTwo,\r\n                    enemy2Speed: enemyTwo.enemy2Speed - 1\r\n                }\r\n            })\r\n        }\r\n        if(enemyTwo.enemy2Speed <= 0){\r\n            enemyTwoCounterAttack()\r\n            setEnemyTwo(prevEnemyTwo => {\r\n                return {...prevEnemyTwo,\r\n                    enemy2Speed: enemyTwo.enemy2MaxSpeed\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    function enemyTwoCounterAttack() {\r\n        var currentEnemyAttack = currentEnemyAttackRandomizer(enemyTwo.enemy2AttackLow, enemyTwo.enemy2AttackHigh) - player.playerArmor\r\n        if(currentEnemyAttack <= 0){\r\n            currentEnemyAttack = 1\r\n        }\r\n        playerTakeDamage(currentEnemyAttack)\r\n    }\r\n    // !END ENEMY TWO TIMED ATTACK SEQUENCE --- AFTER PLAYER TAKE DAMAGE\r\n\r\n    // *START ENEMY THREE TIMED ATTACK SEQUENCE\r\n    function enemyThreeAttackTimer(){\r\n        console.log(\"Enemy THREE Attack Timer\")\r\n        if(enemyThree.enemy3Speed > 0){\r\n            setEnemyThree(prevEnemyThree => {\r\n                return {...prevEnemyThree,\r\n                    enemy3Speed: enemyThree.enemy3Speed - 1\r\n                }\r\n            })\r\n        }\r\n        if(enemyThree.enemy3Speed <= 0){\r\n            enemyThreeCounterAttack()\r\n            setEnemyThree(prevEnemyThree => {\r\n                return {...prevEnemyThree,\r\n                    enemy3Speed: enemyThree.enemy3MaxSpeed\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    function enemyThreeCounterAttack() {\r\n        var currentEnemyAttack = currentEnemyAttackRandomizer(enemyThree.enemy3AttackLow, enemyThree.enemy3AttackHigh) - player.playerArmor\r\n        if(currentEnemyAttack <= 0){\r\n            currentEnemyAttack = 1\r\n        }\r\n        playerTakeDamage(currentEnemyAttack)\r\n    }\r\n    // !END ENEMY THREE TIMED ATTACK SEQUENCE --- AFTER PLAYER TAKE DAMAGE\r\n\r\n\r\n    function playerTakeDamage(damageTaken) {\r\n        setPlayer(prevPlayer =>{\r\n            return {...prevPlayer,\r\n            playerHealth: player.playerHealth - damageTaken}\r\n        })\r\n        showToastMessageRed(damageTaken)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // *START PLAYER ATTACK TIMER\r\n    function playerAttackTimer(timer) {\r\n        var timeHolder = timer\r\n        if(timeHolder >= 0){\r\n            console.log(`THIS IS PLAYER ATTACK TIMER ${timeHolder}`)\r\n            playerAttackTimerSetState(timeHolder)\r\n        }\r\n    }\r\n\r\n    function playerAttackTimerSetState(timer){\r\n        var newTimeHolder = timer - 1\r\n        setTimeout(() => {setPlayerAttackTimerState(prevPlayerAttackTimerState => prevPlayerAttackTimerState -1); }, 1000);\r\n        setTimeout(() => {playerAttackTimer(newTimeHolder); }, 1000);\r\n    }\r\n    // !END PLAYER ATTACK TIMER\r\n\r\n\r\n\r\n    // *PLAYER ATTACK BUTTON STARTS HERE\r\n    function playerAttackMove(attackEnemy) {\r\n        var currentPlayerAttack = playerAttackRandomizer(player.playerAttackLow, player.playerAttackHigh)\r\n        if(attackEnemy === 1 & enemyOne.enemyHealth <= 0){\r\n            deadCheck(currentPlayerAttack, attackEnemy)\r\n            alert(\"You killed this enemy!\")\r\n        }\r\n        if(attackEnemy === 1 & enemyOne.enemyHealth > 0){\r\n            currentPlayerAttack = currentPlayerAttack - enemyOne.enemyArmor\r\n            if(currentPlayerAttack <= 0){\r\n                currentPlayerAttack = 1\r\n            }\r\n            playerAttackMoveSetState(1, currentPlayerAttack)\r\n            deadCheck(currentPlayerAttack, attackEnemy)\r\n        }\r\n\r\n        if(attackEnemy === 2 & enemyTwo.enemy2Health <= 0){\r\n            deadCheck(currentPlayerAttack, attackEnemy)\r\n            alert(\"You killed enemy 2!\")\r\n        }\r\n        if(attackEnemy === 2 & enemyTwo.enemy2Health > 0){\r\n            currentPlayerAttack = currentPlayerAttack - enemyTwo.enemy2Armor\r\n            if(currentPlayerAttack <= 0){\r\n                currentPlayerAttack = 1\r\n            }\r\n            playerAttackMoveSetState(2, currentPlayerAttack)\r\n            deadCheck(currentPlayerAttack, attackEnemy)\r\n        }\r\n        if(attackEnemy === 3 & enemyThree.enemy3Health <= 0){\r\n            deadCheck(currentPlayerAttack, attackEnemy)\r\n            alert(\"You killed enemy 3!\")\r\n        }\r\n        if(attackEnemy === 3 & enemyThree.enemy3Health > 0){\r\n            currentPlayerAttack = currentPlayerAttack - enemyThree.enemy3Armor\r\n            if(currentPlayerAttack <= 0){\r\n                currentPlayerAttack = 1\r\n            }\r\n            playerAttackMoveSetState(3, currentPlayerAttack)\r\n            deadCheck(currentPlayerAttack, attackEnemy)\r\n        }\r\n    }\r\n\r\n    function playerAttackMoveSetState(attackEnemyNumber, currentPlayerAttack) {\r\n        if(attackEnemyNumber === 1){\r\n            setPlayer(prevPlayer => {\r\n                return {...prevPlayer,\r\n                playerDamageDone: currentPlayerAttack\r\n                }\r\n            })\r\n            setEnemyOne(prevEnemyOne => {\r\n                return{...prevEnemyOne,\r\n                enemyHealth: enemyOne.enemyHealth - currentPlayerAttack\r\n                }\r\n            })\r\n            setPlayerAttacked(1)\r\n            showToastMessage(currentPlayerAttack, attackEnemyNumber)\r\n        }\r\n        if(attackEnemyNumber === 2){\r\n            setPlayer(prevPlayer => {\r\n                return {...prevPlayer,\r\n                playerDamageDone: currentPlayerAttack\r\n                }\r\n            })\r\n            setEnemyTwo(prevEnemyTwo => {\r\n                return{...prevEnemyTwo,\r\n                enemy2Health: enemyTwo.enemy2Health - currentPlayerAttack\r\n                }\r\n            })\r\n            setPlayerAttacked(1)\r\n            showToastMessage(currentPlayerAttack, attackEnemyNumber)\r\n        }\r\n        if(attackEnemyNumber === 3){\r\n            setPlayer(prevPlayer => {\r\n                return {...prevPlayer,\r\n                playerDamageDone: currentPlayerAttack\r\n                }\r\n            })\r\n            setEnemyThree(prevEnemyThree => {\r\n                return{...prevEnemyThree,\r\n                enemy3Health: enemyThree.enemy3Health - currentPlayerAttack\r\n                }\r\n            })\r\n            setPlayerAttacked(1)\r\n            showToastMessage(currentPlayerAttack, attackEnemyNumber)\r\n        }\r\n    }\r\n\r\n    function deadCheck(currentPlayerAttack, attackEnemy) {\r\n        if(enemyOne.enemyHealth - currentPlayerAttack <= 0 & enemyOne.enemyRewardCheck === 0 & attackEnemy === 1){\r\n            deadCheckSetState(1)\r\n        }\r\n        if(enemyTwo.enemy2Health - currentPlayerAttack <= 0 & enemyTwo.enemy2RewardCheck === 0 & attackEnemy === 2){\r\n            deadCheckSetState(2)\r\n        }\r\n        if(enemyThree.enemy3Health - currentPlayerAttack <= 0 & enemyThree.enemy3RewardCheck === 0 & attackEnemy === 3){\r\n            deadCheckSetState(3)\r\n        }\r\n        setRunPlayerAttackTimer(true)\r\n    }\r\n\r\n    function deadCheckSetState(enemyNumber) {\r\n        if(enemyNumber === 1){\r\n            setEnemyOne(prevEnemyOne => {\r\n                return {...prevEnemyOne,\r\n                enemyHealth: 0,\r\n                enemyRewardCheck: 1\r\n                }\r\n            })\r\n            console.log(\"SET ENEMY ONE KILLED --------------------------------------------------------\")\r\n            setPlayer(prevPlayer => {\r\n                return {...prevPlayer,\r\n                playerCoins: player.playerCoins + enemyOne.enemyReward\r\n                }\r\n            })\r\n        }\r\n        if(enemyNumber === 2){\r\n            setEnemyTwo(prevEnemyTwo => {\r\n                return {...prevEnemyTwo,\r\n                enemy2Health: 0,\r\n                enemy2RewardCheck: 1\r\n                }\r\n            })\r\n            console.log(\"SET ENEMY TWO KILLED --------------------------------------------------------\")\r\n            setPlayer(prevPlayer => {\r\n                return {...prevPlayer,\r\n                playerCoins: player.playerCoins + enemyTwo.enemy2Reward\r\n                }\r\n            })\r\n        }\r\n        if(enemyNumber === 3){\r\n            setEnemyThree(prevEnemyThree => {\r\n                return {...prevEnemyThree,\r\n                enemy3Health: 0,\r\n                enemy3RewardCheck: 1\r\n                }\r\n            })\r\n            console.log(\"SET ENEMY THREE KILLED --------------------------------------------------------\")\r\n            setPlayer(prevPlayer => {\r\n                return {...prevPlayer,\r\n                playerCoins: player.playerCoins + enemyTwo.enemy3Reward\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function setCurrentRoomStatusClearEnemy() {\r\n        if(currentRoom === 2){\r\n            setRoomTwoStatus(1)\r\n        }\r\n        // if(this.state.currentRoom === 3){\r\n        //     this.setState({\r\n        //         roomThreeStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 4){\r\n        //     this.setState({\r\n        //         roomFourStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 5){\r\n        //     this.setState({\r\n        //         roomFiveStatus: 1,\r\n        //     })\r\n        // }\r\n        if(currentRoom === 6){\r\n            setRoomSixStatus(1)\r\n        }\r\n        // if(this.state.currentRoom === 7){\r\n        //     this.setState({\r\n        //         roomSevenStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 8){\r\n        //     this.setState({\r\n        //         roomEightStatus: 1,\r\n        //     })\r\n        // }\r\n        if(currentRoom === 9){\r\n            setRoomNineStatus(1)\r\n        }\r\n        // if(this.state.currentRoom === 10){\r\n        //     this.setState({\r\n        //         roomTenStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 11){\r\n        //     this.setState({\r\n        //         roomElevenStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 12){\r\n        //     this.setState({\r\n        //         roomTwelveStatus: 1,\r\n        //     })\r\n        // }\r\n    }\r\n\r\n    //                                         // !END OF ATTACK SEQUENCE\r\n\r\n    //                                         // *BEGINNING OF DODGE SEQUENCE\r\n\r\n    // playerDodgeMove = () => {\r\n    //     var playerSpeedThisDodgeAttack = Math.floor(Math.random() * (100 - this.state.playerSpeed + 1) + this.state.playerSpeed)\r\n    //     var enemySpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemySpeed + 1) + this.state.enemySpeed)\r\n    //     var enemy2SpeedThisRound = 0\r\n    //     var enemy3SpeedThisRound = 0\r\n    //     var playerDamageTaken = 0\r\n    //     if(this.state.playerSpeed > 0){\r\n    //         if(this.state.enemy2Speed > 0){\r\n    //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy2Speed + 1) + this.state.enemy2Speed)\r\n    //         }\r\n    //         if(this.state.enemy3Speed > 0){\r\n    //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy3Speed + 1) + this.state.enemy3Speed)\r\n    //         }\r\n    //         console.log(playerSpeedThisDodgeAttack)\r\n    //         console.log(enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound)\r\n\r\n    //         if(playerSpeedThisDodgeAttack > enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\r\n    //             console.log(\"Successful Dodge\")\r\n    //             this.enemyWithMostHealth()\r\n    //             }\r\n    //         if(playerSpeedThisDodgeAttack <= enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\r\n    //             console.log(\"Player Missed Dodge\")\r\n    //             this.playerMissedDodge()\r\n    //             }\r\n    //         }\r\n    //     if(this.state.playerSpeed <= 0){\r\n    //         alert(\"You have no speed to dodge!\")\r\n    //     }\r\n    // }\r\n\r\n    //     // player attacks enemy with highest health with full attack power if the ransomizer is greater than the enemies; speed \r\n\r\n    // enemyWithMostHealth = () => {\r\n    //     var highEnemyHealth = Math.max(this.state.enemyHealth, this.state.enemy2Health, this.state.enemy3Health)\r\n    //     if(highEnemyHealth === this.state.enemyHealth){\r\n    //         this.setState({\r\n    //             enemyHealth: this.state.enemyHealth - (this.state.playerAttackHigh - this.state.enemyArmor),\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\r\n    //             })\r\n    //             return\r\n    //     }\r\n    //     if(highEnemyHealth === this.state.enemy2Health){\r\n    //         this.setState({\r\n    //             enemy2Health: this.state.enemy2Health - (this.state.playerAttackHigh - this.state.enemy2Armor),\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\r\n    //             })\r\n    //             return\r\n    //     }\r\n    //     if(highEnemyHealth === this.state.enemy3Health){\r\n    //         this.setState({\r\n    //             enemy3Health: this.state.enemy3Health - (this.state.playerAttackHigh - this.state.enemy3Armor),\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\r\n    //             })\r\n    //             return\r\n    //     }\r\n    // }\r\n\r\n    // playerMissedDodge = () => {\r\n    //     var currentEnemyAttack = this.currentEnemyAttackRandomizer(this.state.enemyAttackLow, this.state.enemyAttackHigh)\r\n    //     var currentEnemy2Attack = this.currentEnemyAttackRandomizer(this.state.enemy2AttackLow, this.state.enemy2AttackHigh)\r\n    //     var currentEnemy3Attack = this.currentEnemyAttackRandomizer(this.state.enemy3AttackLow, this.state.enemy3AttackHigh)\r\n    //     var playerDamage = currentEnemyAttack + currentEnemy2Attack + currentEnemy3Attack\r\n    //     this.setState({\r\n    //         playerHealth: this.state.playerHealth - playerDamage,\r\n    //         playerSpeed: this.state.playerSpeed - 1,\r\n    //         enemyDamageDone: playerDamage,\r\n    //         })\r\n    // }\r\n\r\n    //                                         // !END DODGE SEQUENCE\r\n\r\n    // typeOfEnemyAttack = () => {\r\n\r\n    // }\r\n\r\n    // openChest = () => {\r\n    //     if(this.state.currentRoom === 4){\r\n    //         this.setState({\r\n    //             healthPotionEffect: this.state.healthPotionEffect + 15,\r\n    //             roomFourStatus: 2,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 8){\r\n    //         this.setState({\r\n    //             healthPotionEffect: this.state.healthPotionEffect + 15,\r\n    //             roomEightStatus: 2,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 12){\r\n    //         this.setState({\r\n    //             healthPotionEffect: this.state.healthPotionEffect + 15,\r\n    //             roomTwelveStatus: 2,\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    //                                         // *ON-SCREEN PROMPTS\r\n\r\n    function showToastMessage(currentPlayerAttack, attackEnemyNumber) {\r\n        if(attackEnemyNumber === 1){\r\n            toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 1 !\", {\r\n                position: toast.POSITION.TOP_CENTER\r\n            });\r\n        }\r\n        if(attackEnemyNumber === 2){\r\n            toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 2 !\", {\r\n                position: toast.POSITION.TOP_CENTER\r\n            });\r\n        }\r\n        if(attackEnemyNumber === 3){\r\n            toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 3 !\", {\r\n                position: toast.POSITION.TOP_CENTER\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n                                            // *GAME TIMER/BREAKLOOP TIMER\r\n\r\n    function gameTime() {\r\n        setBreakLoop(prevBreakLoop => prevBreakLoop + 1)\r\n        setGameTick(prevGameTick => prevGameTick + 1)\r\n        setRunEnemyOneAttackTimer(true)\r\n        setRunEnemyTwoAttackTimer(true)\r\n        setRunEnemyThreeAttackTimer(true)\r\n        if(breakLoop < 300){\r\n            setTimeout(() => {gameTime(); }, 1000);\r\n        }\r\n        console.log(`gameTime() ran. gameTick is at ${gameTick}`)\r\n    }\r\n\r\n\r\n                                            //  !END GAME TIMER\r\n\r\n    //                                         //  *ROOM TIMER\r\n    // roomTime = () => {\r\n    //     this.roomTimeSetState()\r\n    //     if(this.state.roomBreakLoop < 300){\r\n    //         setTimeout(() => {this.roomTime(); }, 1000);\r\n    //     }\r\n    //     console.log(`gameRoomTime() is running. roomTime is at ${this.state.roomTime}`)\r\n    // }\r\n\r\n    // roomTimeSetState = () => {\r\n    //     this.setState({\r\n    //         roomTime: this.state.roomTime + 1,\r\n    //         roomBreakLoop: this.state.roomBreakLoop + 1,\r\n    //     })\r\n    // }\r\n\r\n                                            // !END ROOM TIMER\r\n    // render() {\r\n        return(\r\n            <BrowserRouter>\r\n            <Navbar resetRoomStatus={resetRoomStatus} gameTick={gameTick} devButtonUpgrade={devButtonUpgrade} devButtonDowngrade={devButtonDowngrade} player={player} />\r\n            <ToastContainer />\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Home player={player} enemyOne={enemyOne} pickClass={pickClass} />} />\r\n\r\n                    <Route path=\"/GameBoard\" element={<GameBoard useHealthPotion={useHealthPotion} buyFromStore={buyFromStore} roomMovement={roomMovement} createEnemy={createEnemy} />} />\r\n\r\n                    <Route path=\"/RoomTwo\" element={<RoomTwo resetRoomStatus={resetRoomStatus} roomMovement={roomMovement} enemyOne={enemyOne} roomTwoStatus={roomTwoStatus} currentRoom={currentRoom}  numberOfEnemiesInRoom={numberOfEnemiesInRoom} startCombatCheck={startCombatCheck} startCombat={startCombat} playerAttacked={playerAttacked} playerAttackTimerState={playerAttackTimerState} playerAttackTimerStateMax={playerAttackTimerStateMax} playerAttackMove={playerAttackMove} />} />\r\n\r\n                    {/* <Route path=\"/RoomTwo\" element={<RoomTwo rechargeAttackMove={this.rechargeAttackMove} playerAttacked={this.state.playerAttacked} playerAttackMove={this.playerAttackMove} playerAttackTimerState={this.state.playerAttackTimerState} playerAttackTimerStateMax={this.state.playerAttackTimerStateMax} startCombat={this.startCombat} startCombatCheck={this.state.startCombatCheck} currentRoom={this.state.currentRoom} roomMovement={this.roomMovement} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyMaxHealth={this.state.enemyMaxHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed}  enemyMaxSpeed={this.state.enemyMaxSpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} roomTwoStatus={this.state.roomTwoStatus} resetRoomStatus={this.resetRoomStatus} />} /> */}\r\n\r\n                    {/* <Route path=\"/RoomThree\" element={<RoomThree roomMovement={this.roomMovement} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} roomThreeStatus ={this.state.roomThreeStatus} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} />} /> */}\r\n\r\n                    {/* <Route path=\"/RoomFour\" element={<RoomFour openChest={this.openChest} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomFourStatus={this.state.roomFourStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} />} /> */}\r\n\r\n                    {/* <Route path=\"/RoomFive\" element={<RoomFive resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomFiveStatus={this.state.roomFiveStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward} />} /> */}\r\n\r\n                    <Route path=\"/RoomSix\" element={<RoomSix roomMovement={roomMovement} enemyOne={enemyOne} enemyTwo={enemyTwo} roomSixStatus={roomSixStatus} currentRoom={currentRoom}  numberOfEnemiesInRoom={numberOfEnemiesInRoom} startCombatCheck={startCombatCheck} startCombat={startCombat} playerAttacked={playerAttacked} playerAttackTimerState={playerAttackTimerState} playerAttackTimerStateMax={playerAttackTimerStateMax} playerAttackMove={playerAttackMove} />} />\r\n\r\n                    {/* <Route path=\"/RoomSeven\" element={<RoomSeven resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomSevenStatus={this.state.roomSevenStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward}/>} /> */}\r\n\r\n                    {/* <Route path=\"/RoomEight\" element={<RoomEight openChest={this.openChest} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomEightStatus={this.state.roomEightStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} />} /> */}\r\n\r\n                    <Route path=\"/RoomNine\" element={<RoomNine roomMovement={roomMovement} enemyOne={enemyOne} enemyTwo={enemyTwo} enemyThree={enemyThree} roomNineStatus={roomNineStatus} currentRoom={currentRoom}  numberOfEnemiesInRoom={numberOfEnemiesInRoom} startCombatCheck={startCombatCheck} startCombat={startCombat} playerAttacked={playerAttacked} playerAttackTimerState={playerAttackTimerState} playerAttackTimerStateMax={playerAttackTimerStateMax} playerAttackMove={playerAttackMove} />} />\r\n\r\n                    {/* <Route path=\"/RoomTen\" element={<RoomTen resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomTenStatus={this.state.roomTenStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward}/>} /> */}\r\n\r\n                    {/* <Route path=\"/RoomEleven\" element={<RoomEleven resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomElevenStatus={this.state.roomElevenStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward}/>} /> */}\r\n\r\n                    {/* <Route path=\"/RoomTwelve\" element={<RoomTwelve openChest={this.openChest} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomTwelveStatus={this.state.roomTwelveStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward}/>} /> */}\r\n                </Routes>\r\n            </BrowserRouter>\r\n        )\r\n}\r\n\r\nexport default App;\r\n\r\n// playerMaxSpeed={playerMaxSpeed} playerMaxHealth={playerMaxHealth} playerHealth={playerHealth} playerAttackLow={playerAttackLow} playerAttackHigh={playerAttackHigh} playerSpeed={playerSpeed} playerArmor={playerArmor} playerCoins={playerCoins} playerHealthPotion={playerHealthPotion} playerStaminaPotion={playerStaminaPotion}\r\n\r\n// enemyHealth={enemyHealth} enemyMaxHealth={enemyMaxHealth} enemyAttackLow={enemyAttackLow} enemyAttackHigh={enemyAttackHigh} enemySpeed={enemySpeed} enemyMaxSpeed={enemyMaxSpeed} enemyArmor={enemyArmor} enemyReward={enemyReward}\r\n"],"mappings":"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E,CADP;UAEPO,iBAAiB,EAAE;QAFZ,CAAP;MAIH,CALY,CAAb;MAMA+D,OAAO,CAACC,GAAR,CAAY,iFAAZ;MACAvH,SAAS,CAACgG,UAAU,IAAI;QACpB,OAAO,EAAC,GAAGA,UAAJ;UACPxF,WAAW,EAAET,MAAM,CAACS,WAAP,GAAqB0B,QAAQ,CAACoB;QADpC,CAAP;MAGH,CAJQ,CAAT;IAKH;EACJ;;EAID,SAASwC,8BAAT,GAA0C;IACtC,IAAGpC,WAAW,KAAK,CAAnB,EAAqB;MACjBK,gBAAgB,CAAC,CAAD,CAAhB;IACH,CAHqC,CAItC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IACA,IAAGL,WAAW,KAAK,CAAnB,EAAqB;MACjBa,gBAAgB,CAAC,CAAD,CAAhB;IACH,CArBqC,CAsBtC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IACA,IAAGb,WAAW,KAAK,CAAnB,EAAqB;MACjBmB,iBAAiB,CAAC,CAAD,CAAjB;IACH,CAlCqC,CAmCtC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACH,CAnzBU,CAqzBX;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;;EAEA,SAAS4F,gBAAT,CAA0BJ,mB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"},"metadata":{},"sourceType":"module"}