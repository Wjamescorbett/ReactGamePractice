{"ast":null,"code":"import contains from 'dom-helpers/contains';\nimport listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport warning from 'warning';\nconst escapeKeyCode = 27;\n\nconst noop = () => {};\n\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nconst getRefTarget = ref => ref && ('current' in ref ? ref.current : ref);\n/**\n * The `useRootClose` hook registers your callback on the document\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\n * style behavior where your callback is triggered when the user tries to\n * interact with the rest of the document or hits the `esc` key.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onRootClose\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\n\n\nfunction useRootClose(ref, onRootClose) {\n  let {\n    disabled,\n    clickTrigger = 'click'\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const preventMouseRootCloseRef = useRef(false);\n  const onClose = onRootClose || noop;\n  const handleMouseCapture = useCallback(e => {\n    const currentTarget = getRefTarget(ref);\n    warning(!!currentTarget, 'RootClose captured a close event but does not have a ref to compare it to. ' + 'useRootClose(), should be passed a ref that resolves to a DOM node');\n    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);\n  }, [ref]);\n  const handleMouse = useEventCallback(e => {\n    if (!preventMouseRootCloseRef.current) {\n      onClose(e);\n    }\n  });\n  const handleKeyUp = useEventCallback(e => {\n    if (e.keyCode === escapeKeyCode) {\n      onClose(e);\n    }\n  });\n  useEffect(() => {\n    if (disabled || ref == null) return undefined; // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    let currentEvent = window.event;\n    const doc = ownerDocument(getRefTarget(ref)); // Use capture for this listener so it fires before React's listener, to\n    // avoid false positives in the contains() check below if the target DOM\n    // element is removed in the React mouse callback.\n\n    const removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);\n    const removeMouseListener = listen(doc, clickTrigger, e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      handleMouse(e);\n    });\n    const removeKeyupListener = listen(doc, 'keyup', e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      handleKeyUp(e);\n    });\n    let mobileSafariHackListeners = [];\n\n    if ('ontouchstart' in doc.documentElement) {\n      mobileSafariHackListeners = [].slice.call(doc.body.children).map(el => listen(el, 'mousemove', noop));\n    }\n\n    return () => {\n      removeMouseCaptureListener();\n      removeMouseListener();\n      removeKeyupListener();\n      mobileSafariHackListeners.forEach(remove => remove());\n    };\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);\n}\n\nexport default useRootClose;","map":{"version":3,"names":["contains","listen","ownerDocument","useCallback","useEffect","useRef","useEventCallback","warning","escapeKeyCode","noop","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","getRefTarget","ref","current","useRootClose","onRootClose","disabled","clickTrigger","preventMouseRootCloseRef","onClose","handleMouseCapture","e","currentTarget","target","handleMouse","handleKeyUp","keyCode","undefined","currentEvent","window","doc","removeMouseCaptureListener","removeMouseListener","removeKeyupListener","mobileSafariHackListeners","documentElement","slice","call","body","children","map","el","forEach","remove"],"sources":["C:/Users/freeb/OneDrive/Desktop/Game_Project/Game_Project_Frontend/GameFrontEnd/node_modules/@restart/ui/esm/useRootClose.js"],"sourcesContent":["import contains from 'dom-helpers/contains';\nimport listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useCallback, useEffect, useRef } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport warning from 'warning';\nconst escapeKeyCode = 27;\n\nconst noop = () => {};\n\nfunction isLeftClickEvent(event) {\n  return event.button === 0;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nconst getRefTarget = ref => ref && ('current' in ref ? ref.current : ref);\n\n/**\n * The `useRootClose` hook registers your callback on the document\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\n * style behavior where your callback is triggered when the user tries to\n * interact with the rest of the document or hits the `esc` key.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onRootClose\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\nfunction useRootClose(ref, onRootClose, {\n  disabled,\n  clickTrigger = 'click'\n} = {}) {\n  const preventMouseRootCloseRef = useRef(false);\n  const onClose = onRootClose || noop;\n  const handleMouseCapture = useCallback(e => {\n    const currentTarget = getRefTarget(ref);\n    warning(!!currentTarget, 'RootClose captured a close event but does not have a ref to compare it to. ' + 'useRootClose(), should be passed a ref that resolves to a DOM node');\n    preventMouseRootCloseRef.current = !currentTarget || isModifiedEvent(e) || !isLeftClickEvent(e) || !!contains(currentTarget, e.target);\n  }, [ref]);\n  const handleMouse = useEventCallback(e => {\n    if (!preventMouseRootCloseRef.current) {\n      onClose(e);\n    }\n  });\n  const handleKeyUp = useEventCallback(e => {\n    if (e.keyCode === escapeKeyCode) {\n      onClose(e);\n    }\n  });\n  useEffect(() => {\n    if (disabled || ref == null) return undefined; // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    let currentEvent = window.event;\n    const doc = ownerDocument(getRefTarget(ref)); // Use capture for this listener so it fires before React's listener, to\n    // avoid false positives in the contains() check below if the target DOM\n    // element is removed in the React mouse callback.\n\n    const removeMouseCaptureListener = listen(doc, clickTrigger, handleMouseCapture, true);\n    const removeMouseListener = listen(doc, clickTrigger, e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      handleMouse(e);\n    });\n    const removeKeyupListener = listen(doc, 'keyup', e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      handleKeyUp(e);\n    });\n    let mobileSafariHackListeners = [];\n\n    if ('ontouchstart' in doc.documentElement) {\n      mobileSafariHackListeners = [].slice.call(doc.body.children).map(el => listen(el, 'mousemove', noop));\n    }\n\n    return () => {\n      removeMouseCaptureListener();\n      removeMouseListener();\n      removeKeyupListener();\n      mobileSafariHackListeners.forEach(remove => remove());\n    };\n  }, [ref, disabled, clickTrigger, handleMouseCapture, handleMouse, handleKeyUp]);\n}\n\nexport default useRootClose;"],"mappings":"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"},"metadata":{},"sourceType":"module"}