{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\freeb\\\\OneDrive\\\\Desktop\\\\Game_Project\\\\Game_Project_Frontend\\\\GameFrontEnd\\\\src\\\\components\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport Home from './Home/Home';\nimport Navbar from './Navbar/Navbar';\nimport Layout from './Layout/Layout';\nimport GameBoard from './GameBoard/GameBoard';\nimport RoomTwo from './RoomTwo/RoomTwo';\nimport RoomThree from './RoomThree/RoomThree';\nimport RoomFour from './RoomFour/RoomFour';\nimport RoomFive from './RoomFive/RoomFive';\nimport RoomSix from './RoomSix/RoomSix';\nimport RoomSeven from './RoomSeven/RoomSeven';\nimport RoomEight from './RoomEight/RoomEight';\nimport RoomNine from './RoomNine/RoomNine';\nimport RoomTen from './RoomTen/RoomTen';\nimport RoomEleven from './RoomEleven/RoomEleven';\nimport RoomTwelve from './RoomTwelve/RoomTwelve';\nimport DamageEffects from './DamageEffects/DamageEffects';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [gameTick, setGameTick] = useState(0);\n  const [breakLoop, setBreakLoop] = useState(0);\n  const [player, setPlayer] = useState({\n    playerHealth: 0,\n    playerMaxHealth: 0,\n    playerAttackLow: 0,\n    playerAttackHigh: 0,\n    playerSpeed: 0,\n    playerMaxSpeed: 0,\n    playerArmor: 0,\n    playerCoins: 0,\n    playerHealthPotion: 0,\n    playerStaminaPotion: 0,\n    playerDamageDone: 0\n  });\n  const [playerAttackTimerState, setPlayerAttackTimerState] = useState(0);\n  const [playerAttackTimerStateMax, setPlayerAttackTimerStateMax] = useState(0);\n  const [playerAttacked, setPlayerAttacked] = useState(1);\n  const [attackTimerRun, setAttackTimerRun] = useState(true);\n  const [startCombatCheck, setStartCombatCheck] = useState(false);\n  const [enemyOne, setEnemyOne] = useState({\n    enemyMaxHealth: 0,\n    enemyHealth: 0,\n    enemyAttackLow: 0,\n    enemyAttackHigh: 0,\n    enemySpeed: 0,\n    enemyMaxSpeed: 0,\n    enemyArmor: 0,\n    enemyReward: 0,\n    enemyRewardCheck: 0\n  });\n  const [enemyTwo, setEnemyTwo] = useState({\n    enemy2MaxHealth: 0,\n    enemy2Health: 0,\n    enemy2AttackLow: 0,\n    enemy2AttackHigh: 0,\n    enemy2Speed: 0,\n    enemy2MaxSpeed: 0,\n    enemy2Armor: 0,\n    enemy2Reward: 0,\n    enemy2RewardCheck: 0\n  });\n  const [enemyThree, setEnemyThree] = useState({\n    enemy3MaxHealth: 0,\n    enemy3Health: 0,\n    enemy3AttackLow: 0,\n    enemy3AttackHigh: 0,\n    enemy3Speed: 0,\n    enemy3MaxSpeed: 0,\n    enemy3Armor: 0,\n    enemy3Reward: 0,\n    enemy3RewardCheck: 0\n  });\n  const [numberOfEnemiesInRoom, setNumberOfEnemiesInRoom] = useState(0); // const [enemyDamageDone, setEnemyDamageDone] = useState(0)\n\n  const [currentRoom, setCurrentRoom] = useState(0);\n  const [currentRoomStatus, setCurrentRoomStatus] = useState(0);\n  const [roomTwoStatus, setRoomTwoStatus] = useState(0);\n  const [roomSixStatus, setRoomSixStatus] = useState(0); // class App extends Component {\n  //     constructor(props) {\n  //         super(props);\n  //         this.state = {\n  //             roomTime: 0,\n  //             roomBreakLoop: 0,\n  //             breakLoop: 0,\n  //             gameTick: -1,\n  //             playerHealth: 0,\n  //             maxPlayerHealth: 0,\n  //             playerAttackLow: 0,\n  //             playerAttackHigh: 0,\n  //             playerSpeed: -1,\n  //             maxPlayerSpeed: 0,\n  //             playerArmor: 0,\n  //             playerCoins: 0,\n  //             playerHealthPotion: 0,\n  //             playerStaminaPotion: 0,\n  //             healthPotionEffect: 25,\n  //             playerDamageDone: 0,\n  //             playerAttackTimerState: 5,\n  //             playerAttackTimerStateMax: 5,\n  //             enemyDamageDone: 0,\n  //             enemyAlive: 0,\n  //             enemyMaxHealth: 0,\n  //             enemyHealth: 0,\n  //             enemyAttackLow: 0,\n  //             enemyAttackHigh: 0,\n  //             enemySpeed: 0,\n  //             enemyMaxSpeed: 0,\n  //             enemyArmor: 0,\n  //             enemyReward: 0,\n  //             enemyRewardCheck: 0,\n  //             enemy2MaxHealth: 0,\n  //             enemy2Health: 0,\n  //             enemy2AttackLow: 0,\n  //             enemy2AttackHigh: 0,\n  //             enemy2Speed: 0,\n  //             enemy2Armor: 0,\n  //             enemy2Reward: 0,\n  //             enemy2RewardCheck: 0,\n  //             enemy3MaxHealth: 0,\n  //             enemy3Health: 0,\n  //             enemy3AttackLow: 0,\n  //             enemy3AttackHigh: 0,\n  //             enemy3Speed: 0,\n  //             enemy3Armor: 0,\n  //             enemy3Reward: 0,\n  //             enemy3RewardCheck: 0,\n  //             numberOfEnemiesInRoom: 0,\n  //             roomTwoStatus: 0,\n  //             roomThreeStatus: 0,\n  //             roomFourStatus: 0,\n  //             roomFiveStatus: 0,\n  //             roomSixStatus: 0,\n  //             roomSevenStatus: 0,\n  //             roomEightStatus: 0,\n  //             roomNineStatus: 0,\n  //             roomTenStatus: 0,\n  //             roomElevenStatus: 0,\n  //             roomTwelveStatus:0,\n  //             currentRoom: 0,\n  //             currentRoomStatus: 0,\n  //             startCombatCheck: false,\n  //             playerAttacked: 1,\n  //         }\n  //     }\n\n  useEffect(() => {\n    if (enemyOne.enemySpeed < 0) {\n      setEnemyOne(prevEnemyOne => {\n        return { ...prevEnemyOne,\n          enemySpeed: enemyOne.enemyMaxSpeed\n        };\n      });\n\n      if (enemyOne.health > 0) {\n        var currentPlayerAttack = playerAttackRandomizer(player.playerAttackLow, player.playerAttackHigh);\n        enemyCounterAttack(currentPlayerAttack);\n      }\n    }\n\n    if (playerAttackTimerState < 0) {\n      setPlayerAttackTimerState(playerAttackTimerStateMax);\n      setPlayerAttacked(2);\n      setAttackTimerRun(false);\n    }\n  });\n\n  function devButton() {\n    setPlayer(prevPlayer => {\n      return { ...prevPlayer,\n        playerHealth: player.playerMaxHealth,\n        playerAttackHigh: player.playerAttackHigh + 5,\n        playerCoins: player.playerCoins + 100\n      };\n    }); // setPlayerHealth(playerMaxHealth)\n    // setPlayerAttackHigh(prevPlayerAttackHigh => prevPlayerAttackHigh + 5)\n    // setPlayerCoins(playerCoins + 100)\n  } // useHealthPotion = () => {\n  //     if(this.state.playerHealthPotion <= 0){\n  //         return(alert(\"You are out of health potions!\"))\n  //     }\n  //     if(this.state.playerHealth + this.state.healthPotionEffect > this.state.maxPlayerHealth){\n  //         this.setState({\n  //             playerHealthPotion: this.state.playerHealthPotion - 1,\n  //             playerHealth: this.state.maxPlayerHealth,\n  //         })\n  //     } else {\n  //         this.setState({\n  //             playerHealthPotion: this.state.playerHealthPotion - 1,\n  //             playerHealth: this.state.playerHealth + this.state.healthPotionEffect,\n  //         })\n  //     }\n  // }\n  // useStaminaPotion = () => {\n  //     if(this.state.playerStaminaPotion <= 0){\n  //         return(alert(\"You are out of stamina potions!\"))\n  //     }\n  //     if(this.state.playerSpeed === this.state.maxPlayerSpeed){\n  //         return(alert(\"You're already at max speed!\"))\n  //     } else {\n  //         this.setState({\n  //             playerStaminaPotion: this.state.playerStaminaPotion - 1,\n  //             playerSpeed: this.state.maxPlayerSpeed,\n  //         })\n  //     }\n  // }\n\n\n  function buyFromStore(item) {\n    if (item === \"health\") {\n      if (player.playerCoins >= 5) {\n        setPlayer(prevPlayer => {\n          return { ...prevPlayer,\n            playerCoins: player.playerCoins - 5,\n            playerHealth: player.playerHealth + 10\n          };\n        }); // setPlayerCoins(prevPlayerCoins => prevPlayerCoins - 5)\n        // setPlayerMaxHealth(prevPlayerMaxHealth => prevPlayerMaxHealth + 10)\n      } else {\n        alert(\"You can't afford a health upgrade.\");\n      }\n    } // if(item === \"attackLow\"){\n    //     if(this.state.playerCoins >= 6 & this.state.playerAttackLow < this.state.playerAttackHigh){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 6,\n    //             playerAttackLow: this.state.playerAttackLow + 1,\n    //         })\n    //     } \n    //     if(this.state.playerAttackLow >= this.state.playerAttackHigh){\n    //         alert(\"Your minimum attack can not exceed you maximum attack.\")\n    //     }\n    //     if(this.state.playerCoins < 6){\n    //         alert(\"You can't afford a minimum attack upgrade.\")\n    //     }\n    // }\n    // if(item === \"attackHigh\"){\n    //     if(this.state.playerCoins >= 3){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 3,\n    //             playerAttackHigh: this.state.playerAttackHigh + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a maximum attack upgrade.\")\n    //     }\n    // }\n    // if(item === \"speed\"){\n    //     if(this.state.playerCoins >= 2){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 2,\n    //             maxPlayerSpeed: this.state.maxPlayerSpeed + 1,\n    //             playerSpeed: this.state.playerSpeed + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a speed upgrade.\")\n    //     }\n    // }\n    // if(item === \"armor\"){\n    //     if(this.state.playerCoins >= 3){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 3,\n    //             playerArmor: this.state.playerArmor + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford an armor upgrade.\")\n    //     }\n    // }\n    // if(item === \"healthPotion\"){\n    //     if(this.state.playerHealthPotion >= 10){\n    //         return (alert (\"You can only have up to ten health potions.\"))\n    //     }\n    //     if(this.state.playerCoins >= 2){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 2,\n    //             playerHealthPotion: this.state.playerHealthPotion + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a health potion.\")\n    //     }\n    // }\n    // if(item === \"staminaPotion\"){\n    //     if(this.state.playerStaminaPotion >= 8){\n    //         return (alert(\"You can only have up to eight stamina potions.\"))\n    //     }\n    //     if(this.state.playerCoins >= 1){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 1,\n    //             playerStaminaPotion: this.state.playerStaminaPotion + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a stamina potion.\")\n    //     }\n    // }\n\n  } // resetRoomStatus = () => {\n  //     this.setState({\n  //         roomTwoStatus: 0,\n  //         roomThreeStatus: 0,\n  //         roomFiveStatus: 0,\n  //         roomSixStatus: 0,\n  //         roomSevenStatus: 0,\n  //         roomNineStatus: 0,\n  //         roomTenStatus: 0,\n  //         roomElevenStatus: 0,\n  //         enemyRewardCheck: 0,\n  //         enemy2RewardCheck: 0,\n  //         enemy3RewardCheck: 0,\n  //         startCombatCheck: false,\n  //         playerAttacked: 1,\n  //         playerSpeed: this.state.maxPlayerSpeed,\n  //     })\n  // }\n\n\n  function pickClass(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion, attackTimer) {\n    console.log(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion, attackTimer);\n    setPlayer(prevPlayer => {\n      return { ...prevPlayer,\n        playerHealth: health,\n        playerMaxHealth: maxHealth,\n        playerAttackLow: attackLow,\n        playerAttackHigh: attackHigh,\n        playerSpeed: speed,\n        playerMaxSpeed: maxSpeed,\n        playerArmor: armor,\n        playerCoins: coins,\n        playerHealthPotion: healthPotion,\n        playerStaminaPotion: staminaPotion\n      };\n    });\n    setPlayerAttackTimerState(attackTimer);\n    setPlayerAttackTimerStateMax(attackTimer);\n    gameTime();\n  }\n\n  function createEnemy(maxHealth, health, attackLow, attackHigh, speed, armor, reward, maxHealth2, health2, attack2Low, attack2High, speed2, armor2, reward2, maxHealth3, health3, attack3Low, attack3High, speed3, armor3, reward3, numberOfEnemiesInRoom) {\n    setEnemyOne(prevEnemyOne => {\n      return { ...prevEnemyOne,\n        enemyMaxHealth: maxHealth,\n        enemyHealth: health,\n        enemyAttackLow: attackLow,\n        enemyAttackHigh: attackHigh,\n        enemySpeed: speed,\n        enemyMaxSpeed: speed,\n        enemyArmor: armor,\n        enemyReward: reward\n      };\n    });\n    setEnemyTwo(prevEnemyTwo => {\n      return { ...prevEnemyTwo,\n        enemy2MaxHealth: maxHealth2,\n        enemy2Health: health2,\n        enemy2AttackLow: attack2Low,\n        enemy2AttackHigh: attack2High,\n        enemy2Speed: speed2,\n        enemy2MaxSpeed: speed2,\n        enemy2Armor: armor2,\n        enemy2Reward: reward2\n      };\n    });\n    setEnemyThree(prevEnemyThree => {\n      return { ...prevEnemyThree,\n        enemy3MaxHealth: maxHealth3,\n        enemy3Health: health3,\n        enemy3AttackLow: attack3Low,\n        enemy3AttackHigh: attack3High,\n        enemy3Speed: speed3,\n        enemy3MaxSpeed: speed3,\n        enemy3Armor: armor3,\n        enemy3Reward: reward3\n      };\n    });\n    setNumberOfEnemiesInRoom(numberOfEnemiesInRoom);\n  } // createEnemy = (maxHealth, health, attackLow, attackHigh, speed, armor, reward, maxHealth2, health2, attack2Low, attack2High, speed2, armor2, reward2, maxHealth3, health3, attack3Low, attack3High, speed3, armor3, reward3, numberOfEnemiesInRoom) => {\n  //     this.setState({\n  //         enemyMaxHealth: maxHealth,\n  //         enemyHealth: health,\n  //         enemyAttackLow: attackLow,\n  //         enemyAttackHigh: attackHigh,\n  //         enemySpeed: speed,\n  //         enemyMaxSpeed: speed,\n  //         enemyArmor: armor,\n  //         enemyReward: reward,\n  //         enemy2MaxHealth: maxHealth2,\n  //         enemy2Health: health2,\n  //         enemy2AttackLow: attack2Low,\n  //         enemy2AttackHigh: attack2High,\n  //         enemy2Speed: speed2,\n  //         enemy2Armor: armor2,\n  //         enemy2Reward: reward2,\n  //         enemy3MaxHealth: maxHealth3,\n  //         enemy3Health: health3,\n  //         enemy3AttackLow: attack3Low,\n  //         enemy3AttackHigh: attack3High,\n  //         enemy3Speed: speed3,\n  //         enemy3Armor: armor3,\n  //         enemy3Reward: reward3,\n  //         numberOfEnemiesInRoom: numberOfEnemiesInRoom,\n  //     })\n  // }\n  //                         // *ROOM MOVEMENT, CREATES ENEMIES FOR NEXT ROOM, ACCOUNTS FOR AND CHANGES PLAYER SPEED, STARTS ROOM TIMER\n\n\n  function roomMovement(nowCurrentRoom) {\n    setCurrentRoom(nowCurrentRoom);\n\n    if (player.playerSpeed > 0) {\n      setCurrentRoom(nowCurrentRoom);\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerSpeed: player.playerSpeed - 1\n        };\n      });\n    }\n\n    if (nowCurrentRoom === 2 & roomTwoStatus === 0) {\n      createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);\n    }\n\n    if (nowCurrentRoom === 6 & roomSixStatus === 0) {\n      createEnemy(20, 20, 2, 3, 7, 1, 1, 20, 20, 2, 3, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2); //Two Circles\n    }\n  } // function roomMovement(currentRoom) {\n  //     if(player.playerSpeed > 0){\n  //         setCurrentRoom(currentRoom)\n  //         setPlayer(prevPlayer => {\n  //             return {...prevPlayer,\n  //                 playerSpeed: player.playerSpeed - 1\n  //             }\n  //         })\n  //         this.setState({\n  //             currentRoom: currentRoom,\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             enemyRewardCheck: 0,\n  //             playerDamageDone: 0,\n  //             enemyDamageDone: 0,\n  //             playerAttacked: 1,\n  //         })\n  //     }\n  //     if(this.state.playerSpeed <= 0){\n  //         this.playerHasNoSpeed()\n  //     }\n  // ?enemyMaxHealth, EnemyHealth, enemyAttackLow, enemyAttackHigh, enemySpeed, enemyArmor, enemyReward\n  //     if(currentRoom === 2 & this.state.roomTwoStatus === 0){\n  //         this.createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Circle 20, 2, 3, 1, 1, 1\n  //         }\n  // if(currentRoom === 3 & this.state.roomThreeStatus === 0){\n  //     this.createEnemy(15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Square 15, 4, 5, 2, 2, 2\n  // }\n  // if(currentRoom === 4 & this.state.roomFourStatus === 0){\n  //     this.createEnemy(50, 50, 5, 7, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Boss Triangle\n  // }\n  // if(currentRoom === 5 & this.state.roomFiveStatus === 0){\n  //     this.createEnemy(15, 15, 10, 12, 2, 5, 25, 10, 10, 3, 5, 9, 4, 10, 0, 0, 0, 0, 0, 0, 0, 2) //Parallelogram 15, 10, 12, 2, 5, 25 - Trapezium 10, 3, 5, 9, 4, 10\n  // }\n  // if(currentRoom === 6 & this.state.roomSixStatus === 0){\n  //     this.createEnemy(20, 20, 2, 3, 7, 1, 1, 20, 20, 2, 3, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2) //Two Circles\n  // }\n  // if(currentRoom === 7 & this.state.roomSevenStatus === 0){\n  //     this.createEnemy(15, 15, 4, 5, 2, 2, 2, 15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2) // Two Squares\n  // }\n  // if(currentRoom === 8 & this.state.roomEightStatus === 0){\n  //     this.createEnemy(80, 80, 6, 8, 3, 4, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One BOSS pentagon\n  // }\n  // if(currentRoom === 9 & this.state.roomNineStatus === 0){\n  //     this.createEnemy(30, 30, 4, 5, 2, 2, 10, 15, 15, 10, 14, 2, 5, 25, 4, 4, 1, 5, 10, 10, 5, 3) //Semi-Circle - Parallelogram - Trapezium\n  // }\n  // if(currentRoom === 10 & this.state.roomTenStatus === 0){\n  //     this.createEnemy(100, 100, 4, 7, 2, 2, 20, 100, 100, 4, 7, 2, 2, 20, 0, 0, 0, 0, 0, 0, 0, 2) //Two Hexagons\n  // }\n  // if(currentRoom === 11 & this.state.roomElevenStatus === 0){\n  //     this.createEnemy(50, 50, 5, 8, 4, 3, 15, 50, 50, 5, 8, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 2)\n  // }\n  // if(currentRoom === 12 & this.state.roomTwelveStatus === 0){\n  //     this.createEnemy(500, 500, 15, 20, 8, 8, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)\n  // }\n  // }\n  // *TIMED COMBAT\n\n\n  function startCombat() {\n    setStartCombatCheck(true);\n    enemyTimedCombatSequence();\n    playerAttackTimer(playerAttackTimerStateMax);\n  }\n\n  function enemyTimedCombatSequence() {\n    console.log(\"EnemyCombatTimer\");\n\n    if (breakLoop < 60) {\n      if (enemyOne.enemySpeed >= 0 & enemyOne.enemyHealth > 0) {\n        setEnemyOne(prevEnemyOne => {\n          return { ...prevEnemyOne,\n            enemySpeed: prevEnemyOne.enemySpeed - 1\n          };\n        });\n      }\n\n      if (enemyOne.enemyHealth >= 0) {\n        setTimeout(() => {\n          enemyTimedCombatSequence();\n        }, 1000);\n      }\n    }\n  }\n\n  function playerAttackRandomizer(playerAttackLow, playerAttackHigh) {\n    return Math.floor(Math.random() * (playerAttackHigh - playerAttackLow + 1) + playerAttackLow);\n  }\n\n  function enemyCounterAttack(currentPlayerAttack) {\n    var currentEnemyAttack = currentEnemyAttackRandomizer(enemyOne.enemyAttackLow, enemyOne.enemyAttackHigh) - player.playerArmor; // var currentEnemy2Attack = currentEnemyAttackRandomizer(enemy2AttackLow, enemy2AttackHigh) - playerArmor\n    // var currentEnemy3Attack = currentEnemyAttackRandomizer(enemy3AttackLow, enemy3AttackHigh) - playerArmor\n\n    if (currentEnemyAttack <= 0) {\n      currentEnemyAttack = 1;\n    } // if(currentEnemy2Attack <= 0){\n    //     currentEnemy2Attack = 1\n    // }\n    // if(currentEnemy3Attack <= 0){\n    //     currentEnemy3Attack = 1\n    // }\n\n\n    if (enemyOne.enemyHealth - currentPlayerAttack > 0) {\n      playerTakeDamage(currentEnemyAttack);\n    } // if(enemy2Health - currentPlayerAttack > 0){\n    //     playerDamageTaken = playerDamageTaken + currentEnemy2Attack\n    // }\n    // if(enemy3Health - currentPlayerAttack > 0){\n    //     playerDamageTaken = playerDamageTaken + currentEnemy3Attack\n    // }\n\n  }\n\n  function currentEnemyAttackRandomizer(enemyAttackLow, enemyAttackHigh) {\n    return Math.floor(Math.random() * (enemyAttackHigh - enemyAttackLow + 1) + enemyAttackLow);\n  }\n\n  function playerTakeDamage(damageTaken) {\n    setPlayer(prevPlayer => {\n      return { ...prevPlayer,\n        playerHealth: player.playerHealth - damageTaken\n      };\n    }); // setPlayerHealth(playerHealth - damageTaken)\n\n    showToastMessageRed(damageTaken);\n  }\n\n  function showToastMessageRed(damageTaken) {\n    toast.error(`You took ${damageTaken} damage !`, {\n      position: toast.POSITION.TOP_RIGHT\n    });\n  } // !END TIMED COMBAT\n  // playerHasNoSpeed = () => {\n  //     alert(\"You have no more speed! You took 10 damage. Return to Room One or use a stamina potion to regain your speed.\")\n  //     this.setState({\n  //         playerHealth: this.state.playerHealth - 10,\n  //         enemyRewardCheck: 0,\n  //         enemy2RewardCheck: 0,\n  //         enemy3RewardCheck: 0,\n  //     })\n  // }\n  // !END ROOM MOVEMENT AND PLAYER SPEED\n  // *BEGINNING OF COMBAT ATTACK SEQUENCE\n\n\n  function playerAttackTimer(test2) {\n    var timer = test2;\n\n    if (timer >= 0) {\n      console.log(`THIS IS ATTACK TIMER ${timer}`);\n      playerAttackTimerSetState(timer);\n    }\n  }\n\n  function playerAttackTimerSetState(timer) {\n    var test = timer - 1;\n    setTimeout(() => {\n      setPlayerAttackTimerState(prevPlayerAttackTimerState => prevPlayerAttackTimerState - 1);\n    }, 1000);\n    setTimeout(() => {\n      playerAttackTimer(test);\n    }, 1000);\n  }\n\n  function playerAttackMove(attackEnemy) {\n    var currentPlayerAttack = playerAttackRandomizer(player.playerAttackLow, player.playerAttackHigh);\n\n    if (attackEnemy === 1 & enemyOne.enemyHealth <= 0) {\n      deadCheck(currentPlayerAttack, attackEnemy);\n      alert(\"You killed this enemy!\");\n    }\n\n    if (attackEnemy === 1 & enemyOne.enemyHealth > 0) {\n      currentPlayerAttack = currentPlayerAttack - enemyOne.enemyArmor;\n\n      if (currentPlayerAttack <= 0) {\n        currentPlayerAttack = 1;\n      }\n\n      playerAttackMoveSetState(1, currentPlayerAttack);\n      deadCheck(currentPlayerAttack, attackEnemy);\n      playerAttackTimer(playerAttackTimerStateMax);\n    }\n  }\n\n  function playerAttackMoveSetState(attackEnemyNumber, currentPlayerAttack) {\n    if (attackEnemyNumber === 1) {\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerDamageDone: currentPlayerAttack\n        };\n      });\n      setEnemyOne(prevEnemyOne => {\n        return { ...prevEnemyOne,\n          enemyHealth: enemyOne.enemyHealth - currentPlayerAttack\n        };\n      });\n      setPlayerAttacked(1);\n      showToastMessage(currentPlayerAttack, attackEnemyNumber);\n    }\n  }\n\n  function deadCheck(currentPlayerAttack, attackEnemy) {\n    if (enemyOne.enemyHealth - currentPlayerAttack <= 0) {\n      if (enemyOne.enemyRewardCheck === 0 & attackEnemy === 1) {\n        deadCheckSetState(1);\n      }\n    }\n\n    if (enemyOne.enemyHealth <= 0) {\n      setCurrentRoomStatusClearEnemy();\n    } // & this.state.enemy2Health <= 0 & this.state.enemy3Health <= 0\n\n  }\n\n  function deadCheckSetState(enemyNumber) {\n    if (enemyNumber === 1) {\n      setEnemyOne(prevEnemyOne => {\n        return { ...prevEnemyOne,\n          enemyHealth: 0,\n          enemyRewardCheck: 1\n        };\n      });\n      setPlayer(prevPlayer => {\n        return { ...prevPlayer,\n          playerCoins: player.playerCoins + enemyOne.enemyReward\n        };\n      });\n    }\n  }\n\n  function setCurrentRoomStatusClearEnemy() {\n    if (currentRoom === 2) {\n      setRoomTwoStatus(1);\n    } // if(this.state.currentRoom === 3){\n    //     this.setState({\n    //         roomThreeStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 4){\n    //     this.setState({\n    //         roomFourStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 5){\n    //     this.setState({\n    //         roomFiveStatus: 1,\n    //     })\n    // }\n\n\n    if (currentRoom === 6) {\n      setRoomSixStatus(1);\n    } // if(this.state.currentRoom === 7){\n    //     this.setState({\n    //         roomSevenStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 8){\n    //     this.setState({\n    //         roomEightStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 9){\n    //     this.setState({\n    //         roomNineStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 10){\n    //     this.setState({\n    //         roomTenStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 11){\n    //     this.setState({\n    //         roomElevenStatus: 1,\n    //     })\n    // }\n    // if(this.state.currentRoom === 12){\n    //     this.setState({\n    //         roomTwelveStatus: 1,\n    //     })\n    // }\n\n  } //                                         // !END OF ATTACK SEQUENCE\n  //                                         // *BEGINNING OF DODGE SEQUENCE\n  // playerDodgeMove = () => {\n  //     var playerSpeedThisDodgeAttack = Math.floor(Math.random() * (100 - this.state.playerSpeed + 1) + this.state.playerSpeed)\n  //     var enemySpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemySpeed + 1) + this.state.enemySpeed)\n  //     var enemy2SpeedThisRound = 0\n  //     var enemy3SpeedThisRound = 0\n  //     var playerDamageTaken = 0\n  //     if(this.state.playerSpeed > 0){\n  //         if(this.state.enemy2Speed > 0){\n  //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy2Speed + 1) + this.state.enemy2Speed)\n  //         }\n  //         if(this.state.enemy3Speed > 0){\n  //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy3Speed + 1) + this.state.enemy3Speed)\n  //         }\n  //         console.log(playerSpeedThisDodgeAttack)\n  //         console.log(enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound)\n  //         if(playerSpeedThisDodgeAttack > enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\n  //             console.log(\"Successful Dodge\")\n  //             this.enemyWithMostHealth()\n  //             }\n  //         if(playerSpeedThisDodgeAttack <= enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\n  //             console.log(\"Player Missed Dodge\")\n  //             this.playerMissedDodge()\n  //             }\n  //         }\n  //     if(this.state.playerSpeed <= 0){\n  //         alert(\"You have no speed to dodge!\")\n  //     }\n  // }\n  //     // player attacks enemy with highest health with full attack power if the ransomizer is greater than the enemies; speed \n  // enemyWithMostHealth = () => {\n  //     var highEnemyHealth = Math.max(this.state.enemyHealth, this.state.enemy2Health, this.state.enemy3Health)\n  //     if(highEnemyHealth === this.state.enemyHealth){\n  //         this.setState({\n  //             enemyHealth: this.state.enemyHealth - (this.state.playerAttackHigh - this.state.enemyArmor),\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\n  //             })\n  //             return\n  //     }\n  //     if(highEnemyHealth === this.state.enemy2Health){\n  //         this.setState({\n  //             enemy2Health: this.state.enemy2Health - (this.state.playerAttackHigh - this.state.enemy2Armor),\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\n  //             })\n  //             return\n  //     }\n  //     if(highEnemyHealth === this.state.enemy3Health){\n  //         this.setState({\n  //             enemy3Health: this.state.enemy3Health - (this.state.playerAttackHigh - this.state.enemy3Armor),\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\n  //             })\n  //             return\n  //     }\n  // }\n  // playerMissedDodge = () => {\n  //     var currentEnemyAttack = this.currentEnemyAttackRandomizer(this.state.enemyAttackLow, this.state.enemyAttackHigh)\n  //     var currentEnemy2Attack = this.currentEnemyAttackRandomizer(this.state.enemy2AttackLow, this.state.enemy2AttackHigh)\n  //     var currentEnemy3Attack = this.currentEnemyAttackRandomizer(this.state.enemy3AttackLow, this.state.enemy3AttackHigh)\n  //     var playerDamage = currentEnemyAttack + currentEnemy2Attack + currentEnemy3Attack\n  //     this.setState({\n  //         playerHealth: this.state.playerHealth - playerDamage,\n  //         playerSpeed: this.state.playerSpeed - 1,\n  //         enemyDamageDone: playerDamage,\n  //         })\n  // }\n  //                                         // !END DODGE SEQUENCE\n  // typeOfEnemyAttack = () => {\n  // }\n  // openChest = () => {\n  //     if(this.state.currentRoom === 4){\n  //         this.setState({\n  //             healthPotionEffect: this.state.healthPotionEffect + 15,\n  //             roomFourStatus: 2,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 8){\n  //         this.setState({\n  //             healthPotionEffect: this.state.healthPotionEffect + 15,\n  //             roomEightStatus: 2,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 12){\n  //         this.setState({\n  //             healthPotionEffect: this.state.healthPotionEffect + 15,\n  //             roomTwelveStatus: 2,\n  //         })\n  //     }\n  // }\n  //                                         // *ON-SCREEN PROMPTS\n\n\n  function showToastMessage(currentPlayerAttack, attackEnemyNumber) {\n    if (attackEnemyNumber === 1) {\n      toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 1 !\", {\n        position: toast.POSITION.TOP_CENTER\n      });\n    }\n\n    if (attackEnemyNumber === 2) {\n      toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 2 !\", {\n        position: toast.POSITION.TOP_CENTER\n      });\n    }\n\n    if (attackEnemyNumber === 3) {\n      toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 3 !\", {\n        position: toast.POSITION.TOP_CENTER\n      });\n    }\n  } // *GAME TIMER/BREAKLOOP TIMER\n\n\n  function gameTime() {\n    setBreakLoop(prevBreakLoop => prevBreakLoop + 1);\n    setGameTick(prevGameTick => prevGameTick + 1);\n\n    if (breakLoop < 300) {\n      setTimeout(() => {\n        gameTime();\n      }, 1000);\n    }\n\n    console.log(`gameTime() ran. gameTick is at ${gameTick}`);\n  } //  !END GAME TIMER\n  //                                         //  *ROOM TIMER\n  // roomTime = () => {\n  //     this.roomTimeSetState()\n  //     if(this.state.roomBreakLoop < 300){\n  //         setTimeout(() => {this.roomTime(); }, 1000);\n  //     }\n  //     console.log(`gameRoomTime() is running. roomTime is at ${this.state.roomTime}`)\n  // }\n  // roomTimeSetState = () => {\n  //     this.setState({\n  //         roomTime: this.state.roomTime + 1,\n  //         roomBreakLoop: this.state.roomBreakLoop + 1,\n  //     })\n  // }\n  // !END ROOM TIMER\n  // render() {\n\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      gameTick: gameTick,\n      devButton: devButton,\n      player: player\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 875,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 876,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {\n          player: player,\n          enemyOne: enemyOne,\n          pickClass: pickClass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 878,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/GameBoard\",\n        element: /*#__PURE__*/_jsxDEV(GameBoard, {\n          buyFromStore: buyFromStore,\n          roomMovement: roomMovement,\n          createEnemy: createEnemy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 880,\n          columnNumber: 55\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/RoomTwo\",\n        element: /*#__PURE__*/_jsxDEV(RoomTwo, {\n          roomMovement: roomMovement,\n          enemyOne: enemyOne,\n          roomTwoStatus: roomTwoStatus,\n          currentRoom: currentRoom,\n          numberOfEnemiesInRoom: numberOfEnemiesInRoom,\n          startCombatCheck: startCombatCheck,\n          startCombat: startCombat,\n          playerAttacked: playerAttacked,\n          playerAttackTimerState: playerAttackTimerState,\n          playerAttackTimerStateMax: playerAttackTimerStateMax,\n          playerAttackMove: playerAttackMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 882,\n          columnNumber: 53\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 882,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/RoomSix\",\n        element: /*#__PURE__*/_jsxDEV(RoomSix, {\n          roomMovement: roomMovement,\n          enemyOne: enemyOne,\n          enemyTwo: enemyTwo,\n          roomSixStatus: roomSixStatus,\n          currentRoom: currentRoom,\n          numberOfEnemiesInRoom: numberOfEnemiesInRoom,\n          startCombatCheck: startCombatCheck,\n          startCombat: startCombat,\n          playerAttacked: playerAttacked,\n          playerAttackTimerState: playerAttackTimerState,\n          playerAttackTimerStateMax: playerAttackTimerStateMax,\n          playerAttackMove: playerAttackMove\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 892,\n          columnNumber: 53\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 892,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 877,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 874,\n    columnNumber: 13\n  }, this); // }\n}\n\n_s(App, \"WUlqrN/rZ80PmZ1fuRDB+CHS4Uk=\");\n\n_c = App;\nexport default App; // playerMaxSpeed={playerMaxSpeed} playerMaxHealth={playerMaxHealth} playerHealth={playerHealth} playerAttackLow={playerAttackLow} playerAttackHigh={playerAttackHigh} playerSpeed={playerSpeed} playerArmor={playerArmor} playerCoins={playerCoins} playerHealthPotion={playerHealthPotion} playerStaminaPotion={playerStaminaPotion}\n// enemyHealth={enemyHealth} enemyMaxHealth={enemyMaxHealth} enemyAttackLow={enemyAttackLow} enemyAttackHigh={enemyAttackHigh} enemySpeed={enemySpeed} enemyMaxSpeed={enemyMaxSpeed} enemyArmor={enemyArmor} enemyReward={enemyReward}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","ReactDOM","useState","useEffect","BrowserRouter","Routes","Route","Link","Home","Navbar","Layout","GameBoard","RoomTwo","RoomThree","RoomFour","RoomFive","RoomSix","RoomSeven","RoomEight","RoomNine","RoomTen","RoomEleven","RoomTwelve","DamageEffects","ToastContainer","toast","App","gameTick","setGameTick","breakLoop","setBreakLoop","player","setPlayer","playerHealth","playerMaxHealth","playerAttackLow","playerAttackHigh","playerSpeed","playerMaxSpeed","playerArmor","playerCoins","playerHealthPotion","playerStaminaPotion","playerDamageDone","playerAttackTimerState","setPlayerAttackTimerState","playerAttackTimerStateMax","setPlayerAttackTimerStateMax","playerAttacked","setPlayerAttacked","attackTimerRun","setAttackTimerRun","startCombatCheck","setStartCombatCheck","enemyOne","setEnemyOne","enemyMaxHealth","enemyHealth","enemyAttackLow","enemyAttackHigh","enemySpeed","enemyMaxSpeed","enemyArmor","enemyReward","enemyRewardCheck","enemyTwo","setEnemyTwo","enemy2MaxHealth","enemy2Health","enemy2AttackLow","enemy2AttackHigh","enemy2Speed","enemy2MaxSpeed","enemy2Armor","enemy2Reward","enemy2RewardCheck","enemyThree","setEnemyThree","enemy3MaxHealth","enemy3Health","enemy3AttackLow","enemy3AttackHigh","enemy3Speed","enemy3MaxSpeed","enemy3Armor","enemy3Reward","enemy3RewardCheck","numberOfEnemiesInRoom","setNumberOfEnemiesInRoom","currentRoom","setCurrentRoom","currentRoomStatus","setCurrentRoomStatus","roomTwoStatus","setRoomTwoStatus","roomSixStatus","setRoomSixStatus","prevEnemyOne","health","currentPlayerAttack","playerAttackRandomizer","enemyCounterAttack","devButton","prevPlayer","buyFromStore","item","alert","pickClass","maxHealth","attackLow","attackHigh","speed","maxSpeed","armor","coins","healthPotion","staminaPotion","attackTimer","console","log","gameTime","createEnemy","reward","maxHealth2","health2","attack2Low","attack2High","speed2","armor2","reward2","maxHealth3","health3","attack3Low","attack3High","speed3","armor3","reward3","prevEnemyTwo","prevEnemyThree","roomMovement","nowCurrentRoom","startCombat","enemyTimedCombatSequence","playerAttackTimer","setTimeout","Math","floor","random","currentEnemyAttack","currentEnemyAttackRandomizer","playerTakeDamage","damageTaken","showToastMessageRed","error","position","POSITION","TOP_RIGHT","test2","timer","playerAttackTimerSetState","test","prevPlayerAttackTimerState","playerAttackMove","attackEnemy","deadCheck","playerAttackMoveSetState","attackEnemyNumber","showToastMessage","deadCheckSetState","setCurrentRoomStatusClearEnemy","enemyNumber","success","TOP_CENTER","prevBreakLoop","prevGameTick"],"sources":["C:/Users/freeb/OneDrive/Desktop/Game_Project/Game_Project_Frontend/GameFrontEnd/src/components/App.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useState, useEffect } from 'react'\r\nimport { BrowserRouter, Routes, Route, Link } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Home from './Home/Home';\r\nimport Navbar from './Navbar/Navbar';\r\nimport Layout from './Layout/Layout';\r\nimport GameBoard from './GameBoard/GameBoard';\r\nimport RoomTwo from './RoomTwo/RoomTwo';\r\nimport RoomThree from './RoomThree/RoomThree';\r\nimport RoomFour from './RoomFour/RoomFour';\r\nimport RoomFive from './RoomFive/RoomFive';\r\nimport RoomSix from './RoomSix/RoomSix';\r\nimport RoomSeven from './RoomSeven/RoomSeven';\r\nimport RoomEight from './RoomEight/RoomEight';\r\nimport RoomNine from './RoomNine/RoomNine';\r\nimport RoomTen from './RoomTen/RoomTen';\r\nimport RoomEleven from './RoomEleven/RoomEleven';\r\nimport RoomTwelve from './RoomTwelve/RoomTwelve';\r\nimport DamageEffects from './DamageEffects/DamageEffects';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App() {\r\n    const [gameTick, setGameTick] = useState(0)\r\n    const [breakLoop, setBreakLoop] = useState(0)\r\n\r\n    const [player, setPlayer] = useState({\r\n        playerHealth: 0,\r\n        playerMaxHealth: 0,\r\n        playerAttackLow: 0,\r\n        playerAttackHigh: 0,\r\n        playerSpeed: 0,\r\n        playerMaxSpeed: 0,\r\n        playerArmor: 0,\r\n        playerCoins: 0,\r\n        playerHealthPotion: 0,\r\n        playerStaminaPotion: 0,\r\n        playerDamageDone: 0\r\n    })\r\n\r\n    const [playerAttackTimerState, setPlayerAttackTimerState] = useState(0)\r\n    const [playerAttackTimerStateMax, setPlayerAttackTimerStateMax] = useState(0)\r\n    const [playerAttacked, setPlayerAttacked] = useState(1)\r\n    const [attackTimerRun, setAttackTimerRun] = useState(true)\r\n\r\n    const [startCombatCheck, setStartCombatCheck] = useState(false)\r\n\r\n    const [enemyOne, setEnemyOne] = useState({\r\n        enemyMaxHealth: 0, \r\n        enemyHealth: 0, \r\n        enemyAttackLow: 0, \r\n        enemyAttackHigh: 0, \r\n        enemySpeed: 0, \r\n        enemyMaxSpeed: 0, \r\n        enemyArmor: 0, \r\n        enemyReward: 0,\r\n        enemyRewardCheck: 0\r\n    })\r\n\r\n    const [enemyTwo, setEnemyTwo] = useState({\r\n        enemy2MaxHealth: 0, \r\n        enemy2Health: 0, \r\n        enemy2AttackLow: 0, \r\n        enemy2AttackHigh: 0, \r\n        enemy2Speed: 0, \r\n        enemy2MaxSpeed: 0, \r\n        enemy2Armor: 0, \r\n        enemy2Reward: 0,\r\n        enemy2RewardCheck: 0\r\n    })\r\n    const [enemyThree, setEnemyThree] = useState({\r\n        enemy3MaxHealth: 0, \r\n        enemy3Health: 0, \r\n        enemy3AttackLow: 0, \r\n        enemy3AttackHigh: 0, \r\n        enemy3Speed: 0, \r\n        enemy3MaxSpeed: 0, \r\n        enemy3Armor: 0, \r\n        enemy3Reward: 0,\r\n        enemy3RewardCheck: 0\r\n    })\r\n\r\n    const [numberOfEnemiesInRoom, setNumberOfEnemiesInRoom] = useState(0)\r\n    // const [enemyDamageDone, setEnemyDamageDone] = useState(0)\r\n\r\n    const[currentRoom, setCurrentRoom] = useState(0)\r\n    const[currentRoomStatus, setCurrentRoomStatus] = useState(0)\r\n\r\n    const [roomTwoStatus, setRoomTwoStatus] = useState(0)\r\n    const [roomSixStatus, setRoomSixStatus] = useState(0)\r\n\r\n\r\n// class App extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             roomTime: 0,\r\n//             roomBreakLoop: 0,\r\n//             breakLoop: 0,\r\n//             gameTick: -1,\r\n//             playerHealth: 0,\r\n//             maxPlayerHealth: 0,\r\n//             playerAttackLow: 0,\r\n//             playerAttackHigh: 0,\r\n//             playerSpeed: -1,\r\n//             maxPlayerSpeed: 0,\r\n//             playerArmor: 0,\r\n//             playerCoins: 0,\r\n//             playerHealthPotion: 0,\r\n//             playerStaminaPotion: 0,\r\n//             healthPotionEffect: 25,\r\n//             playerDamageDone: 0,\r\n//             playerAttackTimerState: 5,\r\n//             playerAttackTimerStateMax: 5,\r\n//             enemyDamageDone: 0,\r\n//             enemyAlive: 0,\r\n//             enemyMaxHealth: 0,\r\n//             enemyHealth: 0,\r\n//             enemyAttackLow: 0,\r\n//             enemyAttackHigh: 0,\r\n//             enemySpeed: 0,\r\n//             enemyMaxSpeed: 0,\r\n//             enemyArmor: 0,\r\n//             enemyReward: 0,\r\n//             enemyRewardCheck: 0,\r\n//             enemy2MaxHealth: 0,\r\n//             enemy2Health: 0,\r\n//             enemy2AttackLow: 0,\r\n//             enemy2AttackHigh: 0,\r\n//             enemy2Speed: 0,\r\n//             enemy2Armor: 0,\r\n//             enemy2Reward: 0,\r\n//             enemy2RewardCheck: 0,\r\n//             enemy3MaxHealth: 0,\r\n//             enemy3Health: 0,\r\n//             enemy3AttackLow: 0,\r\n//             enemy3AttackHigh: 0,\r\n//             enemy3Speed: 0,\r\n//             enemy3Armor: 0,\r\n//             enemy3Reward: 0,\r\n//             enemy3RewardCheck: 0,\r\n//             numberOfEnemiesInRoom: 0,\r\n//             roomTwoStatus: 0,\r\n//             roomThreeStatus: 0,\r\n//             roomFourStatus: 0,\r\n//             roomFiveStatus: 0,\r\n//             roomSixStatus: 0,\r\n//             roomSevenStatus: 0,\r\n//             roomEightStatus: 0,\r\n//             roomNineStatus: 0,\r\n//             roomTenStatus: 0,\r\n//             roomElevenStatus: 0,\r\n//             roomTwelveStatus:0,\r\n//             currentRoom: 0,\r\n//             currentRoomStatus: 0,\r\n//             startCombatCheck: false,\r\n//             playerAttacked: 1,\r\n//         }\r\n//     }\r\n\r\nuseEffect(() => {\r\n    if(enemyOne.enemySpeed < 0){\r\n        setEnemyOne(prevEnemyOne => {\r\n            return {...prevEnemyOne, enemySpeed: enemyOne.enemyMaxSpeed}\r\n        })\r\n        if(enemyOne.health > 0){\r\n            var currentPlayerAttack = playerAttackRandomizer(player.playerAttackLow, player.playerAttackHigh)\r\n            enemyCounterAttack(currentPlayerAttack)\r\n        }\r\n    }\r\n    if(playerAttackTimerState < 0){\r\n        setPlayerAttackTimerState(playerAttackTimerStateMax)\r\n        setPlayerAttacked(2)\r\n        setAttackTimerRun(false)\r\n    }\r\n})\r\n\r\n    function devButton() {\r\n        setPlayer (prevPlayer => {\r\n            return {...prevPlayer,\r\n            playerHealth: player.playerMaxHealth,\r\n            playerAttackHigh: player.playerAttackHigh + 5,\r\n            playerCoins: player.playerCoins + 100\r\n        }\r\n        })\r\n        // setPlayerHealth(playerMaxHealth)\r\n        // setPlayerAttackHigh(prevPlayerAttackHigh => prevPlayerAttackHigh + 5)\r\n        // setPlayerCoins(playerCoins + 100)\r\n    }\r\n\r\n    // useHealthPotion = () => {\r\n    //     if(this.state.playerHealthPotion <= 0){\r\n    //         return(alert(\"You are out of health potions!\"))\r\n    //     }\r\n    //     if(this.state.playerHealth + this.state.healthPotionEffect > this.state.maxPlayerHealth){\r\n    //         this.setState({\r\n    //             playerHealthPotion: this.state.playerHealthPotion - 1,\r\n    //             playerHealth: this.state.maxPlayerHealth,\r\n    //         })\r\n    //     } else {\r\n    //         this.setState({\r\n    //             playerHealthPotion: this.state.playerHealthPotion - 1,\r\n    //             playerHealth: this.state.playerHealth + this.state.healthPotionEffect,\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // useStaminaPotion = () => {\r\n    //     if(this.state.playerStaminaPotion <= 0){\r\n    //         return(alert(\"You are out of stamina potions!\"))\r\n    //     }\r\n    //     if(this.state.playerSpeed === this.state.maxPlayerSpeed){\r\n    //         return(alert(\"You're already at max speed!\"))\r\n    //     } else {\r\n    //         this.setState({\r\n    //             playerStaminaPotion: this.state.playerStaminaPotion - 1,\r\n    //             playerSpeed: this.state.maxPlayerSpeed,\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    function buyFromStore(item) {\r\n        if(item === \"health\"){\r\n            if(player.playerCoins >= 5){\r\n                setPlayer(prevPlayer =>{\r\n                    return {...prevPlayer,\r\n                    playerCoins: player.playerCoins - 5,\r\n                    playerHealth: player.playerHealth + 10\r\n                    }\r\n                })\r\n                // setPlayerCoins(prevPlayerCoins => prevPlayerCoins - 5)\r\n                // setPlayerMaxHealth(prevPlayerMaxHealth => prevPlayerMaxHealth + 10)\r\n            } else {\r\n                alert(\"You can't afford a health upgrade.\")\r\n            }\r\n        }\r\n        // if(item === \"attackLow\"){\r\n        //     if(this.state.playerCoins >= 6 & this.state.playerAttackLow < this.state.playerAttackHigh){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 6,\r\n        //             playerAttackLow: this.state.playerAttackLow + 1,\r\n        //         })\r\n        //     } \r\n        //     if(this.state.playerAttackLow >= this.state.playerAttackHigh){\r\n        //         alert(\"Your minimum attack can not exceed you maximum attack.\")\r\n        //     }\r\n        //     if(this.state.playerCoins < 6){\r\n        //         alert(\"You can't afford a minimum attack upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"attackHigh\"){\r\n        //     if(this.state.playerCoins >= 3){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 3,\r\n        //             playerAttackHigh: this.state.playerAttackHigh + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a maximum attack upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"speed\"){\r\n        //     if(this.state.playerCoins >= 2){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 2,\r\n        //             maxPlayerSpeed: this.state.maxPlayerSpeed + 1,\r\n        //             playerSpeed: this.state.playerSpeed + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a speed upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"armor\"){\r\n        //     if(this.state.playerCoins >= 3){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 3,\r\n        //             playerArmor: this.state.playerArmor + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford an armor upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"healthPotion\"){\r\n        //     if(this.state.playerHealthPotion >= 10){\r\n        //         return (alert (\"You can only have up to ten health potions.\"))\r\n        //     }\r\n        //     if(this.state.playerCoins >= 2){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 2,\r\n        //             playerHealthPotion: this.state.playerHealthPotion + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a health potion.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"staminaPotion\"){\r\n        //     if(this.state.playerStaminaPotion >= 8){\r\n        //         return (alert(\"You can only have up to eight stamina potions.\"))\r\n        //     }\r\n        //     if(this.state.playerCoins >= 1){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 1,\r\n        //             playerStaminaPotion: this.state.playerStaminaPotion + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a stamina potion.\")\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    // resetRoomStatus = () => {\r\n    //     this.setState({\r\n    //         roomTwoStatus: 0,\r\n    //         roomThreeStatus: 0,\r\n    //         roomFiveStatus: 0,\r\n    //         roomSixStatus: 0,\r\n    //         roomSevenStatus: 0,\r\n    //         roomNineStatus: 0,\r\n    //         roomTenStatus: 0,\r\n    //         roomElevenStatus: 0,\r\n    //         enemyRewardCheck: 0,\r\n    //         enemy2RewardCheck: 0,\r\n    //         enemy3RewardCheck: 0,\r\n    //         startCombatCheck: false,\r\n    //         playerAttacked: 1,\r\n    //         playerSpeed: this.state.maxPlayerSpeed,\r\n    //     })\r\n    // }\r\n\r\n    function pickClass(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion, attackTimer) {\r\n        console.log(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion, attackTimer)\r\n        setPlayer(prevPlayer => {\r\n            return {...prevPlayer,\r\n            playerHealth: health,\r\n            playerMaxHealth: maxHealth,\r\n            playerAttackLow: attackLow,\r\n            playerAttackHigh: attackHigh,\r\n            playerSpeed: speed,\r\n            playerMaxSpeed: maxSpeed,\r\n            playerArmor: armor,\r\n            playerCoins: coins,\r\n            playerHealthPotion: healthPotion,\r\n            playerStaminaPotion: staminaPotion\r\n        }\r\n        })\r\n        setPlayerAttackTimerState(attackTimer)\r\n        setPlayerAttackTimerStateMax(attackTimer)\r\n        gameTime()\r\n    }\r\n\r\n    function createEnemy(maxHealth, health, attackLow, attackHigh, speed, armor, reward, maxHealth2, health2, attack2Low, attack2High, speed2, armor2, reward2, maxHealth3, health3, attack3Low, attack3High, speed3, armor3, reward3, numberOfEnemiesInRoom) {\r\n        setEnemyOne(prevEnemyOne => {\r\n            return {...prevEnemyOne, \r\n                enemyMaxHealth: maxHealth,\r\n                enemyHealth: health,\r\n                enemyAttackLow: attackLow,\r\n                enemyAttackHigh: attackHigh,\r\n                enemySpeed: speed,\r\n                enemyMaxSpeed: speed,\r\n                enemyArmor: armor,\r\n                enemyReward: reward\r\n            }\r\n        })\r\n        setEnemyTwo(prevEnemyTwo => {\r\n            return {...prevEnemyTwo,\r\n                enemy2MaxHealth: maxHealth2,\r\n                enemy2Health: health2,\r\n                enemy2AttackLow: attack2Low,\r\n                enemy2AttackHigh: attack2High,\r\n                enemy2Speed: speed2,\r\n                enemy2MaxSpeed: speed2,\r\n                enemy2Armor: armor2,\r\n                enemy2Reward: reward2\r\n            }\r\n        })\r\n        setEnemyThree(prevEnemyThree => {\r\n            return {...prevEnemyThree,\r\n                enemy3MaxHealth: maxHealth3,\r\n                enemy3Health: health3,\r\n                enemy3AttackLow: attack3Low,\r\n                enemy3AttackHigh: attack3High,\r\n                enemy3Speed: speed3,\r\n                enemy3MaxSpeed: speed3,\r\n                enemy3Armor: armor3,\r\n                enemy3Reward: reward3\r\n            }\r\n        })\r\n        setNumberOfEnemiesInRoom(numberOfEnemiesInRoom)\r\n    }\r\n\r\n    // createEnemy = (maxHealth, health, attackLow, attackHigh, speed, armor, reward, maxHealth2, health2, attack2Low, attack2High, speed2, armor2, reward2, maxHealth3, health3, attack3Low, attack3High, speed3, armor3, reward3, numberOfEnemiesInRoom) => {\r\n    //     this.setState({\r\n    //         enemyMaxHealth: maxHealth,\r\n    //         enemyHealth: health,\r\n    //         enemyAttackLow: attackLow,\r\n    //         enemyAttackHigh: attackHigh,\r\n    //         enemySpeed: speed,\r\n    //         enemyMaxSpeed: speed,\r\n    //         enemyArmor: armor,\r\n    //         enemyReward: reward,\r\n    //         enemy2MaxHealth: maxHealth2,\r\n    //         enemy2Health: health2,\r\n    //         enemy2AttackLow: attack2Low,\r\n    //         enemy2AttackHigh: attack2High,\r\n    //         enemy2Speed: speed2,\r\n    //         enemy2Armor: armor2,\r\n    //         enemy2Reward: reward2,\r\n    //         enemy3MaxHealth: maxHealth3,\r\n    //         enemy3Health: health3,\r\n    //         enemy3AttackLow: attack3Low,\r\n    //         enemy3AttackHigh: attack3High,\r\n    //         enemy3Speed: speed3,\r\n    //         enemy3Armor: armor3,\r\n    //         enemy3Reward: reward3,\r\n    //         numberOfEnemiesInRoom: numberOfEnemiesInRoom,\r\n    //     })\r\n    // }\r\n\r\n    //                         // *ROOM MOVEMENT, CREATES ENEMIES FOR NEXT ROOM, ACCOUNTS FOR AND CHANGES PLAYER SPEED, STARTS ROOM TIMER\r\n\r\n    function roomMovement(nowCurrentRoom){\r\n        setCurrentRoom(nowCurrentRoom)\r\n        if(player.playerSpeed > 0){\r\n            setCurrentRoom(nowCurrentRoom)\r\n            setPlayer(prevPlayer => {\r\n                return {...prevPlayer,\r\n                    playerSpeed: player.playerSpeed - 1\r\n                }\r\n            })\r\n        }\r\n        if(nowCurrentRoom === 2 & roomTwoStatus === 0) {\r\n            createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)\r\n        }\r\n        if(nowCurrentRoom === 6 & roomSixStatus === 0){\r\n            createEnemy(20, 20, 2, 3, 7, 1, 1, 20, 20, 2, 3, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2) //Two Circles\r\n        }\r\n    }\r\n\r\n    // function roomMovement(currentRoom) {\r\n    //     if(player.playerSpeed > 0){\r\n    //         setCurrentRoom(currentRoom)\r\n    //         setPlayer(prevPlayer => {\r\n    //             return {...prevPlayer,\r\n    //                 playerSpeed: player.playerSpeed - 1\r\n    //             }\r\n    //         })\r\n\r\n    //         this.setState({\r\n    //             currentRoom: currentRoom,\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             enemyRewardCheck: 0,\r\n    //             playerDamageDone: 0,\r\n    //             enemyDamageDone: 0,\r\n    //             playerAttacked: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.playerSpeed <= 0){\r\n    //         this.playerHasNoSpeed()\r\n    //     }\r\n        // ?enemyMaxHealth, EnemyHealth, enemyAttackLow, enemyAttackHigh, enemySpeed, enemyArmor, enemyReward\r\n    //     if(currentRoom === 2 & this.state.roomTwoStatus === 0){\r\n    //         this.createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Circle 20, 2, 3, 1, 1, 1\r\n    //         }\r\n        // if(currentRoom === 3 & this.state.roomThreeStatus === 0){\r\n        //     this.createEnemy(15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Square 15, 4, 5, 2, 2, 2\r\n        // }\r\n        // if(currentRoom === 4 & this.state.roomFourStatus === 0){\r\n        //     this.createEnemy(50, 50, 5, 7, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Boss Triangle\r\n        // }\r\n        // if(currentRoom === 5 & this.state.roomFiveStatus === 0){\r\n        //     this.createEnemy(15, 15, 10, 12, 2, 5, 25, 10, 10, 3, 5, 9, 4, 10, 0, 0, 0, 0, 0, 0, 0, 2) //Parallelogram 15, 10, 12, 2, 5, 25 - Trapezium 10, 3, 5, 9, 4, 10\r\n        // }\r\n        // if(currentRoom === 6 & this.state.roomSixStatus === 0){\r\n        //     this.createEnemy(20, 20, 2, 3, 7, 1, 1, 20, 20, 2, 3, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2) //Two Circles\r\n        // }\r\n        // if(currentRoom === 7 & this.state.roomSevenStatus === 0){\r\n        //     this.createEnemy(15, 15, 4, 5, 2, 2, 2, 15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2) // Two Squares\r\n        // }\r\n        // if(currentRoom === 8 & this.state.roomEightStatus === 0){\r\n        //     this.createEnemy(80, 80, 6, 8, 3, 4, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One BOSS pentagon\r\n        // }\r\n        // if(currentRoom === 9 & this.state.roomNineStatus === 0){\r\n        //     this.createEnemy(30, 30, 4, 5, 2, 2, 10, 15, 15, 10, 14, 2, 5, 25, 4, 4, 1, 5, 10, 10, 5, 3) //Semi-Circle - Parallelogram - Trapezium\r\n        // }\r\n        // if(currentRoom === 10 & this.state.roomTenStatus === 0){\r\n        //     this.createEnemy(100, 100, 4, 7, 2, 2, 20, 100, 100, 4, 7, 2, 2, 20, 0, 0, 0, 0, 0, 0, 0, 2) //Two Hexagons\r\n        // }\r\n        // if(currentRoom === 11 & this.state.roomElevenStatus === 0){\r\n        //     this.createEnemy(50, 50, 5, 8, 4, 3, 15, 50, 50, 5, 8, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 2)\r\n        // }\r\n        // if(currentRoom === 12 & this.state.roomTwelveStatus === 0){\r\n        //     this.createEnemy(500, 500, 15, 20, 8, 8, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)\r\n        // }\r\n    // }\r\n                                            // *TIMED COMBAT\r\n    function startCombat() {\r\n        setStartCombatCheck(true)\r\n        enemyTimedCombatSequence()\r\n        playerAttackTimer(playerAttackTimerStateMax)\r\n    }\r\n\r\n    function enemyTimedCombatSequence() {\r\n        console.log(\"EnemyCombatTimer\")\r\n        if(breakLoop < 60) {\r\n            if(enemyOne.enemySpeed >= 0 & enemyOne.enemyHealth > 0) {\r\n                setEnemyOne(prevEnemyOne => {\r\n                    return {...prevEnemyOne, enemySpeed: prevEnemyOne.enemySpeed -1}\r\n            })\r\n        }\r\n            if(enemyOne.enemyHealth >= 0){\r\n                setTimeout(() => {enemyTimedCombatSequence(); }, 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n    function playerAttackRandomizer(playerAttackLow, playerAttackHigh) {\r\n        return Math.floor(Math.random() * (playerAttackHigh - playerAttackLow + 1) + playerAttackLow)\r\n    }\r\n\r\n    function enemyCounterAttack(currentPlayerAttack) {\r\n        var currentEnemyAttack = currentEnemyAttackRandomizer(enemyOne.enemyAttackLow, enemyOne.enemyAttackHigh) - player.playerArmor\r\n        // var currentEnemy2Attack = currentEnemyAttackRandomizer(enemy2AttackLow, enemy2AttackHigh) - playerArmor\r\n        // var currentEnemy3Attack = currentEnemyAttackRandomizer(enemy3AttackLow, enemy3AttackHigh) - playerArmor\r\n        if(currentEnemyAttack <= 0){\r\n            currentEnemyAttack = 1\r\n        }\r\n        // if(currentEnemy2Attack <= 0){\r\n        //     currentEnemy2Attack = 1\r\n        // }\r\n        // if(currentEnemy3Attack <= 0){\r\n        //     currentEnemy3Attack = 1\r\n        // }\r\n        if(enemyOne.enemyHealth - currentPlayerAttack > 0){\r\n            playerTakeDamage(currentEnemyAttack)\r\n        }\r\n        // if(enemy2Health - currentPlayerAttack > 0){\r\n        //     playerDamageTaken = playerDamageTaken + currentEnemy2Attack\r\n        // }\r\n        // if(enemy3Health - currentPlayerAttack > 0){\r\n        //     playerDamageTaken = playerDamageTaken + currentEnemy3Attack\r\n        // }\r\n    }\r\n\r\n    function currentEnemyAttackRandomizer(enemyAttackLow, enemyAttackHigh) {\r\n        return Math.floor(Math.random() * (enemyAttackHigh - enemyAttackLow + 1) + enemyAttackLow)\r\n    }\r\n\r\n    function playerTakeDamage(damageTaken) {\r\n        setPlayer(prevPlayer =>{\r\n            return {...prevPlayer,\r\n            playerHealth: player.playerHealth - damageTaken}\r\n        })\r\n        // setPlayerHealth(playerHealth - damageTaken)\r\n        showToastMessageRed(damageTaken)\r\n    }\r\n\r\n    function showToastMessageRed(damageTaken) {\r\n        toast.error(`You took ${damageTaken} damage !`, {\r\n            position: toast.POSITION.TOP_RIGHT\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n                                            // !END TIMED COMBAT\r\n\r\n    // playerHasNoSpeed = () => {\r\n    //     alert(\"You have no more speed! You took 10 damage. Return to Room One or use a stamina potion to regain your speed.\")\r\n    //     this.setState({\r\n    //         playerHealth: this.state.playerHealth - 10,\r\n    //         enemyRewardCheck: 0,\r\n    //         enemy2RewardCheck: 0,\r\n    //         enemy3RewardCheck: 0,\r\n    //     })\r\n    // }\r\n\r\n                                            // !END ROOM MOVEMENT AND PLAYER SPEED\r\n\r\n                                            // *BEGINNING OF COMBAT ATTACK SEQUENCE\r\n\r\n    function playerAttackTimer(test2) {\r\n        var timer = test2\r\n        if(timer >= 0){\r\n            console.log(`THIS IS ATTACK TIMER ${timer}`)\r\n            playerAttackTimerSetState(timer)\r\n        }\r\n    }\r\n\r\n    function playerAttackTimerSetState(timer){\r\n        var test = timer -1\r\n        setTimeout(() => {setPlayerAttackTimerState(prevPlayerAttackTimerState => prevPlayerAttackTimerState -1); }, 1000);\r\n        setTimeout(() => {playerAttackTimer(test); }, 1000);\r\n    }\r\n\r\n\r\n    function playerAttackMove(attackEnemy) {\r\n        var currentPlayerAttack = playerAttackRandomizer(player.playerAttackLow, player.playerAttackHigh)\r\n        if(attackEnemy === 1 & enemyOne.enemyHealth <= 0){\r\n            deadCheck(currentPlayerAttack, attackEnemy)\r\n            alert(\"You killed this enemy!\")\r\n        }\r\n        if(attackEnemy === 1 & enemyOne.enemyHealth > 0){\r\n            currentPlayerAttack = currentPlayerAttack - enemyOne.enemyArmor\r\n            if(currentPlayerAttack <= 0){\r\n                currentPlayerAttack = 1\r\n            }\r\n            playerAttackMoveSetState(1, currentPlayerAttack)\r\n            deadCheck(currentPlayerAttack, attackEnemy)\r\n            playerAttackTimer(playerAttackTimerStateMax)\r\n        }\r\n    }\r\n\r\n    function playerAttackMoveSetState(attackEnemyNumber, currentPlayerAttack) {\r\n        if(attackEnemyNumber === 1){\r\n            setPlayer(prevPlayer => {\r\n                return {...prevPlayer,\r\n                playerDamageDone: currentPlayerAttack\r\n                }\r\n            })\r\n            setEnemyOne(prevEnemyOne => {\r\n                return{...prevEnemyOne,\r\n                enemyHealth: enemyOne.enemyHealth - currentPlayerAttack\r\n                }\r\n            })\r\n            setPlayerAttacked(1)\r\n            showToastMessage(currentPlayerAttack, attackEnemyNumber)\r\n        }\r\n    }\r\n\r\n    function deadCheck(currentPlayerAttack, attackEnemy) {\r\n        if(enemyOne.enemyHealth - currentPlayerAttack <= 0){\r\n            if(enemyOne.enemyRewardCheck === 0 & attackEnemy === 1){\r\n                deadCheckSetState(1)\r\n            }\r\n        }\r\n        if(enemyOne.enemyHealth <= 0){\r\n            setCurrentRoomStatusClearEnemy()\r\n        }\r\n        // & this.state.enemy2Health <= 0 & this.state.enemy3Health <= 0\r\n    }\r\n\r\n    function deadCheckSetState(enemyNumber) {\r\n        if(enemyNumber === 1){\r\n            setEnemyOne(prevEnemyOne => {\r\n                return {...prevEnemyOne,\r\n                enemyHealth: 0,\r\n                enemyRewardCheck: 1\r\n                }\r\n            })\r\n            setPlayer(prevPlayer => {\r\n                return {...prevPlayer,\r\n                playerCoins: player.playerCoins + enemyOne.enemyReward\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function setCurrentRoomStatusClearEnemy() {\r\n        if(currentRoom === 2){\r\n            setRoomTwoStatus(1)\r\n        }\r\n        // if(this.state.currentRoom === 3){\r\n        //     this.setState({\r\n        //         roomThreeStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 4){\r\n        //     this.setState({\r\n        //         roomFourStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 5){\r\n        //     this.setState({\r\n        //         roomFiveStatus: 1,\r\n        //     })\r\n        // }\r\n        if(currentRoom === 6){\r\n            setRoomSixStatus(1)\r\n        }\r\n        // if(this.state.currentRoom === 7){\r\n        //     this.setState({\r\n        //         roomSevenStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 8){\r\n        //     this.setState({\r\n        //         roomEightStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 9){\r\n        //     this.setState({\r\n        //         roomNineStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 10){\r\n        //     this.setState({\r\n        //         roomTenStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 11){\r\n        //     this.setState({\r\n        //         roomElevenStatus: 1,\r\n        //     })\r\n        // }\r\n        // if(this.state.currentRoom === 12){\r\n        //     this.setState({\r\n        //         roomTwelveStatus: 1,\r\n        //     })\r\n        // }\r\n    }\r\n\r\n    //                                         // !END OF ATTACK SEQUENCE\r\n\r\n    //                                         // *BEGINNING OF DODGE SEQUENCE\r\n\r\n    // playerDodgeMove = () => {\r\n    //     var playerSpeedThisDodgeAttack = Math.floor(Math.random() * (100 - this.state.playerSpeed + 1) + this.state.playerSpeed)\r\n    //     var enemySpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemySpeed + 1) + this.state.enemySpeed)\r\n    //     var enemy2SpeedThisRound = 0\r\n    //     var enemy3SpeedThisRound = 0\r\n    //     var playerDamageTaken = 0\r\n    //     if(this.state.playerSpeed > 0){\r\n    //         if(this.state.enemy2Speed > 0){\r\n    //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy2Speed + 1) + this.state.enemy2Speed)\r\n    //         }\r\n    //         if(this.state.enemy3Speed > 0){\r\n    //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy3Speed + 1) + this.state.enemy3Speed)\r\n    //         }\r\n    //         console.log(playerSpeedThisDodgeAttack)\r\n    //         console.log(enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound)\r\n\r\n    //         if(playerSpeedThisDodgeAttack > enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\r\n    //             console.log(\"Successful Dodge\")\r\n    //             this.enemyWithMostHealth()\r\n    //             }\r\n    //         if(playerSpeedThisDodgeAttack <= enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\r\n    //             console.log(\"Player Missed Dodge\")\r\n    //             this.playerMissedDodge()\r\n    //             }\r\n    //         }\r\n    //     if(this.state.playerSpeed <= 0){\r\n    //         alert(\"You have no speed to dodge!\")\r\n    //     }\r\n    // }\r\n\r\n    //     // player attacks enemy with highest health with full attack power if the ransomizer is greater than the enemies; speed \r\n\r\n    // enemyWithMostHealth = () => {\r\n    //     var highEnemyHealth = Math.max(this.state.enemyHealth, this.state.enemy2Health, this.state.enemy3Health)\r\n    //     if(highEnemyHealth === this.state.enemyHealth){\r\n    //         this.setState({\r\n    //             enemyHealth: this.state.enemyHealth - (this.state.playerAttackHigh - this.state.enemyArmor),\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\r\n    //             })\r\n    //             return\r\n    //     }\r\n    //     if(highEnemyHealth === this.state.enemy2Health){\r\n    //         this.setState({\r\n    //             enemy2Health: this.state.enemy2Health - (this.state.playerAttackHigh - this.state.enemy2Armor),\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\r\n    //             })\r\n    //             return\r\n    //     }\r\n    //     if(highEnemyHealth === this.state.enemy3Health){\r\n    //         this.setState({\r\n    //             enemy3Health: this.state.enemy3Health - (this.state.playerAttackHigh - this.state.enemy3Armor),\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\r\n    //             })\r\n    //             return\r\n    //     }\r\n    // }\r\n\r\n    // playerMissedDodge = () => {\r\n    //     var currentEnemyAttack = this.currentEnemyAttackRandomizer(this.state.enemyAttackLow, this.state.enemyAttackHigh)\r\n    //     var currentEnemy2Attack = this.currentEnemyAttackRandomizer(this.state.enemy2AttackLow, this.state.enemy2AttackHigh)\r\n    //     var currentEnemy3Attack = this.currentEnemyAttackRandomizer(this.state.enemy3AttackLow, this.state.enemy3AttackHigh)\r\n    //     var playerDamage = currentEnemyAttack + currentEnemy2Attack + currentEnemy3Attack\r\n    //     this.setState({\r\n    //         playerHealth: this.state.playerHealth - playerDamage,\r\n    //         playerSpeed: this.state.playerSpeed - 1,\r\n    //         enemyDamageDone: playerDamage,\r\n    //         })\r\n    // }\r\n\r\n    //                                         // !END DODGE SEQUENCE\r\n\r\n    // typeOfEnemyAttack = () => {\r\n\r\n    // }\r\n\r\n    // openChest = () => {\r\n    //     if(this.state.currentRoom === 4){\r\n    //         this.setState({\r\n    //             healthPotionEffect: this.state.healthPotionEffect + 15,\r\n    //             roomFourStatus: 2,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 8){\r\n    //         this.setState({\r\n    //             healthPotionEffect: this.state.healthPotionEffect + 15,\r\n    //             roomEightStatus: 2,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 12){\r\n    //         this.setState({\r\n    //             healthPotionEffect: this.state.healthPotionEffect + 15,\r\n    //             roomTwelveStatus: 2,\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    //                                         // *ON-SCREEN PROMPTS\r\n\r\n    function showToastMessage(currentPlayerAttack, attackEnemyNumber) {\r\n        if(attackEnemyNumber === 1){\r\n            toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 1 !\", {\r\n                position: toast.POSITION.TOP_CENTER\r\n            });\r\n        }\r\n        if(attackEnemyNumber === 2){\r\n            toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 2 !\", {\r\n                position: toast.POSITION.TOP_CENTER\r\n            });\r\n        }\r\n        if(attackEnemyNumber === 3){\r\n            toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 3 !\", {\r\n                position: toast.POSITION.TOP_CENTER\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n                                            // *GAME TIMER/BREAKLOOP TIMER\r\n\r\n    function gameTime() {\r\n        setBreakLoop(prevBreakLoop => prevBreakLoop + 1)\r\n        setGameTick(prevGameTick => prevGameTick + 1)\r\n        if(breakLoop < 300){\r\n            setTimeout(() => {gameTime(); }, 1000);\r\n        }\r\n        console.log(`gameTime() ran. gameTick is at ${gameTick}`)\r\n    }\r\n\r\n\r\n                                            //  !END GAME TIMER\r\n\r\n    //                                         //  *ROOM TIMER\r\n    // roomTime = () => {\r\n    //     this.roomTimeSetState()\r\n    //     if(this.state.roomBreakLoop < 300){\r\n    //         setTimeout(() => {this.roomTime(); }, 1000);\r\n    //     }\r\n    //     console.log(`gameRoomTime() is running. roomTime is at ${this.state.roomTime}`)\r\n    // }\r\n\r\n    // roomTimeSetState = () => {\r\n    //     this.setState({\r\n    //         roomTime: this.state.roomTime + 1,\r\n    //         roomBreakLoop: this.state.roomBreakLoop + 1,\r\n    //     })\r\n    // }\r\n\r\n                                            // !END ROOM TIMER\r\n    // render() {\r\n        return(\r\n            <BrowserRouter>\r\n            <Navbar gameTick={gameTick} devButton={devButton} player={player} />\r\n            <ToastContainer />\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Home player={player} enemyOne={enemyOne} pickClass={pickClass} />} />\r\n\r\n                    <Route path=\"/GameBoard\" element={<GameBoard buyFromStore={buyFromStore} roomMovement={roomMovement} createEnemy={createEnemy} />} />\r\n\r\n                    <Route path=\"/RoomTwo\" element={<RoomTwo roomMovement={roomMovement} enemyOne={enemyOne} roomTwoStatus={roomTwoStatus} currentRoom={currentRoom}  numberOfEnemiesInRoom={numberOfEnemiesInRoom} startCombatCheck={startCombatCheck} startCombat={startCombat} playerAttacked={playerAttacked} playerAttackTimerState={playerAttackTimerState} playerAttackTimerStateMax={playerAttackTimerStateMax} playerAttackMove={playerAttackMove} />} />\r\n\r\n                    {/* <Route path=\"/RoomTwo\" element={<RoomTwo rechargeAttackMove={this.rechargeAttackMove} playerAttacked={this.state.playerAttacked} playerAttackMove={this.playerAttackMove} playerAttackTimerState={this.state.playerAttackTimerState} playerAttackTimerStateMax={this.state.playerAttackTimerStateMax} startCombat={this.startCombat} startCombatCheck={this.state.startCombatCheck} currentRoom={this.state.currentRoom} roomMovement={this.roomMovement} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyMaxHealth={this.state.enemyMaxHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed}  enemyMaxSpeed={this.state.enemyMaxSpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} roomTwoStatus={this.state.roomTwoStatus} resetRoomStatus={this.resetRoomStatus} />} /> */}\r\n\r\n                    {/* <Route path=\"/RoomThree\" element={<RoomThree roomMovement={this.roomMovement} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} roomThreeStatus ={this.state.roomThreeStatus} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} />} /> */}\r\n\r\n                    {/* <Route path=\"/RoomFour\" element={<RoomFour openChest={this.openChest} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomFourStatus={this.state.roomFourStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} />} /> */}\r\n\r\n                    {/* <Route path=\"/RoomFive\" element={<RoomFive resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomFiveStatus={this.state.roomFiveStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward} />} /> */}\r\n\r\n                    <Route path=\"/RoomSix\" element={<RoomSix roomMovement={roomMovement} enemyOne={enemyOne} enemyTwo={enemyTwo} roomSixStatus={roomSixStatus} currentRoom={currentRoom}  numberOfEnemiesInRoom={numberOfEnemiesInRoom} startCombatCheck={startCombatCheck} startCombat={startCombat} playerAttacked={playerAttacked} playerAttackTimerState={playerAttackTimerState} playerAttackTimerStateMax={playerAttackTimerStateMax} playerAttackMove={playerAttackMove} />} />\r\n\r\n                    {/* <Route path=\"/RoomSeven\" element={<RoomSeven resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomSevenStatus={this.state.roomSevenStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward}/>} /> */}\r\n\r\n                    {/* <Route path=\"/RoomEight\" element={<RoomEight openChest={this.openChest} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomEightStatus={this.state.roomEightStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} />} /> */}\r\n\r\n                    {/* <Route path=\"/RoomNine\" element={<RoomNine resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomNineStatus={this.state.roomNineStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward} enemy3Health={this.state.enemy3Health} enemy3AttackLow={this.state.enemy3AttackLow} enemy3AttackHigh={this.state.enemy3AttackHigh} enemy3Speed={this.state.enemy3Speed} enemy3Armor={this.state.enemy3Armor} enemy3Reward={this.state.enemy3Reward}/>} /> */}\r\n\r\n                    {/* <Route path=\"/RoomTen\" element={<RoomTen resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomTenStatus={this.state.roomTenStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward}/>} /> */}\r\n\r\n                    {/* <Route path=\"/RoomEleven\" element={<RoomEleven resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomElevenStatus={this.state.roomElevenStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward}/>} /> */}\r\n\r\n                    {/* <Route path=\"/RoomTwelve\" element={<RoomTwelve openChest={this.openChest} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomTwelveStatus={this.state.roomTwelveStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward}/>} /> */}\r\n                </Routes>\r\n            </BrowserRouter>\r\n        )\r\n    // }\r\n}\r\n\r\nexport default App;\r\n\r\n// playerMaxSpeed={playerMaxSpeed} playerMaxHealth={playerMaxHealth} playerHealth={playerHealth} playerAttackLow={playerAttackLow} playerAttackHigh={playerAttackHigh} playerSpeed={playerSpeed} playerArmor={playerArmor} playerCoins={playerCoins} playerHealthPotion={playerHealthPotion} playerStaminaPotion={playerStaminaPotion}\r\n\r\n// enemyHealth={enemyHealth} enemyMaxHealth={enemyMaxHealth} enemyAttackLow={enemyAttackLow} enemyAttackHigh={enemyAttackHigh} enemySpeed={enemySpeed} enemyMaxSpeed={enemyMaxSpeed} enemyArmor={enemyArmor} enemyReward={enemyReward}\r\n"],"mappings":"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tE,YAAY,EAAEF,MAAM,CAACG,eADd;QAEPE,gBAAgB,EAAEL,MAAM,CAACK,gBAAP,GAA0B,CAFrC;QAGPI,WAAW,EAAET,MAAM,CAACS,WAAP,GAAqB;MAH3B,CAAP;IAKH,CANQ,CAAT,CADiB,CAQjB;IACA;IACA;EACH,CAtKU,CAwKX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,SAASgE,YAAT,CAAsBC,IAAtB,EAA4B;IACxB,IAAGA,IAAI,KAAK,QAAZ,EAAqB;MACjB,IAAG1E,MAAM,CAACS,WAAP,IAAsB,CAAzB,EAA2B;QACvBR,SAAS,CAACuE,UAAU,IAAG;UACnB,OAAO,EAAC,GAAGA,UAAJ;YACP/D,WAAW,EAAET,MAAM,CAACS,WAAP,GAAqB,CAD3B;YAEPP,YAAY,EAAEF,MAAM,CAACE,YAAP,GAAsB;UAF7B,CAAP;QAIH,CALQ,CAAT,CADuB,CAOvB;QACA;MACH,CATD,MASO;QACHyE,KAAK,CAAC,oCAAD,CAAL;MACH;IACJ,CAduB,CAexB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACH,CA7RU,CA+RX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,SAASC,SAAT,CAAmBT,MAAnB,EAA2BU,SAA3B,EAAsCC,SAAtC,E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ACA;IACA;IACA;IACA;IACA;IACA;;;IACA,IAAGL,WAAW,KAAK,CAAnB,EAAqB;MACjBO,gBAAgB,CAAC,CAAD,CAAhB;IACH,CArBqC,CAsBtC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACH,CAlrBU,CAorBX;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EAEA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;;EAEA,SAASuE,gBAAT,CAA0BpE,mBAA1B,EAA+CmE,iBAA/C,EAAkE;IAC9D,IAAGA,iBAAiB,KAAK,CAAzB,EAA2B;MACvB7I,KAAK,CAACkJ,OAAN,CAAc,aAAaxE,mBAAb,GAAmC,sBAAjD,EAAyE;QACrEuD,QAAQ,EAAEjI,KAAK,CAACkI,QAAN,CAAeiB;MAD4C,CAAzE;IAGH;;IACD,IAAGN,iBAAiB,KAAK,CAAzB,EAA2B;MACvB7I,KAAK,CAACkJ,OAAN,CAAc,aAAaxE,mBAAb,GAAmC,sBAAjD,EAAyE;QACrEuD,QAAQ,EAAEjI,KAAK,CAACkI,QAAN,CAAeiB;MAD4C,CAAzE;IAGH;;IACD,IAAGN,iBAAiB,KAAK,CAAzB,EAA2B;MACvB7I,KAAK,CAACkJ,OAAN,CAAc,aAAaxE,mBAAb,GAAmC,sBAAjD,EAAyE;QACrEuD,QAAQ,EAAEjI,KAAK,CAACkI,QAAN,CAAeiB;MAD4C,CAAzE;IAGH;EACJ,CA7yBU,CAgzB6B;;;EAExC,SAASpD,QAAT,GAAoB;IAChB1F,YAAY,CAAC+I,aAAa,IAAIA,aAAa,GAAG,CAAlC,CAAZ;IACAjJ,WAAW,CAACkJ,YAAY,IAAIA,YAAY,GAAG,CAAhC,CAAX;;IACA,IAAGjJ,SAAS,GAAG,GAAf,EAAmB;MACfmH,UAAU,CAAC,MAAM;QAACxB,QAAQ;MAAK,CAArB,EAAuB,IAAvB,CAAV;IACH;;IACDF,OAAO,CAACC,GAAR,CAAa,kCAAiC5F,QAAS,EAAvD;EACH,CAzzBU,CA4zB6B;EAExC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEwC;EACxC;;;EACI,oBACI,QAAC,aAAD;IAAA,wBACA,QAAC,MAAD;MAAQ,QAAQ,EAAEA,QAAlB;MAA4B,SAAS,EAAE2E,SAAvC;MAAkD,MAAM,EAAEvE;IAA1D;MAAA;MAAA;MAAA;IAAA,QADA,eAEA,QAAC,cAAD;MAAA;MAAA;MAAA;IAAA,QAFA,eAGI,QAAC,MAAD;MAAA,wBACI,QAAC,KAAD;QAAO,IAAI,EAAC,GAAZ;QAAgB,OAAO,eAAE,QAAC,IAAD;UAAM,MAAM,EAAEA,MAAd;UAAsB,QAAQ,EAAEuB,QAAhC;UAA0C,SAAS,EAAEqD;QAArD;UAAA;UAAA;UAAA;QAAA;MAAzB;QAAA;QAAA;QAAA;MAAA,QADJ,eAGI,QAAC,KAAD;QAAO,IAAI,EAAC,YAAZ;QAAyB,OAAO,eAAE,QAAC,SAAD;UAAW,YAAY,EAAEH,YAAzB;UAAuC,YAAY,EAAEmC,YAArD;UAAmE,WAAW,EAAElB;QAAhF;UAAA;UAAA;UAAA;QAAA;MAAlC;QAAA;QAAA;QAAA;MAAA,QAHJ,eAKI,QAAC,KAAD;QAAO,IAAI,EAAC,UAAZ;QAAuB,OAAO,eAAE,QAAC,OAAD;UAAS,YAAY,EAAEkB,YAAvB;UAAqC,QAAQ,EAAErF,QAA/C;UAAyD,aAAa,EAAEuC,aAAxE;UAAuF,WAAW,EAAEJ,WAApG;UAAkH,qBAAqB,EAAEF,qBAAzI;UAAgK,gBAAgB,EAAEnC,gBAAlL;UAAoM,WAAW,EAAEyF,WAAjN;UAA8N,cAAc,EAAE7F,cAA9O;UAA8P,sBAAsB,EAAEJ,sBAAtR;UAA8S,yBAAyB,EAAEE,yBAAzU;UAAoW,gBAAgB,EAAEoH;QAAtX;UAAA;UAAA;UAAA;QAAA;MAAhC;QAAA;QAAA;QAAA;MAAA,QALJ,eAeI,QAAC,KAAD;QAAO,IAAI,EAAC,UAAZ;QAAuB,OAAO,eAAE,QAAC,OAAD;UAAS,YAAY,EAAEvB,YAAvB;UAAqC,QAAQ,EAAErF,QAA/C;UAAyD,QAAQ,EAAEW,QAAnE;UAA6E,aAAa,EAAE8B,aAA5F;UAA2G,WAAW,EAAEN,WAAxH;UAAsI,qBAAqB,EAAEF,qBAA7J;UAAoL,gBAAgB,EAAEnC,gBAAtM;UAAwN,WAAW,EAAEyF,WAArO;UAAkP,cAAc,EAAE7F,cAAlQ;UAAkR,sBAAsB,EAAEJ,sBAA1S;UAAkU,yBAAyB,EAAEE,yBAA7V;UAAwX,gBAAgB,EAAEoH;QAA1Y;UAAA;UAAA;UAAA;QAAA;MAAhC;QAAA;QAAA;QAAA;MAAA,QAfJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ,CAh1BO,CAm3BX;AACH;;GAp3BQxI,G;;KAAAA,G;AAs3BT,eAAeA,GAAf,C,CAEA;AAEA"},"metadata":{},"sourceType":"module"}