{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\freeb\\\\OneDrive\\\\Desktop\\\\Game_Project\\\\Game_Project_Frontend\\\\GameFrontEnd\\\\src\\\\components\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport Home from './Home/Home';\nimport Navbar from './Navbar/Navbar';\nimport Layout from './Layout/Layout';\nimport GameBoard from './GameBoard/GameBoard';\nimport RoomTwo from './RoomTwo/RoomTwo';\nimport RoomThree from './RoomThree/RoomThree';\nimport RoomFour from './RoomFour/RoomFour';\nimport RoomFive from './RoomFive/RoomFive';\nimport RoomSix from './RoomSix/RoomSix';\nimport RoomSeven from './RoomSeven/RoomSeven';\nimport RoomEight from './RoomEight/RoomEight';\nimport RoomNine from './RoomNine/RoomNine';\nimport RoomTen from './RoomTen/RoomTen';\nimport RoomEleven from './RoomEleven/RoomEleven';\nimport RoomTwelve from './RoomTwelve/RoomTwelve';\nimport DamageEffects from './DamageEffects/DamageEffects';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [gameTick, setGameTick] = useState(0);\n  const [breakLoop, setBreakLoop] = useState(0);\n  const [playerHealth, setPlayerHealth] = useState(0);\n  const [playerMaxHealth, setPlayerMaxHealth] = useState(0);\n  const [playerAttackLow, setPlayerAttackLow] = useState(0);\n  const [playerAttackHigh, setPlayerAttackHigh] = useState(0);\n  const [playerSpeed, setPlayerSpeed] = useState(0);\n  const [playerMaxSpeed, setPlayerMaxSpeed] = useState(0);\n  const [playerArmor, setPlayerArmor] = useState(0);\n  const [playerCoins, setPlayerCoins] = useState(0);\n  const [playerHealthPotion, setPlayerHealthPotion] = useState(0);\n  const [playerStaminaPotion, setPlayerStaminaPotion] = useState(0);\n  const [playerAttackTimerState, setPlayerAttackTimerState] = useState(5);\n  const [playerAttackTimerStateMax, setPlayerAttackTimerStateMax] = useState(5);\n  const [playerAttacked, setPlayerAttacked] = useState(1);\n  const [startCombatCheck, setStartCombatCheck] = useState(false);\n  const [enemyOne, setEnemyOne] = useState({\n    enemyMaxHealth: 0,\n    enemyHealth: 0,\n    enemyAttackLow: 0,\n    enemyAttackHigh: 0,\n    enemySpeed: 0,\n    enemyMaxSpeed: 0,\n    enemyArmor: 0,\n    enemyReward: 0\n  }); // const [enemyMaxHealth, setEnemyMaxHealth] = useState(0)\n  // const [enemyHealth, setEnemyHealth] = useState(0)\n  // const [enemyAttackLow, setEnemyAttackLow] = useState(0)\n  // const [enemyAttackHigh, setEnemyAttackHigh] = useState(0)\n  // const [enemySpeed, setEnemySpeed] = useState(0)\n  // const [enemyMaxSpeed, setEnemyMaxSpeed] = useState(0)\n  // const [enemyArmor, setEnemyArmor] = useState(0)\n  // const [enemyReward, setEnemyReward] = useState(0)\n\n  const [numberOfEnemiesInRoom, setNumberOfEnemiesInRoom] = useState(0); // const [enemyDamageDone, setEnemyDamageDone] = useState(0)\n\n  const [currentRoom, setCurrentRoom] = useState(0);\n  const [roomTwoStatus, setRoomTwoStatus] = useState(0); // class App extends Component {\n  //     constructor(props) {\n  //         super(props);\n  //         this.state = {\n  //             roomTime: 0,\n  //             roomBreakLoop: 0,\n  //             breakLoop: 0,\n  //             gameTick: -1,\n  //             playerHealth: 0,\n  //             maxPlayerHealth: 0,\n  //             playerAttackLow: 0,\n  //             playerAttackHigh: 0,\n  //             playerSpeed: -1,\n  //             maxPlayerSpeed: 0,\n  //             playerArmor: 0,\n  //             playerCoins: 0,\n  //             playerHealthPotion: 0,\n  //             playerStaminaPotion: 0,\n  //             healthPotionEffect: 25,\n  //             playerDamageDone: 0,\n  //             playerAttackTimerState: 5,\n  //             playerAttackTimerStateMax: 5,\n  //             enemyDamageDone: 0,\n  //             enemyAlive: 0,\n  //             enemyMaxHealth: 0,\n  //             enemyHealth: 0,\n  //             enemyAttackLow: 0,\n  //             enemyAttackHigh: 0,\n  //             enemySpeed: 0,\n  //             enemyMaxSpeed: 0,\n  //             enemyArmor: 0,\n  //             enemyReward: 0,\n  //             enemyRewardCheck: 0,\n  //             enemy2MaxHealth: 0,\n  //             enemy2Health: 0,\n  //             enemy2AttackLow: 0,\n  //             enemy2AttackHigh: 0,\n  //             enemy2Speed: 0,\n  //             enemy2Armor: 0,\n  //             enemy2Reward: 0,\n  //             enemy2RewardCheck: 0,\n  //             enemy3MaxHealth: 0,\n  //             enemy3Health: 0,\n  //             enemy3AttackLow: 0,\n  //             enemy3AttackHigh: 0,\n  //             enemy3Speed: 0,\n  //             enemy3Armor: 0,\n  //             enemy3Reward: 0,\n  //             enemy3RewardCheck: 0,\n  //             numberOfEnemiesInRoom: 0,\n  //             roomTwoStatus: 0,\n  //             roomThreeStatus: 0,\n  //             roomFourStatus: 0,\n  //             roomFiveStatus: 0,\n  //             roomSixStatus: 0,\n  //             roomSevenStatus: 0,\n  //             roomEightStatus: 0,\n  //             roomNineStatus: 0,\n  //             roomTenStatus: 0,\n  //             roomElevenStatus: 0,\n  //             roomTwelveStatus:0,\n  //             currentRoom: 0,\n  //             currentRoomStatus: 0,\n  //             startCombatCheck: false,\n  //             playerAttacked: 1,\n  //         }\n  //     }\n\n  function devButton() {\n    setPlayerHealth(playerMaxHealth);\n    setPlayerAttackHigh(prevPlayerAttackHigh => prevPlayerAttackHigh + 5);\n    setPlayerCoins(playerCoins + 100);\n  } // useHealthPotion = () => {\n  //     if(this.state.playerHealthPotion <= 0){\n  //         return(alert(\"You are out of health potions!\"))\n  //     }\n  //     if(this.state.playerHealth + this.state.healthPotionEffect > this.state.maxPlayerHealth){\n  //         this.setState({\n  //             playerHealthPotion: this.state.playerHealthPotion - 1,\n  //             playerHealth: this.state.maxPlayerHealth,\n  //         })\n  //     } else {\n  //         this.setState({\n  //             playerHealthPotion: this.state.playerHealthPotion - 1,\n  //             playerHealth: this.state.playerHealth + this.state.healthPotionEffect,\n  //         })\n  //     }\n  // }\n  // useStaminaPotion = () => {\n  //     if(this.state.playerStaminaPotion <= 0){\n  //         return(alert(\"You are out of stamina potions!\"))\n  //     }\n  //     if(this.state.playerSpeed === this.state.maxPlayerSpeed){\n  //         return(alert(\"You're already at max speed!\"))\n  //     } else {\n  //         this.setState({\n  //             playerStaminaPotion: this.state.playerStaminaPotion - 1,\n  //             playerSpeed: this.state.maxPlayerSpeed,\n  //         })\n  //     }\n  // }\n\n\n  function buyFromStore(item) {\n    if (item === \"health\") {\n      if (playerCoins >= 5) {\n        setPlayerCoins(prevPlayerCoins => prevPlayerCoins - 5);\n        setPlayerMaxHealth(prevPlayerMaxHealth => prevPlayerMaxHealth + 10);\n      } else {\n        alert(\"You can't afford a health upgrade.\");\n      }\n    } // if(item === \"attackLow\"){\n    //     if(this.state.playerCoins >= 6 & this.state.playerAttackLow < this.state.playerAttackHigh){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 6,\n    //             playerAttackLow: this.state.playerAttackLow + 1,\n    //         })\n    //     } \n    //     if(this.state.playerAttackLow >= this.state.playerAttackHigh){\n    //         alert(\"Your minimum attack can not exceed you maximum attack.\")\n    //     }\n    //     if(this.state.playerCoins < 6){\n    //         alert(\"You can't afford a minimum attack upgrade.\")\n    //     }\n    // }\n    // if(item === \"attackHigh\"){\n    //     if(this.state.playerCoins >= 3){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 3,\n    //             playerAttackHigh: this.state.playerAttackHigh + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a maximum attack upgrade.\")\n    //     }\n    // }\n    // if(item === \"speed\"){\n    //     if(this.state.playerCoins >= 2){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 2,\n    //             maxPlayerSpeed: this.state.maxPlayerSpeed + 1,\n    //             playerSpeed: this.state.playerSpeed + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a speed upgrade.\")\n    //     }\n    // }\n    // if(item === \"armor\"){\n    //     if(this.state.playerCoins >= 3){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 3,\n    //             playerArmor: this.state.playerArmor + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford an armor upgrade.\")\n    //     }\n    // }\n    // if(item === \"healthPotion\"){\n    //     if(this.state.playerHealthPotion >= 10){\n    //         return (alert (\"You can only have up to ten health potions.\"))\n    //     }\n    //     if(this.state.playerCoins >= 2){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 2,\n    //             playerHealthPotion: this.state.playerHealthPotion + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a health potion.\")\n    //     }\n    // }\n    // if(item === \"staminaPotion\"){\n    //     if(this.state.playerStaminaPotion >= 8){\n    //         return (alert(\"You can only have up to eight stamina potions.\"))\n    //     }\n    //     if(this.state.playerCoins >= 1){\n    //         this.setState({\n    //             playerCoins: this.state.playerCoins - 1,\n    //             playerStaminaPotion: this.state.playerStaminaPotion + 1,\n    //         })\n    //     } else {\n    //         alert(\"You can't afford a stamina potion.\")\n    //     }\n    // }\n\n  } // resetRoomStatus = () => {\n  //     this.setState({\n  //         roomTwoStatus: 0,\n  //         roomThreeStatus: 0,\n  //         roomFiveStatus: 0,\n  //         roomSixStatus: 0,\n  //         roomSevenStatus: 0,\n  //         roomNineStatus: 0,\n  //         roomTenStatus: 0,\n  //         roomElevenStatus: 0,\n  //         enemyRewardCheck: 0,\n  //         enemy2RewardCheck: 0,\n  //         enemy3RewardCheck: 0,\n  //         startCombatCheck: false,\n  //         playerAttacked: 1,\n  //         playerSpeed: this.state.maxPlayerSpeed,\n  //     })\n  // }\n\n\n  function pickClass(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion) {\n    console.log(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion);\n    setPlayerHealth(health);\n    setPlayerMaxHealth(maxHealth);\n    setPlayerAttackLow(attackLow);\n    setPlayerAttackHigh(attackHigh);\n    setPlayerSpeed(speed);\n    setPlayerMaxSpeed(maxSpeed);\n    setPlayerArmor(armor);\n    setPlayerCoins(coins);\n    setPlayerHealthPotion(healthPotion);\n    setPlayerStaminaPotion(staminaPotion);\n    gameTime();\n  }\n\n  function createEnemy(maxHealth, health, attackLow, attackHigh, speed, armor, reward, maxHealth2, health2, attack2Low, attack2High, speed2, armor2, reward2, maxHealth3, health3, attack3Low, attack3High, speed3, armor3, reward3, numberOfEnemiesInRoom) {\n    setEnemyOne(prevEnemyOne => {\n      return { ...prevEnemyOne,\n        enemyMaxHealth: maxHealth,\n        enemyHealth: health,\n        enemyAttackLow: attackLow,\n        enemyAttackHigh: attackHigh,\n        enemySpeed: speed,\n        enemyMaxSpeed: speed,\n        enemyArmor: armor,\n        enemyReward: reward\n      };\n    }); // setEnemyMaxHealth(maxHealth)\n    // setEnemyHealth(health)\n    // setEnemyAttackLow(attackLow)\n    // setEnemyAttackHigh(attackHigh)\n    // setEnemySpeed(speed)\n    // setEnemyMaxSpeed(speed)\n    // setEnemyArmor(armor)\n    // setEnemyReward(reward)\n\n    setNumberOfEnemiesInRoom(numberOfEnemiesInRoom);\n  } // createEnemy = (maxHealth, health, attackLow, attackHigh, speed, armor, reward, maxHealth2, health2, attack2Low, attack2High, speed2, armor2, reward2, maxHealth3, health3, attack3Low, attack3High, speed3, armor3, reward3, numberOfEnemiesInRoom) => {\n  //     this.setState({\n  //         enemyMaxHealth: maxHealth,\n  //         enemyHealth: health,\n  //         enemyAttackLow: attackLow,\n  //         enemyAttackHigh: attackHigh,\n  //         enemySpeed: speed,\n  //         enemyMaxSpeed: speed,\n  //         enemyArmor: armor,\n  //         enemyReward: reward,\n  //         enemy2MaxHealth: maxHealth2,\n  //         enemy2Health: health2,\n  //         enemy2AttackLow: attack2Low,\n  //         enemy2AttackHigh: attack2High,\n  //         enemy2Speed: speed2,\n  //         enemy2Armor: armor2,\n  //         enemy2Reward: reward2,\n  //         enemy3MaxHealth: maxHealth3,\n  //         enemy3Health: health3,\n  //         enemy3AttackLow: attack3Low,\n  //         enemy3AttackHigh: attack3High,\n  //         enemy3Speed: speed3,\n  //         enemy3Armor: armor3,\n  //         enemy3Reward: reward3,\n  //         numberOfEnemiesInRoom: numberOfEnemiesInRoom,\n  //     })\n  // }\n  //                         // *ROOM MOVEMENT, CREATES ENEMIES FOR NEXT ROOM, ACCOUNTS FOR AND CHANGES PLAYER SPEED, STARTS ROOM TIMER\n\n\n  function roomMovement(nowCurrentRoom) {\n    setCurrentRoom(nowCurrentRoom);\n\n    if (playerSpeed > 0) {\n      setPlayerSpeed(prevPlayerSpeed => prevPlayerSpeed - 1);\n    }\n\n    if (nowCurrentRoom === 2) {\n      createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);\n    }\n  } // roomMovement = (currentRoom) => {\n  //     this.roomTime()\n  //     if(this.state.playerSpeed > 0){\n  //         this.setState({\n  //             currentRoom: currentRoom,\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             enemyRewardCheck: 0,\n  //             enemy2RewardCheck: 0,\n  //             enemy3RewardCheck: 0,\n  //             playerDamageDone: 0,\n  //             enemyDamageDone: 0,\n  //             playerAttacked: 1,\n  //         })\n  //     }\n  //     if(this.state.playerSpeed <= 0){\n  //         this.playerHasNoSpeed()\n  //     }\n  //     // ?enemyMaxHealth, EnemyHealth, enemyAttackLow, enemyAttackHigh, enemySpeed, enemyArmor, enemyReward\n  //     if(currentRoom === 2 & this.state.roomTwoStatus === 0){\n  //         this.createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Circle 20, 2, 3, 1, 1, 1\n  //         }\n  //     if(currentRoom === 3 & this.state.roomThreeStatus === 0){\n  //         this.createEnemy(15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Square 15, 4, 5, 2, 2, 2\n  //     }\n  //     if(currentRoom === 4 & this.state.roomFourStatus === 0){\n  //         this.createEnemy(50, 50, 5, 7, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Boss Triangle\n  //     }\n  //     if(currentRoom === 5 & this.state.roomFiveStatus === 0){\n  //         this.createEnemy(15, 15, 10, 12, 2, 5, 25, 10, 10, 3, 5, 9, 4, 10, 0, 0, 0, 0, 0, 0, 0, 2) //Parallelogram 15, 10, 12, 2, 5, 25 - Trapezium 10, 3, 5, 9, 4, 10\n  //     }\n  //     if(currentRoom === 6 & this.state.roomSixStatus === 0){\n  //         this.createEnemy(20, 20, 2, 3, 1, 1, 1, 20, 20, 2, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2) //Two Circles\n  //     }\n  //     if(currentRoom === 7 & this.state.roomSevenStatus === 0){\n  //         this.createEnemy(15, 15, 4, 5, 2, 2, 2, 15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2) // Two Squares\n  //     }\n  //     if(currentRoom === 8 & this.state.roomEightStatus === 0){\n  //         this.createEnemy(80, 80, 6, 8, 3, 4, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One BOSS pentagon\n  //     }\n  //     if(currentRoom === 9 & this.state.roomNineStatus === 0){\n  //         this.createEnemy(30, 30, 4, 5, 2, 2, 10, 15, 15, 10, 14, 2, 5, 25, 4, 4, 1, 5, 10, 10, 5, 3) //Semi-Circle - Parallelogram - Trapezium\n  //     }\n  //     if(currentRoom === 10 & this.state.roomTenStatus === 0){\n  //         this.createEnemy(100, 100, 4, 7, 2, 2, 20, 100, 100, 4, 7, 2, 2, 20, 0, 0, 0, 0, 0, 0, 0, 2) //Two Hexagons\n  //     }\n  //     if(currentRoom === 11 & this.state.roomElevenStatus === 0){\n  //         this.createEnemy(50, 50, 5, 8, 4, 3, 15, 50, 50, 5, 8, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 2)\n  //     }\n  //     if(currentRoom === 12 & this.state.roomTwelveStatus === 0){\n  //         this.createEnemy(500, 500, 15, 20, 8, 8, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)\n  //     }\n  // }\n  //                                         // *TIMED COMBAT\n\n\n  function startCombat() {\n    setStartCombatCheck(true);\n    enemyTimedCombatSequence();\n    playerAttackTimer(1);\n  } // startCombat = () => {\n  //     this.setState({\n  //         startCombatCheck: true,\n  //     })\n  //     this.enemyTimedCombatSequenceTest()\n  //     this.playerAttackTimer(1)\n  // }\n\n\n  function playerAttackTimer(charged) {\n    if (breakLoop < 300 & playerAttackTimerState > 0 & charged === 1) {\n      setPlayerAttackTimerState(prevPlayerAttackTimerState => prevPlayerAttackTimerState - 1);\n      console.log(\"PLAYER ATTACK TIMER RUNNING\");\n      setTimeout(() => {\n        playerAttackTimer(1);\n      }, 1000);\n    } else {\n      setPlayerAttackTimerState(playerAttackTimerStateMax);\n      setPlayerAttacked(2);\n      return;\n    }\n  } // rechargeAttackMove = () => {\n  //     this.setState({\n  //         playerAttacked: 1,\n  //     })\n  //     this.playerAttackTimer(1)\n  // }\n\n\n  function enemyTimedCombatSequence() {\n    console.log(\"EnemyCombatTimer\");\n\n    if (breakLoop < 60) {\n      if (enemySpeed >= 0 & enemyHealth > 0) {\n        setEnemySpeed(prevEnemySpeed => prevEnemySpeed - 1);\n      }\n\n      if (enemyHealth >= 0) {\n        setTimeout(() => {\n          enemyTimedCombatSequence();\n        }, 1000);\n      }\n    }\n  }\n\n  function playerAttackRandomizer(playerAttackLow, playerAttackHigh) {\n    return Math.floor(Math.random() * (playerAttackHigh - playerAttackLow + 1) + playerAttackLow);\n  }\n\n  function enemyCounterAttack(currentPlayerAttack) {\n    var currentEnemyAttack = currentEnemyAttackRandomizer(enemyAttackLow, enemyAttackHigh) - playerArmor; // var currentEnemy2Attack = currentEnemyAttackRandomizer(enemy2AttackLow, enemy2AttackHigh) - playerArmor\n    // var currentEnemy3Attack = currentEnemyAttackRandomizer(enemy3AttackLow, enemy3AttackHigh) - playerArmor\n\n    if (currentEnemyAttack <= 0) {\n      currentEnemyAttack = 1;\n    } // if(currentEnemy2Attack <= 0){\n    //     currentEnemy2Attack = 1\n    // }\n    // if(currentEnemy3Attack <= 0){\n    //     currentEnemy3Attack = 1\n    // }\n\n\n    if (enemyHealth - currentPlayerAttack > 0) {\n      playerTakeDamage(currentEnemyAttack);\n    } // if(enemy2Health - currentPlayerAttack > 0){\n    //     playerDamageTaken = playerDamageTaken + currentEnemy2Attack\n    // }\n    // if(enemy3Health - currentPlayerAttack > 0){\n    //     playerDamageTaken = playerDamageTaken + currentEnemy3Attack\n    // }\n\n  }\n\n  function currentEnemyAttackRandomizer(enemyAttackLow, enemyAttackHigh) {\n    return Math.floor(Math.random() * (enemyAttackHigh - enemyAttackLow + 1) + enemyAttackLow);\n  }\n\n  function playerTakeDamage(damageTaken) {\n    setPlayerHealth(playerHealth - damageTaken);\n    showToastMessageRed(damageTaken);\n  }\n\n  function showToastMessageRed(damageTaken) {\n    console.log(\"TOOOOOOOOOOOOOOOOOAAAAAAAAAASSSSSSSSSTTTTTTTTT\");\n    toast.error(`You took ${damageTaken} damage !`, {\n      position: toast.POSITION.TOP_RIGHT\n    });\n  }\n\n  useEffect(() => {\n    if (enemySpeed < 0) {\n      setEnemySpeed(enemyMaxSpeed);\n      var currentPlayerAttack = playerAttackRandomizer(playerAttackLow, playerAttackHigh);\n      enemyCounterAttack(currentPlayerAttack);\n    }\n\n    console.log(\"USE EFFECT RAN\");\n  }); //                                         // !END TIMED COMBAT\n  // playerHasNoSpeed = () => {\n  //     alert(\"You have no more speed! You took 10 damage. Return to Room One or use a stamina potion to regain your speed.\")\n  //     this.setState({\n  //         playerHealth: this.state.playerHealth - 10,\n  //         enemyRewardCheck: 0,\n  //         enemy2RewardCheck: 0,\n  //         enemy3RewardCheck: 0,\n  //     })\n  // }\n  // !END ROOM MOVEMENT AND PLAYER SPEED\n  //                                         // *BEGINNING OF COMBAT ATTACK SEQUENCE\n  // playerAttackMove = (attackEnemy) => {\n  //     var currentPlayerAttack = this.playerAttackRandomizer(this.state.playerAttackLow, this.state.playerAttackHigh)\n  //     if(attackEnemy === 1 & this.state.enemyHealth <= 0){\n  //         this.deadCheck(currentPlayerAttack, attackEnemy)\n  //         alert(\"You killed this enemy!\")\n  //     }\n  //     if(attackEnemy === 1 & this.state.enemyHealth > 0){\n  //         currentPlayerAttack = currentPlayerAttack - this.state.enemyArmor\n  //         if(currentPlayerAttack <= 0){\n  //             currentPlayerAttack = 1\n  //         }\n  //         this.playerAttackMoveSetState(1, currentPlayerAttack)\n  //         this.deadCheck(currentPlayerAttack, attackEnemy)\n  //     }\n  //     if(attackEnemy === 2 & this.state.enemy2Health <= 0){\n  //         this.deadCheck(currentPlayerAttack, attackEnemy)\n  //         alert(\"You killed this enemy!\")\n  //     }\n  //     if(attackEnemy === 2 & this.state.enemy2Health > 0){\n  //         currentPlayerAttack = currentPlayerAttack - this.state.enemy2Armor\n  //         if(currentPlayerAttack <= 0){\n  //             currentPlayerAttack = 1\n  //         }\n  //         this.playerAttackMoveSetState(2, currentPlayerAttack)\n  //         this.deadCheck(currentPlayerAttack, attackEnemy)\n  //     }\n  //     if(attackEnemy === 3 & this.state.enemy3Health <= 0){\n  //         this.deadCheck(currentPlayerAttack, attackEnemy)\n  //         alert(\"You killed this enemy!\")\n  //     }\n  //     if(attackEnemy === 3 & this.state.enemy3Health > 0){\n  //         currentPlayerAttack = currentPlayerAttack - this.state.enemy3Armor\n  //         if(currentPlayerAttack <= 0){\n  //             currentPlayerAttack = 1\n  //         }\n  //         this.playerAttackMoveSetState(3, currentPlayerAttack)\n  //         this.deadCheck(currentPlayerAttack, attackEnemy)\n  //     }\n  // }\n  // playerAttackMoveSetState = (attackEnemyNumber, currentPlayerAttack) => {\n  //     if(attackEnemyNumber === 1){\n  //         this.setState({\n  //             enemyHealth: this.state.enemyHealth - currentPlayerAttack,\n  //             playerDamageDone: currentPlayerAttack,\n  //             playerAttacked: 3,\n  //             playerAttackTimerState: this.state.playerAttackTimerStateMax,\n  //             })\n  //             this.showToastMessage(currentPlayerAttack, attackEnemyNumber)\n  //     }\n  //     if(attackEnemyNumber === 2){\n  //         this.setState({\n  //             enemy2Health: this.state.enemy2Health - currentPlayerAttack,\n  //             playerDamageDone: currentPlayerAttack,\n  //             })\n  //             this.showToastMessage(currentPlayerAttack, attackEnemyNumber)\n  //     }\n  //     if(attackEnemyNumber === 3){\n  //         this.setState({\n  //             enemy3Health: this.state.enemy3Health - currentPlayerAttack,\n  //             playerDamageDone: currentPlayerAttack,\n  //             })\n  //             this.showToastMessage(currentPlayerAttack, attackEnemyNumber)\n  //     }\n  // }\n  // deadCheck = (currentPlayerAttack, attackEnemy) => {\n  //     if(this.state.enemyHealth - currentPlayerAttack <= 0){\n  //         if(this.state.enemyRewardCheck === 0 & attackEnemy === 1){\n  //             this.deadCheckSetState(1)\n  //         }\n  //     }\n  //     if(this.state.enemy2Health - currentPlayerAttack <= 0) {\n  //         if(this.state.enemy2RewardCheck === 0 & attackEnemy === 2){\n  //             this.deadCheckSetState(2)\n  //         }\n  //     }\n  //     if(this.state.enemy3Health - currentPlayerAttack <= 0 & attackEnemy === 3) {\n  //         if(this.state.enemy3RewardCheck === 0){\n  //             this.deadCheckSetState(3)\n  //         }\n  //     }\n  //     if(this.state.enemyHealth <= 0 & this.state.enemy2Health <= 0 & this.state.enemy3Health <= 0){\n  //         this.setCurrentRoomStatusClearEnemy()\n  //     }\n  //     // if(this.state.enemyHealth + this.state.enemy2Health + this.state.enemy3Health > 0){\n  //     //     this.enemyCounterAttack(currentPlayerAttack)\n  //     // }\n  // }\n  // deadCheckSetState = (enemyNumber) => {\n  //     if(enemyNumber === 1){\n  //         this.setState({\n  //             playerCoins: this.state.playerCoins + this.state.enemyReward,\n  //             enemyRewardCheck: 1,\n  //             enemyHealth: 0,\n  //         })\n  //     }\n  //     if(enemyNumber === 2){\n  //         this.setState({\n  //             playerCoins: this.state.playerCoins + this.state.enemy2Reward,\n  //             enemy2RewardCheck: 1,\n  //             enemy2Health: 0,\n  //         })\n  //     }\n  //     if(enemyNumber === 3){\n  //         this.setState({\n  //             playerCoins: this.state.playerCoins + this.state.enemy3Reward,\n  //             enemy3RewardCheck: 1,\n  //             enemy3Health: 0,\n  //         })\n  //     }\n  // }\n  // setCurrentRoomStatusClearEnemy = () => {\n  //     if(this.state.currentRoom === 2){\n  //         this.setState({\n  //             roomTwoStatus: 1,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 3){\n  //         this.setState({\n  //             roomThreeStatus: 1,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 4){\n  //         this.setState({\n  //             roomFourStatus: 1,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 5){\n  //         this.setState({\n  //             roomFiveStatus: 1,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 6){\n  //         this.setState({\n  //             roomSixStatus: 1,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 7){\n  //         this.setState({\n  //             roomSevenStatus: 1,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 8){\n  //         this.setState({\n  //             roomEightStatus: 1,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 9){\n  //         this.setState({\n  //             roomNineStatus: 1,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 10){\n  //         this.setState({\n  //             roomTenStatus: 1,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 11){\n  //         this.setState({\n  //             roomElevenStatus: 1,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 12){\n  //         this.setState({\n  //             roomTwelveStatus: 1,\n  //         })\n  //     }\n  // }\n  //                                         // !END OF ATTACK SEQUENCE\n  //                                         // *BEGINNING OF DODGE SEQUENCE\n  // playerDodgeMove = () => {\n  //     var playerSpeedThisDodgeAttack = Math.floor(Math.random() * (100 - this.state.playerSpeed + 1) + this.state.playerSpeed)\n  //     var enemySpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemySpeed + 1) + this.state.enemySpeed)\n  //     var enemy2SpeedThisRound = 0\n  //     var enemy3SpeedThisRound = 0\n  //     var playerDamageTaken = 0\n  //     if(this.state.playerSpeed > 0){\n  //         if(this.state.enemy2Speed > 0){\n  //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy2Speed + 1) + this.state.enemy2Speed)\n  //         }\n  //         if(this.state.enemy3Speed > 0){\n  //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy3Speed + 1) + this.state.enemy3Speed)\n  //         }\n  //         console.log(playerSpeedThisDodgeAttack)\n  //         console.log(enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound)\n  //         if(playerSpeedThisDodgeAttack > enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\n  //             console.log(\"Successful Dodge\")\n  //             this.enemyWithMostHealth()\n  //             }\n  //         if(playerSpeedThisDodgeAttack <= enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\n  //             console.log(\"Player Missed Dodge\")\n  //             this.playerMissedDodge()\n  //             }\n  //         }\n  //     if(this.state.playerSpeed <= 0){\n  //         alert(\"You have no speed to dodge!\")\n  //     }\n  // }\n  //     // player attacks enemy with highest health with full attack power if the ransomizer is greater than the enemies; speed \n  // enemyWithMostHealth = () => {\n  //     var highEnemyHealth = Math.max(this.state.enemyHealth, this.state.enemy2Health, this.state.enemy3Health)\n  //     if(highEnemyHealth === this.state.enemyHealth){\n  //         this.setState({\n  //             enemyHealth: this.state.enemyHealth - (this.state.playerAttackHigh - this.state.enemyArmor),\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\n  //             })\n  //             return\n  //     }\n  //     if(highEnemyHealth === this.state.enemy2Health){\n  //         this.setState({\n  //             enemy2Health: this.state.enemy2Health - (this.state.playerAttackHigh - this.state.enemy2Armor),\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\n  //             })\n  //             return\n  //     }\n  //     if(highEnemyHealth === this.state.enemy3Health){\n  //         this.setState({\n  //             enemy3Health: this.state.enemy3Health - (this.state.playerAttackHigh - this.state.enemy3Armor),\n  //             playerSpeed: this.state.playerSpeed - 1,\n  //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\n  //             })\n  //             return\n  //     }\n  // }\n  // playerMissedDodge = () => {\n  //     var currentEnemyAttack = this.currentEnemyAttackRandomizer(this.state.enemyAttackLow, this.state.enemyAttackHigh)\n  //     var currentEnemy2Attack = this.currentEnemyAttackRandomizer(this.state.enemy2AttackLow, this.state.enemy2AttackHigh)\n  //     var currentEnemy3Attack = this.currentEnemyAttackRandomizer(this.state.enemy3AttackLow, this.state.enemy3AttackHigh)\n  //     var playerDamage = currentEnemyAttack + currentEnemy2Attack + currentEnemy3Attack\n  //     this.setState({\n  //         playerHealth: this.state.playerHealth - playerDamage,\n  //         playerSpeed: this.state.playerSpeed - 1,\n  //         enemyDamageDone: playerDamage,\n  //         })\n  // }\n  //                                         // !END DODGE SEQUENCE\n  // typeOfEnemyAttack = () => {\n  // }\n  // openChest = () => {\n  //     if(this.state.currentRoom === 4){\n  //         this.setState({\n  //             healthPotionEffect: this.state.healthPotionEffect + 15,\n  //             roomFourStatus: 2,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 8){\n  //         this.setState({\n  //             healthPotionEffect: this.state.healthPotionEffect + 15,\n  //             roomEightStatus: 2,\n  //         })\n  //     }\n  //     if(this.state.currentRoom === 12){\n  //         this.setState({\n  //             healthPotionEffect: this.state.healthPotionEffect + 15,\n  //             roomTwelveStatus: 2,\n  //         })\n  //     }\n  // }\n  //                                         // *ON-SCREEN PROMPTS\n  // showToastMessage = (currentPlayerAttack, attackEnemyNumber) => {\n  //     if(attackEnemyNumber === 1){\n  //         toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 1 !\", {\n  //             position: toast.POSITION.TOP_CENTER\n  //         });\n  //     }\n  //     if(attackEnemyNumber === 2){\n  //         toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 2 !\", {\n  //             position: toast.POSITION.TOP_CENTER\n  //         });\n  //     }\n  //     if(attackEnemyNumber === 3){\n  //         toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 3 !\", {\n  //             position: toast.POSITION.TOP_CENTER\n  //         });\n  //     }\n  // }\n  // *GAME TIMER/BREAKLOOP TIMER\n\n  function gameTime() {\n    setBreakLoop(prevBreakLoop => prevBreakLoop + 1);\n    setGameTick(prevGameTick => prevGameTick + 1);\n\n    if (breakLoop < 300) {\n      setTimeout(() => {\n        gameTime();\n      }, 1000);\n    }\n\n    console.log(`gameTime() ran. gameTick is at ${gameTick}`);\n  } //  !END GAME TIMER\n  //                                         //  *ROOM TIMER\n  // roomTime = () => {\n  //     this.roomTimeSetState()\n  //     if(this.state.roomBreakLoop < 300){\n  //         setTimeout(() => {this.roomTime(); }, 1000);\n  //     }\n  //     console.log(`gameRoomTime() is running. roomTime is at ${this.state.roomTime}`)\n  // }\n  // roomTimeSetState = () => {\n  //     this.setState({\n  //         roomTime: this.state.roomTime + 1,\n  //         roomBreakLoop: this.state.roomBreakLoop + 1,\n  //     })\n  // }\n  // !END ROOM TIMER\n  // render() {\n\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      gameTick: gameTick,\n      playerMaxSpeed: playerMaxSpeed,\n      playerMaxHealth: playerMaxHealth,\n      devButton: devButton,\n      playerHealth: playerHealth,\n      playerAttackLow: playerAttackLow,\n      playerAttackHigh: playerAttackHigh,\n      playerSpeed: playerSpeed,\n      playerArmor: playerArmor,\n      playerCoins: playerCoins,\n      playerHealthPotion: playerHealthPotion,\n      playerStaminaPotion: playerStaminaPotion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 858,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {\n          playerHealth: playerHealth,\n          enemyOne: enemyOne,\n          playerAttackLow: playerAttackLow,\n          playerAttackHigh: playerAttackHigh,\n          playerSpeed: playerSpeed,\n          playerDefense: playerArmor,\n          playerCoins: playerCoins,\n          pickClass: pickClass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 861,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/GameBoard\",\n        element: /*#__PURE__*/_jsxDEV(GameBoard, {\n          buyFromStore: buyFromStore,\n          roomMovement: roomMovement,\n          createEnemy: createEnemy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 863,\n          columnNumber: 55\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 863,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/RoomTwo\",\n        element: /*#__PURE__*/_jsxDEV(RoomTwo, {\n          roomTwoStatus: roomTwoStatus,\n          currentRoom: currentRoom,\n          numberOfEnemiesInRoom: numberOfEnemiesInRoom,\n          startCombatCheck: startCombatCheck,\n          startCombat: startCombat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 53\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 860,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 857,\n    columnNumber: 13\n  }, this); // }\n}\n\n_s(App, \"lbM7fzCvgjMxSx3sSxzJt8vYk9U=\");\n\n_c = App;\nexport default App; // enemyHealth={enemyHealth} enemyMaxHealth={enemyMaxHealth} enemyAttackLow={enemyAttackLow} enemyAttackHigh={enemyAttackHigh} enemySpeed={enemySpeed} enemyMaxSpeed={enemyMaxSpeed} enemyArmor={enemyArmor} enemyReward={enemyReward}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","ReactDOM","useState","useEffect","BrowserRouter","Routes","Route","Link","Home","Navbar","Layout","GameBoard","RoomTwo","RoomThree","RoomFour","RoomFive","RoomSix","RoomSeven","RoomEight","RoomNine","RoomTen","RoomEleven","RoomTwelve","DamageEffects","ToastContainer","toast","App","gameTick","setGameTick","breakLoop","setBreakLoop","playerHealth","setPlayerHealth","playerMaxHealth","setPlayerMaxHealth","playerAttackLow","setPlayerAttackLow","playerAttackHigh","setPlayerAttackHigh","playerSpeed","setPlayerSpeed","playerMaxSpeed","setPlayerMaxSpeed","playerArmor","setPlayerArmor","playerCoins","setPlayerCoins","playerHealthPotion","setPlayerHealthPotion","playerStaminaPotion","setPlayerStaminaPotion","playerAttackTimerState","setPlayerAttackTimerState","playerAttackTimerStateMax","setPlayerAttackTimerStateMax","playerAttacked","setPlayerAttacked","startCombatCheck","setStartCombatCheck","enemyOne","setEnemyOne","enemyMaxHealth","enemyHealth","enemyAttackLow","enemyAttackHigh","enemySpeed","enemyMaxSpeed","enemyArmor","enemyReward","numberOfEnemiesInRoom","setNumberOfEnemiesInRoom","currentRoom","setCurrentRoom","roomTwoStatus","setRoomTwoStatus","devButton","prevPlayerAttackHigh","buyFromStore","item","prevPlayerCoins","prevPlayerMaxHealth","alert","pickClass","health","maxHealth","attackLow","attackHigh","speed","maxSpeed","armor","coins","healthPotion","staminaPotion","console","log","gameTime","createEnemy","reward","maxHealth2","health2","attack2Low","attack2High","speed2","armor2","reward2","maxHealth3","health3","attack3Low","attack3High","speed3","armor3","reward3","prevEnemyOne","roomMovement","nowCurrentRoom","prevPlayerSpeed","startCombat","enemyTimedCombatSequence","playerAttackTimer","charged","prevPlayerAttackTimerState","setTimeout","setEnemySpeed","prevEnemySpeed","playerAttackRandomizer","Math","floor","random","enemyCounterAttack","currentPlayerAttack","currentEnemyAttack","currentEnemyAttackRandomizer","playerTakeDamage","damageTaken","showToastMessageRed","error","position","POSITION","TOP_RIGHT","prevBreakLoop","prevGameTick"],"sources":["C:/Users/freeb/OneDrive/Desktop/Game_Project/Game_Project_Frontend/GameFrontEnd/src/components/App.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useState, useEffect } from 'react'\r\nimport { BrowserRouter, Routes, Route, Link } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Home from './Home/Home';\r\nimport Navbar from './Navbar/Navbar';\r\nimport Layout from './Layout/Layout';\r\nimport GameBoard from './GameBoard/GameBoard';\r\nimport RoomTwo from './RoomTwo/RoomTwo';\r\nimport RoomThree from './RoomThree/RoomThree';\r\nimport RoomFour from './RoomFour/RoomFour';\r\nimport RoomFive from './RoomFive/RoomFive';\r\nimport RoomSix from './RoomSix/RoomSix';\r\nimport RoomSeven from './RoomSeven/RoomSeven';\r\nimport RoomEight from './RoomEight/RoomEight';\r\nimport RoomNine from './RoomNine/RoomNine';\r\nimport RoomTen from './RoomTen/RoomTen';\r\nimport RoomEleven from './RoomEleven/RoomEleven';\r\nimport RoomTwelve from './RoomTwelve/RoomTwelve';\r\nimport DamageEffects from './DamageEffects/DamageEffects';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App() {\r\n    const [gameTick, setGameTick] = useState(0)\r\n    const [breakLoop, setBreakLoop] = useState(0)\r\n    const [playerHealth, setPlayerHealth] = useState(0)\r\n    const [playerMaxHealth, setPlayerMaxHealth] = useState(0)\r\n    const [playerAttackLow, setPlayerAttackLow] = useState(0)\r\n    const [playerAttackHigh, setPlayerAttackHigh] = useState(0)\r\n    const [playerSpeed, setPlayerSpeed] = useState(0)\r\n    const [playerMaxSpeed, setPlayerMaxSpeed] = useState(0)\r\n    const [playerArmor, setPlayerArmor] = useState(0)\r\n    const [playerCoins, setPlayerCoins] = useState(0)\r\n    const [playerHealthPotion, setPlayerHealthPotion] = useState(0)\r\n    const [playerStaminaPotion, setPlayerStaminaPotion] = useState(0)\r\n\r\n    const [playerAttackTimerState, setPlayerAttackTimerState] = useState(5)\r\n    const [playerAttackTimerStateMax, setPlayerAttackTimerStateMax] = useState(5)\r\n    const [playerAttacked, setPlayerAttacked] = useState(1)\r\n\r\n    const [startCombatCheck, setStartCombatCheck] = useState(false)\r\n\r\n    const [enemyOne, setEnemyOne] = useState({\r\n        enemyMaxHealth: 0, \r\n        enemyHealth: 0, \r\n        enemyAttackLow: 0, \r\n        enemyAttackHigh: 0, \r\n        enemySpeed: 0, \r\n        enemyMaxSpeed: 0, \r\n        enemyArmor: 0, \r\n        enemyReward: 0\r\n    })\r\n\r\n    // const [enemyMaxHealth, setEnemyMaxHealth] = useState(0)\r\n    // const [enemyHealth, setEnemyHealth] = useState(0)\r\n    // const [enemyAttackLow, setEnemyAttackLow] = useState(0)\r\n    // const [enemyAttackHigh, setEnemyAttackHigh] = useState(0)\r\n    // const [enemySpeed, setEnemySpeed] = useState(0)\r\n    // const [enemyMaxSpeed, setEnemyMaxSpeed] = useState(0)\r\n    // const [enemyArmor, setEnemyArmor] = useState(0)\r\n    // const [enemyReward, setEnemyReward] = useState(0)\r\n    const [numberOfEnemiesInRoom, setNumberOfEnemiesInRoom] = useState(0)\r\n    // const [enemyDamageDone, setEnemyDamageDone] = useState(0)\r\n\r\n    const[currentRoom, setCurrentRoom] = useState(0)\r\n\r\n    const [roomTwoStatus, setRoomTwoStatus] = useState(0)\r\n\r\n\r\n// class App extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             roomTime: 0,\r\n//             roomBreakLoop: 0,\r\n//             breakLoop: 0,\r\n//             gameTick: -1,\r\n//             playerHealth: 0,\r\n//             maxPlayerHealth: 0,\r\n//             playerAttackLow: 0,\r\n//             playerAttackHigh: 0,\r\n//             playerSpeed: -1,\r\n//             maxPlayerSpeed: 0,\r\n//             playerArmor: 0,\r\n//             playerCoins: 0,\r\n//             playerHealthPotion: 0,\r\n//             playerStaminaPotion: 0,\r\n//             healthPotionEffect: 25,\r\n//             playerDamageDone: 0,\r\n//             playerAttackTimerState: 5,\r\n//             playerAttackTimerStateMax: 5,\r\n//             enemyDamageDone: 0,\r\n//             enemyAlive: 0,\r\n//             enemyMaxHealth: 0,\r\n//             enemyHealth: 0,\r\n//             enemyAttackLow: 0,\r\n//             enemyAttackHigh: 0,\r\n//             enemySpeed: 0,\r\n//             enemyMaxSpeed: 0,\r\n//             enemyArmor: 0,\r\n//             enemyReward: 0,\r\n//             enemyRewardCheck: 0,\r\n//             enemy2MaxHealth: 0,\r\n//             enemy2Health: 0,\r\n//             enemy2AttackLow: 0,\r\n//             enemy2AttackHigh: 0,\r\n//             enemy2Speed: 0,\r\n//             enemy2Armor: 0,\r\n//             enemy2Reward: 0,\r\n//             enemy2RewardCheck: 0,\r\n//             enemy3MaxHealth: 0,\r\n//             enemy3Health: 0,\r\n//             enemy3AttackLow: 0,\r\n//             enemy3AttackHigh: 0,\r\n//             enemy3Speed: 0,\r\n//             enemy3Armor: 0,\r\n//             enemy3Reward: 0,\r\n//             enemy3RewardCheck: 0,\r\n//             numberOfEnemiesInRoom: 0,\r\n//             roomTwoStatus: 0,\r\n//             roomThreeStatus: 0,\r\n//             roomFourStatus: 0,\r\n//             roomFiveStatus: 0,\r\n//             roomSixStatus: 0,\r\n//             roomSevenStatus: 0,\r\n//             roomEightStatus: 0,\r\n//             roomNineStatus: 0,\r\n//             roomTenStatus: 0,\r\n//             roomElevenStatus: 0,\r\n//             roomTwelveStatus:0,\r\n//             currentRoom: 0,\r\n//             currentRoomStatus: 0,\r\n//             startCombatCheck: false,\r\n//             playerAttacked: 1,\r\n//         }\r\n//     }\r\n\r\n    function devButton() {\r\n        setPlayerHealth(playerMaxHealth)\r\n        setPlayerAttackHigh(prevPlayerAttackHigh => prevPlayerAttackHigh + 5)\r\n        setPlayerCoins(playerCoins + 100)\r\n    }\r\n\r\n    // useHealthPotion = () => {\r\n    //     if(this.state.playerHealthPotion <= 0){\r\n    //         return(alert(\"You are out of health potions!\"))\r\n    //     }\r\n    //     if(this.state.playerHealth + this.state.healthPotionEffect > this.state.maxPlayerHealth){\r\n    //         this.setState({\r\n    //             playerHealthPotion: this.state.playerHealthPotion - 1,\r\n    //             playerHealth: this.state.maxPlayerHealth,\r\n    //         })\r\n    //     } else {\r\n    //         this.setState({\r\n    //             playerHealthPotion: this.state.playerHealthPotion - 1,\r\n    //             playerHealth: this.state.playerHealth + this.state.healthPotionEffect,\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // useStaminaPotion = () => {\r\n    //     if(this.state.playerStaminaPotion <= 0){\r\n    //         return(alert(\"You are out of stamina potions!\"))\r\n    //     }\r\n    //     if(this.state.playerSpeed === this.state.maxPlayerSpeed){\r\n    //         return(alert(\"You're already at max speed!\"))\r\n    //     } else {\r\n    //         this.setState({\r\n    //             playerStaminaPotion: this.state.playerStaminaPotion - 1,\r\n    //             playerSpeed: this.state.maxPlayerSpeed,\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    function buyFromStore(item) {\r\n        if(item === \"health\"){\r\n            if(playerCoins >= 5){\r\n                setPlayerCoins(prevPlayerCoins => prevPlayerCoins - 5)\r\n                setPlayerMaxHealth(prevPlayerMaxHealth => prevPlayerMaxHealth + 10)\r\n            } else {\r\n                alert(\"You can't afford a health upgrade.\")\r\n            }\r\n        }\r\n        // if(item === \"attackLow\"){\r\n        //     if(this.state.playerCoins >= 6 & this.state.playerAttackLow < this.state.playerAttackHigh){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 6,\r\n        //             playerAttackLow: this.state.playerAttackLow + 1,\r\n        //         })\r\n        //     } \r\n        //     if(this.state.playerAttackLow >= this.state.playerAttackHigh){\r\n        //         alert(\"Your minimum attack can not exceed you maximum attack.\")\r\n        //     }\r\n        //     if(this.state.playerCoins < 6){\r\n        //         alert(\"You can't afford a minimum attack upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"attackHigh\"){\r\n        //     if(this.state.playerCoins >= 3){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 3,\r\n        //             playerAttackHigh: this.state.playerAttackHigh + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a maximum attack upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"speed\"){\r\n        //     if(this.state.playerCoins >= 2){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 2,\r\n        //             maxPlayerSpeed: this.state.maxPlayerSpeed + 1,\r\n        //             playerSpeed: this.state.playerSpeed + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a speed upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"armor\"){\r\n        //     if(this.state.playerCoins >= 3){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 3,\r\n        //             playerArmor: this.state.playerArmor + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford an armor upgrade.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"healthPotion\"){\r\n        //     if(this.state.playerHealthPotion >= 10){\r\n        //         return (alert (\"You can only have up to ten health potions.\"))\r\n        //     }\r\n        //     if(this.state.playerCoins >= 2){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 2,\r\n        //             playerHealthPotion: this.state.playerHealthPotion + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a health potion.\")\r\n        //     }\r\n        // }\r\n        // if(item === \"staminaPotion\"){\r\n        //     if(this.state.playerStaminaPotion >= 8){\r\n        //         return (alert(\"You can only have up to eight stamina potions.\"))\r\n        //     }\r\n        //     if(this.state.playerCoins >= 1){\r\n        //         this.setState({\r\n        //             playerCoins: this.state.playerCoins - 1,\r\n        //             playerStaminaPotion: this.state.playerStaminaPotion + 1,\r\n        //         })\r\n        //     } else {\r\n        //         alert(\"You can't afford a stamina potion.\")\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    // resetRoomStatus = () => {\r\n    //     this.setState({\r\n    //         roomTwoStatus: 0,\r\n    //         roomThreeStatus: 0,\r\n    //         roomFiveStatus: 0,\r\n    //         roomSixStatus: 0,\r\n    //         roomSevenStatus: 0,\r\n    //         roomNineStatus: 0,\r\n    //         roomTenStatus: 0,\r\n    //         roomElevenStatus: 0,\r\n    //         enemyRewardCheck: 0,\r\n    //         enemy2RewardCheck: 0,\r\n    //         enemy3RewardCheck: 0,\r\n    //         startCombatCheck: false,\r\n    //         playerAttacked: 1,\r\n    //         playerSpeed: this.state.maxPlayerSpeed,\r\n    //     })\r\n    // }\r\n\r\n    function pickClass(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion) {\r\n        console.log(health, maxHealth, attackLow, attackHigh, speed, maxSpeed, armor, coins, healthPotion, staminaPotion)\r\n        setPlayerHealth(health)\r\n        setPlayerMaxHealth(maxHealth)\r\n        setPlayerAttackLow(attackLow)\r\n        setPlayerAttackHigh(attackHigh)\r\n        setPlayerSpeed(speed)\r\n        setPlayerMaxSpeed(maxSpeed)\r\n        setPlayerArmor(armor)\r\n        setPlayerCoins(coins)\r\n        setPlayerHealthPotion(healthPotion)\r\n        setPlayerStaminaPotion(staminaPotion)\r\n        gameTime()\r\n    }\r\n\r\n    function createEnemy(maxHealth, health, attackLow, attackHigh, speed, armor, reward, maxHealth2, health2, attack2Low, attack2High, speed2, armor2, reward2, maxHealth3, health3, attack3Low, attack3High, speed3, armor3, reward3, numberOfEnemiesInRoom) {\r\n        setEnemyOne(prevEnemyOne => {\r\n            return {...prevEnemyOne, \r\n                enemyMaxHealth: maxHealth,\r\n                enemyHealth: health,\r\n                enemyAttackLow: attackLow,\r\n                enemyAttackHigh: attackHigh,\r\n                enemySpeed: speed,\r\n                enemyMaxSpeed: speed,\r\n                enemyArmor: armor,\r\n                enemyReward: reward\r\n            }\r\n        })\r\n        // setEnemyMaxHealth(maxHealth)\r\n        // setEnemyHealth(health)\r\n        // setEnemyAttackLow(attackLow)\r\n        // setEnemyAttackHigh(attackHigh)\r\n        // setEnemySpeed(speed)\r\n        // setEnemyMaxSpeed(speed)\r\n        // setEnemyArmor(armor)\r\n        // setEnemyReward(reward)\r\n        setNumberOfEnemiesInRoom(numberOfEnemiesInRoom)\r\n    }\r\n\r\n    // createEnemy = (maxHealth, health, attackLow, attackHigh, speed, armor, reward, maxHealth2, health2, attack2Low, attack2High, speed2, armor2, reward2, maxHealth3, health3, attack3Low, attack3High, speed3, armor3, reward3, numberOfEnemiesInRoom) => {\r\n    //     this.setState({\r\n    //         enemyMaxHealth: maxHealth,\r\n    //         enemyHealth: health,\r\n    //         enemyAttackLow: attackLow,\r\n    //         enemyAttackHigh: attackHigh,\r\n    //         enemySpeed: speed,\r\n    //         enemyMaxSpeed: speed,\r\n    //         enemyArmor: armor,\r\n    //         enemyReward: reward,\r\n    //         enemy2MaxHealth: maxHealth2,\r\n    //         enemy2Health: health2,\r\n    //         enemy2AttackLow: attack2Low,\r\n    //         enemy2AttackHigh: attack2High,\r\n    //         enemy2Speed: speed2,\r\n    //         enemy2Armor: armor2,\r\n    //         enemy2Reward: reward2,\r\n    //         enemy3MaxHealth: maxHealth3,\r\n    //         enemy3Health: health3,\r\n    //         enemy3AttackLow: attack3Low,\r\n    //         enemy3AttackHigh: attack3High,\r\n    //         enemy3Speed: speed3,\r\n    //         enemy3Armor: armor3,\r\n    //         enemy3Reward: reward3,\r\n    //         numberOfEnemiesInRoom: numberOfEnemiesInRoom,\r\n    //     })\r\n    // }\r\n\r\n    //                         // *ROOM MOVEMENT, CREATES ENEMIES FOR NEXT ROOM, ACCOUNTS FOR AND CHANGES PLAYER SPEED, STARTS ROOM TIMER\r\n\r\n    function roomMovement(nowCurrentRoom){\r\n        setCurrentRoom(nowCurrentRoom)\r\n        if(playerSpeed > 0){\r\n            setPlayerSpeed(prevPlayerSpeed => prevPlayerSpeed - 1)\r\n        }\r\n        if(nowCurrentRoom === 2) {\r\n            createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)\r\n        }\r\n    }\r\n    // roomMovement = (currentRoom) => {\r\n    //     this.roomTime()\r\n    //     if(this.state.playerSpeed > 0){\r\n    //         this.setState({\r\n    //             currentRoom: currentRoom,\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             enemyRewardCheck: 0,\r\n    //             enemy2RewardCheck: 0,\r\n    //             enemy3RewardCheck: 0,\r\n    //             playerDamageDone: 0,\r\n    //             enemyDamageDone: 0,\r\n    //             playerAttacked: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.playerSpeed <= 0){\r\n    //         this.playerHasNoSpeed()\r\n    //     }\r\n    //     // ?enemyMaxHealth, EnemyHealth, enemyAttackLow, enemyAttackHigh, enemySpeed, enemyArmor, enemyReward\r\n    //     if(currentRoom === 2 & this.state.roomTwoStatus === 0){\r\n    //         this.createEnemy(20, 20, 2, 3, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Circle 20, 2, 3, 1, 1, 1\r\n    //         }\r\n    //     if(currentRoom === 3 & this.state.roomThreeStatus === 0){\r\n    //         this.createEnemy(15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Square 15, 4, 5, 2, 2, 2\r\n    //     }\r\n    //     if(currentRoom === 4 & this.state.roomFourStatus === 0){\r\n    //         this.createEnemy(50, 50, 5, 7, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One Boss Triangle\r\n    //     }\r\n    //     if(currentRoom === 5 & this.state.roomFiveStatus === 0){\r\n    //         this.createEnemy(15, 15, 10, 12, 2, 5, 25, 10, 10, 3, 5, 9, 4, 10, 0, 0, 0, 0, 0, 0, 0, 2) //Parallelogram 15, 10, 12, 2, 5, 25 - Trapezium 10, 3, 5, 9, 4, 10\r\n    //     }\r\n    //     if(currentRoom === 6 & this.state.roomSixStatus === 0){\r\n    //         this.createEnemy(20, 20, 2, 3, 1, 1, 1, 20, 20, 2, 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2) //Two Circles\r\n    //     }\r\n    //     if(currentRoom === 7 & this.state.roomSevenStatus === 0){\r\n    //         this.createEnemy(15, 15, 4, 5, 2, 2, 2, 15, 15, 4, 5, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2) // Two Squares\r\n    //     }\r\n    //     if(currentRoom === 8 & this.state.roomEightStatus === 0){\r\n    //         this.createEnemy(80, 80, 6, 8, 3, 4, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1) //One BOSS pentagon\r\n    //     }\r\n    //     if(currentRoom === 9 & this.state.roomNineStatus === 0){\r\n    //         this.createEnemy(30, 30, 4, 5, 2, 2, 10, 15, 15, 10, 14, 2, 5, 25, 4, 4, 1, 5, 10, 10, 5, 3) //Semi-Circle - Parallelogram - Trapezium\r\n    //     }\r\n    //     if(currentRoom === 10 & this.state.roomTenStatus === 0){\r\n    //         this.createEnemy(100, 100, 4, 7, 2, 2, 20, 100, 100, 4, 7, 2, 2, 20, 0, 0, 0, 0, 0, 0, 0, 2) //Two Hexagons\r\n    //     }\r\n    //     if(currentRoom === 11 & this.state.roomElevenStatus === 0){\r\n    //         this.createEnemy(50, 50, 5, 8, 4, 3, 15, 50, 50, 5, 8, 4, 3, 15, 0, 0, 0, 0, 0, 0, 0, 2)\r\n    //     }\r\n    //     if(currentRoom === 12 & this.state.roomTwelveStatus === 0){\r\n    //         this.createEnemy(500, 500, 15, 20, 8, 8, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)\r\n    //     }\r\n    // }\r\n    //                                         // *TIMED COMBAT\r\n    function startCombat() {\r\n        setStartCombatCheck(true)\r\n        enemyTimedCombatSequence()\r\n        playerAttackTimer(1)\r\n    }\r\n\r\n    // startCombat = () => {\r\n    //     this.setState({\r\n    //         startCombatCheck: true,\r\n    //     })\r\n    //     this.enemyTimedCombatSequenceTest()\r\n    //     this.playerAttackTimer(1)\r\n    // }\r\n\r\n    function playerAttackTimer(charged) {\r\n        if(breakLoop < 300 & playerAttackTimerState > 0 & charged === 1){\r\n            setPlayerAttackTimerState(prevPlayerAttackTimerState => prevPlayerAttackTimerState -1)\r\n            console.log(\"PLAYER ATTACK TIMER RUNNING\")\r\n            setTimeout(() => {playerAttackTimer(1); }, 1000);\r\n        }\r\n        else{\r\n            setPlayerAttackTimerState(playerAttackTimerStateMax)\r\n            setPlayerAttacked(2)\r\n            return\r\n        }\r\n    }\r\n\r\n    // rechargeAttackMove = () => {\r\n    //     this.setState({\r\n    //         playerAttacked: 1,\r\n    //     })\r\n    //     this.playerAttackTimer(1)\r\n    // }\r\n\r\n    function enemyTimedCombatSequence() {\r\n        console.log(\"EnemyCombatTimer\")\r\n        if(breakLoop < 60) {\r\n            if(enemySpeed >= 0 & enemyHealth > 0) {\r\n                setEnemySpeed(prevEnemySpeed => prevEnemySpeed -1)\r\n            }\r\n            if(enemyHealth >= 0){\r\n                setTimeout(() => {enemyTimedCombatSequence(); }, 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n    function playerAttackRandomizer(playerAttackLow, playerAttackHigh) {\r\n        return Math.floor(Math.random() * (playerAttackHigh - playerAttackLow + 1) + playerAttackLow)\r\n    }\r\n\r\n    function enemyCounterAttack(currentPlayerAttack) {\r\n        var currentEnemyAttack = currentEnemyAttackRandomizer(enemyAttackLow, enemyAttackHigh) - playerArmor\r\n        // var currentEnemy2Attack = currentEnemyAttackRandomizer(enemy2AttackLow, enemy2AttackHigh) - playerArmor\r\n        // var currentEnemy3Attack = currentEnemyAttackRandomizer(enemy3AttackLow, enemy3AttackHigh) - playerArmor\r\n        if(currentEnemyAttack <= 0){\r\n            currentEnemyAttack = 1\r\n        }\r\n        // if(currentEnemy2Attack <= 0){\r\n        //     currentEnemy2Attack = 1\r\n        // }\r\n        // if(currentEnemy3Attack <= 0){\r\n        //     currentEnemy3Attack = 1\r\n        // }\r\n        if(enemyHealth - currentPlayerAttack > 0){\r\n            playerTakeDamage(currentEnemyAttack)\r\n        }\r\n        // if(enemy2Health - currentPlayerAttack > 0){\r\n        //     playerDamageTaken = playerDamageTaken + currentEnemy2Attack\r\n        // }\r\n        // if(enemy3Health - currentPlayerAttack > 0){\r\n        //     playerDamageTaken = playerDamageTaken + currentEnemy3Attack\r\n        // }\r\n    }\r\n\r\n    function currentEnemyAttackRandomizer(enemyAttackLow, enemyAttackHigh) {\r\n        return Math.floor(Math.random() * (enemyAttackHigh - enemyAttackLow + 1) + enemyAttackLow)\r\n    }\r\n\r\n    function playerTakeDamage(damageTaken) {\r\n        setPlayerHealth(playerHealth - damageTaken)\r\n        showToastMessageRed(damageTaken)\r\n    }\r\n\r\n    function showToastMessageRed(damageTaken) {\r\n        console.log(\"TOOOOOOOOOOOOOOOOOAAAAAAAAAASSSSSSSSSTTTTTTTTT\")\r\n        toast.error(`You took ${damageTaken} damage !`, {\r\n            position: toast.POSITION.TOP_RIGHT\r\n        });\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if(enemySpeed < 0){\r\n            setEnemySpeed(enemyMaxSpeed)\r\n            var currentPlayerAttack = playerAttackRandomizer(playerAttackLow, playerAttackHigh)\r\n            enemyCounterAttack(currentPlayerAttack)\r\n        }\r\n        console.log(\"USE EFFECT RAN\")\r\n    })\r\n\r\n    //                                         // !END TIMED COMBAT\r\n\r\n    // playerHasNoSpeed = () => {\r\n    //     alert(\"You have no more speed! You took 10 damage. Return to Room One or use a stamina potion to regain your speed.\")\r\n    //     this.setState({\r\n    //         playerHealth: this.state.playerHealth - 10,\r\n    //         enemyRewardCheck: 0,\r\n    //         enemy2RewardCheck: 0,\r\n    //         enemy3RewardCheck: 0,\r\n    //     })\r\n    // }\r\n\r\n                                            // !END ROOM MOVEMENT AND PLAYER SPEED\r\n\r\n    //                                         // *BEGINNING OF COMBAT ATTACK SEQUENCE\r\n\r\n    // playerAttackMove = (attackEnemy) => {\r\n    //     var currentPlayerAttack = this.playerAttackRandomizer(this.state.playerAttackLow, this.state.playerAttackHigh)\r\n    //     if(attackEnemy === 1 & this.state.enemyHealth <= 0){\r\n    //         this.deadCheck(currentPlayerAttack, attackEnemy)\r\n    //         alert(\"You killed this enemy!\")\r\n    //     }\r\n    //     if(attackEnemy === 1 & this.state.enemyHealth > 0){\r\n    //         currentPlayerAttack = currentPlayerAttack - this.state.enemyArmor\r\n    //         if(currentPlayerAttack <= 0){\r\n    //             currentPlayerAttack = 1\r\n    //         }\r\n    //         this.playerAttackMoveSetState(1, currentPlayerAttack)\r\n    //         this.deadCheck(currentPlayerAttack, attackEnemy)\r\n    //     }\r\n    //     if(attackEnemy === 2 & this.state.enemy2Health <= 0){\r\n    //         this.deadCheck(currentPlayerAttack, attackEnemy)\r\n    //         alert(\"You killed this enemy!\")\r\n    //     }\r\n    //     if(attackEnemy === 2 & this.state.enemy2Health > 0){\r\n    //         currentPlayerAttack = currentPlayerAttack - this.state.enemy2Armor\r\n    //         if(currentPlayerAttack <= 0){\r\n    //             currentPlayerAttack = 1\r\n    //         }\r\n    //         this.playerAttackMoveSetState(2, currentPlayerAttack)\r\n    //         this.deadCheck(currentPlayerAttack, attackEnemy)\r\n    //     }\r\n    //     if(attackEnemy === 3 & this.state.enemy3Health <= 0){\r\n    //         this.deadCheck(currentPlayerAttack, attackEnemy)\r\n    //         alert(\"You killed this enemy!\")\r\n    //     }\r\n    //     if(attackEnemy === 3 & this.state.enemy3Health > 0){\r\n    //         currentPlayerAttack = currentPlayerAttack - this.state.enemy3Armor\r\n    //         if(currentPlayerAttack <= 0){\r\n    //             currentPlayerAttack = 1\r\n    //         }\r\n    //         this.playerAttackMoveSetState(3, currentPlayerAttack)\r\n    //         this.deadCheck(currentPlayerAttack, attackEnemy)\r\n    //     }\r\n    // }\r\n\r\n    // playerAttackMoveSetState = (attackEnemyNumber, currentPlayerAttack) => {\r\n    //     if(attackEnemyNumber === 1){\r\n    //         this.setState({\r\n    //             enemyHealth: this.state.enemyHealth - currentPlayerAttack,\r\n    //             playerDamageDone: currentPlayerAttack,\r\n    //             playerAttacked: 3,\r\n    //             playerAttackTimerState: this.state.playerAttackTimerStateMax,\r\n    //             })\r\n    //             this.showToastMessage(currentPlayerAttack, attackEnemyNumber)\r\n    //     }\r\n    //     if(attackEnemyNumber === 2){\r\n    //         this.setState({\r\n    //             enemy2Health: this.state.enemy2Health - currentPlayerAttack,\r\n    //             playerDamageDone: currentPlayerAttack,\r\n    //             })\r\n    //             this.showToastMessage(currentPlayerAttack, attackEnemyNumber)\r\n    //     }\r\n    //     if(attackEnemyNumber === 3){\r\n    //         this.setState({\r\n    //             enemy3Health: this.state.enemy3Health - currentPlayerAttack,\r\n    //             playerDamageDone: currentPlayerAttack,\r\n    //             })\r\n    //             this.showToastMessage(currentPlayerAttack, attackEnemyNumber)\r\n    //     }\r\n    // }\r\n\r\n    // deadCheck = (currentPlayerAttack, attackEnemy) => {\r\n    //     if(this.state.enemyHealth - currentPlayerAttack <= 0){\r\n    //         if(this.state.enemyRewardCheck === 0 & attackEnemy === 1){\r\n    //             this.deadCheckSetState(1)\r\n    //         }\r\n    //     }\r\n    //     if(this.state.enemy2Health - currentPlayerAttack <= 0) {\r\n    //         if(this.state.enemy2RewardCheck === 0 & attackEnemy === 2){\r\n    //             this.deadCheckSetState(2)\r\n    //         }\r\n    //     }\r\n    //     if(this.state.enemy3Health - currentPlayerAttack <= 0 & attackEnemy === 3) {\r\n    //         if(this.state.enemy3RewardCheck === 0){\r\n    //             this.deadCheckSetState(3)\r\n    //         }\r\n    //     }\r\n    //     if(this.state.enemyHealth <= 0 & this.state.enemy2Health <= 0 & this.state.enemy3Health <= 0){\r\n    //         this.setCurrentRoomStatusClearEnemy()\r\n    //     }\r\n    //     // if(this.state.enemyHealth + this.state.enemy2Health + this.state.enemy3Health > 0){\r\n    //     //     this.enemyCounterAttack(currentPlayerAttack)\r\n    //     // }\r\n    // }\r\n\r\n    // deadCheckSetState = (enemyNumber) => {\r\n    //     if(enemyNumber === 1){\r\n    //         this.setState({\r\n    //             playerCoins: this.state.playerCoins + this.state.enemyReward,\r\n    //             enemyRewardCheck: 1,\r\n    //             enemyHealth: 0,\r\n    //         })\r\n    //     }\r\n    //     if(enemyNumber === 2){\r\n    //         this.setState({\r\n    //             playerCoins: this.state.playerCoins + this.state.enemy2Reward,\r\n    //             enemy2RewardCheck: 1,\r\n    //             enemy2Health: 0,\r\n    //         })\r\n    //     }\r\n    //     if(enemyNumber === 3){\r\n    //         this.setState({\r\n    //             playerCoins: this.state.playerCoins + this.state.enemy3Reward,\r\n    //             enemy3RewardCheck: 1,\r\n    //             enemy3Health: 0,\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    // setCurrentRoomStatusClearEnemy = () => {\r\n    //     if(this.state.currentRoom === 2){\r\n    //         this.setState({\r\n    //             roomTwoStatus: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 3){\r\n    //         this.setState({\r\n    //             roomThreeStatus: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 4){\r\n    //         this.setState({\r\n    //             roomFourStatus: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 5){\r\n    //         this.setState({\r\n    //             roomFiveStatus: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 6){\r\n    //         this.setState({\r\n    //             roomSixStatus: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 7){\r\n    //         this.setState({\r\n    //             roomSevenStatus: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 8){\r\n    //         this.setState({\r\n    //             roomEightStatus: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 9){\r\n    //         this.setState({\r\n    //             roomNineStatus: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 10){\r\n    //         this.setState({\r\n    //             roomTenStatus: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 11){\r\n    //         this.setState({\r\n    //             roomElevenStatus: 1,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 12){\r\n    //         this.setState({\r\n    //             roomTwelveStatus: 1,\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    //                                         // !END OF ATTACK SEQUENCE\r\n\r\n    //                                         // *BEGINNING OF DODGE SEQUENCE\r\n\r\n    // playerDodgeMove = () => {\r\n    //     var playerSpeedThisDodgeAttack = Math.floor(Math.random() * (100 - this.state.playerSpeed + 1) + this.state.playerSpeed)\r\n    //     var enemySpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemySpeed + 1) + this.state.enemySpeed)\r\n    //     var enemy2SpeedThisRound = 0\r\n    //     var enemy3SpeedThisRound = 0\r\n    //     var playerDamageTaken = 0\r\n    //     if(this.state.playerSpeed > 0){\r\n    //         if(this.state.enemy2Speed > 0){\r\n    //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy2Speed + 1) + this.state.enemy2Speed)\r\n    //         }\r\n    //         if(this.state.enemy3Speed > 0){\r\n    //             enemy2SpeedThisRound = Math.floor(Math.random() * (100 - this.state.enemy3Speed + 1) + this.state.enemy3Speed)\r\n    //         }\r\n    //         console.log(playerSpeedThisDodgeAttack)\r\n    //         console.log(enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound)\r\n\r\n    //         if(playerSpeedThisDodgeAttack > enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\r\n    //             console.log(\"Successful Dodge\")\r\n    //             this.enemyWithMostHealth()\r\n    //             }\r\n    //         if(playerSpeedThisDodgeAttack <= enemySpeedThisRound + enemy2SpeedThisRound + enemy3SpeedThisRound){\r\n    //             console.log(\"Player Missed Dodge\")\r\n    //             this.playerMissedDodge()\r\n    //             }\r\n    //         }\r\n    //     if(this.state.playerSpeed <= 0){\r\n    //         alert(\"You have no speed to dodge!\")\r\n    //     }\r\n    // }\r\n\r\n    //     // player attacks enemy with highest health with full attack power if the ransomizer is greater than the enemies; speed \r\n\r\n    // enemyWithMostHealth = () => {\r\n    //     var highEnemyHealth = Math.max(this.state.enemyHealth, this.state.enemy2Health, this.state.enemy3Health)\r\n    //     if(highEnemyHealth === this.state.enemyHealth){\r\n    //         this.setState({\r\n    //             enemyHealth: this.state.enemyHealth - (this.state.playerAttackHigh - this.state.enemyArmor),\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\r\n    //             })\r\n    //             return\r\n    //     }\r\n    //     if(highEnemyHealth === this.state.enemy2Health){\r\n    //         this.setState({\r\n    //             enemy2Health: this.state.enemy2Health - (this.state.playerAttackHigh - this.state.enemy2Armor),\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\r\n    //             })\r\n    //             return\r\n    //     }\r\n    //     if(highEnemyHealth === this.state.enemy3Health){\r\n    //         this.setState({\r\n    //             enemy3Health: this.state.enemy3Health - (this.state.playerAttackHigh - this.state.enemy3Armor),\r\n    //             playerSpeed: this.state.playerSpeed - 1,\r\n    //             playerDamageDone: this.state.playerAttackHigh - this.state.enemyArmor,\r\n    //             })\r\n    //             return\r\n    //     }\r\n    // }\r\n\r\n    // playerMissedDodge = () => {\r\n    //     var currentEnemyAttack = this.currentEnemyAttackRandomizer(this.state.enemyAttackLow, this.state.enemyAttackHigh)\r\n    //     var currentEnemy2Attack = this.currentEnemyAttackRandomizer(this.state.enemy2AttackLow, this.state.enemy2AttackHigh)\r\n    //     var currentEnemy3Attack = this.currentEnemyAttackRandomizer(this.state.enemy3AttackLow, this.state.enemy3AttackHigh)\r\n    //     var playerDamage = currentEnemyAttack + currentEnemy2Attack + currentEnemy3Attack\r\n    //     this.setState({\r\n    //         playerHealth: this.state.playerHealth - playerDamage,\r\n    //         playerSpeed: this.state.playerSpeed - 1,\r\n    //         enemyDamageDone: playerDamage,\r\n    //         })\r\n    // }\r\n\r\n    //                                         // !END DODGE SEQUENCE\r\n\r\n    // typeOfEnemyAttack = () => {\r\n\r\n    // }\r\n\r\n    // openChest = () => {\r\n    //     if(this.state.currentRoom === 4){\r\n    //         this.setState({\r\n    //             healthPotionEffect: this.state.healthPotionEffect + 15,\r\n    //             roomFourStatus: 2,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 8){\r\n    //         this.setState({\r\n    //             healthPotionEffect: this.state.healthPotionEffect + 15,\r\n    //             roomEightStatus: 2,\r\n    //         })\r\n    //     }\r\n    //     if(this.state.currentRoom === 12){\r\n    //         this.setState({\r\n    //             healthPotionEffect: this.state.healthPotionEffect + 15,\r\n    //             roomTwelveStatus: 2,\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    //                                         // *ON-SCREEN PROMPTS\r\n\r\n    // showToastMessage = (currentPlayerAttack, attackEnemyNumber) => {\r\n    //     if(attackEnemyNumber === 1){\r\n    //         toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 1 !\", {\r\n    //             position: toast.POSITION.TOP_CENTER\r\n    //         });\r\n    //     }\r\n    //     if(attackEnemyNumber === 2){\r\n    //         toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 2 !\", {\r\n    //             position: toast.POSITION.TOP_CENTER\r\n    //         });\r\n    //     }\r\n    //     if(attackEnemyNumber === 3){\r\n    //         toast.success(\"You did \" + currentPlayerAttack + \" damage to enemy 3 !\", {\r\n    //             position: toast.POSITION.TOP_CENTER\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n\r\n                                            // *GAME TIMER/BREAKLOOP TIMER\r\n\r\n    function gameTime() {\r\n        setBreakLoop(prevBreakLoop => prevBreakLoop + 1)\r\n        setGameTick(prevGameTick => prevGameTick + 1)\r\n        if(breakLoop < 300){\r\n            setTimeout(() => {gameTime(); }, 1000);\r\n        }\r\n        console.log(`gameTime() ran. gameTick is at ${gameTick}`)\r\n    }\r\n\r\n\r\n                                            //  !END GAME TIMER\r\n\r\n    //                                         //  *ROOM TIMER\r\n    // roomTime = () => {\r\n    //     this.roomTimeSetState()\r\n    //     if(this.state.roomBreakLoop < 300){\r\n    //         setTimeout(() => {this.roomTime(); }, 1000);\r\n    //     }\r\n    //     console.log(`gameRoomTime() is running. roomTime is at ${this.state.roomTime}`)\r\n    // }\r\n\r\n    // roomTimeSetState = () => {\r\n    //     this.setState({\r\n    //         roomTime: this.state.roomTime + 1,\r\n    //         roomBreakLoop: this.state.roomBreakLoop + 1,\r\n    //     })\r\n    // }\r\n\r\n                                            // !END ROOM TIMER\r\n    // render() {\r\n        return(\r\n            <BrowserRouter>\r\n            <Navbar gameTick={gameTick} playerMaxSpeed={playerMaxSpeed} playerMaxHealth={playerMaxHealth} devButton={devButton} playerHealth={playerHealth} playerAttackLow={playerAttackLow} playerAttackHigh={playerAttackHigh} playerSpeed={playerSpeed} playerArmor={playerArmor} playerCoins={playerCoins} playerHealthPotion={playerHealthPotion} playerStaminaPotion={playerStaminaPotion} />\r\n            <ToastContainer />\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Home playerHealth={playerHealth} enemyOne={enemyOne} playerAttackLow={playerAttackLow} playerAttackHigh={playerAttackHigh}playerSpeed={playerSpeed} playerDefense={playerArmor} playerCoins={playerCoins} pickClass={pickClass} />} />\r\n\r\n                    <Route path=\"/GameBoard\" element={<GameBoard buyFromStore={buyFromStore} roomMovement={roomMovement} createEnemy={createEnemy} />} />\r\n\r\n                    <Route path=\"/RoomTwo\" element={<RoomTwo roomTwoStatus={roomTwoStatus} currentRoom={currentRoom}  numberOfEnemiesInRoom={numberOfEnemiesInRoom} startCombatCheck={startCombatCheck} startCombat={startCombat} />} />\r\n\r\n                    {/* <Route path=\"/RoomTwo\" element={<RoomTwo rechargeAttackMove={this.rechargeAttackMove} playerAttacked={this.state.playerAttacked} playerAttackMove={this.playerAttackMove} playerAttackTimerState={this.state.playerAttackTimerState} playerAttackTimerStateMax={this.state.playerAttackTimerStateMax} startCombat={this.startCombat} startCombatCheck={this.state.startCombatCheck} currentRoom={this.state.currentRoom} roomMovement={this.roomMovement} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyMaxHealth={this.state.enemyMaxHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed}  enemyMaxSpeed={this.state.enemyMaxSpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} roomTwoStatus={this.state.roomTwoStatus} resetRoomStatus={this.resetRoomStatus} />} /> */}\r\n\r\n                    {/* <Route path=\"/RoomThree\" element={<RoomThree roomMovement={this.roomMovement} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} roomThreeStatus ={this.state.roomThreeStatus} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} />} />\r\n\r\n                    <Route path=\"/RoomFour\" element={<RoomFour openChest={this.openChest} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomFourStatus={this.state.roomFourStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} />} />\r\n\r\n                    <Route path=\"/RoomFive\" element={<RoomFive resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomFiveStatus={this.state.roomFiveStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward} />} />\r\n\r\n                    <Route path=\"/RoomSix\" element={<RoomSix currentRoom={this.state.currentRoom} resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomSixStatus={this.state.roomSixStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyMaxHealth={this.state.enemyMaxHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2MaxHealth={this.state.enemy2MaxHealth} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward}/>} />\r\n\r\n                    <Route path=\"/RoomSeven\" element={<RoomSeven resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomSevenStatus={this.state.roomSevenStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward}/>} />\r\n\r\n                    <Route path=\"/RoomEight\" element={<RoomEight openChest={this.openChest} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomEightStatus={this.state.roomEightStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} />} />\r\n\r\n                    <Route path=\"/RoomNine\" element={<RoomNine resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomNineStatus={this.state.roomNineStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward} enemy3Health={this.state.enemy3Health} enemy3AttackLow={this.state.enemy3AttackLow} enemy3AttackHigh={this.state.enemy3AttackHigh} enemy3Speed={this.state.enemy3Speed} enemy3Armor={this.state.enemy3Armor} enemy3Reward={this.state.enemy3Reward}/>} />\r\n\r\n                    <Route path=\"/RoomTen\" element={<RoomTen resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomTenStatus={this.state.roomTenStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward}/>} />\r\n\r\n                    <Route path=\"/RoomEleven\" element={<RoomEleven resetRoomStatus={this.resetRoomStatus} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomElevenStatus={this.state.roomElevenStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward} enemy2Health={this.state.enemy2Health} enemy2AttackLow={this.state.enemy2AttackLow} enemy2AttackHigh={this.state.enemy2AttackHigh} enemy2Speed={this.state.enemy2Speed} enemy2Armor={this.state.enemy2Armor} enemy2Reward={this.state.enemy2Reward}/>} />\r\n\r\n                    <Route path=\"/RoomTwelve\" element={<RoomTwelve openChest={this.openChest} numberOfEnemiesInRoom={this.state.numberOfEnemiesInRoom} roomTwelveStatus={this.state.roomTwelveStatus} roomMovement={this.roomMovement} playerAttackMove={this.playerAttackMove} playerDodgeMove={this.playerDodgeMove} enemyHealth={this.state.enemyHealth} enemyAttackLow={this.state.enemyAttackLow} enemyAttackHigh={this.state.enemyAttackHigh} enemySpeed={this.state.enemySpeed} enemyArmor={this.state.enemyArmor} enemyReward={this.state.enemyReward}/>} /> */}\r\n                </Routes>\r\n            </BrowserRouter>\r\n        )\r\n    // }\r\n}\r\n\r\nexport default App;\r\n\r\n// enemyHealth={enemyHealth} enemyMaxHealth={enemyMaxHealth} enemyAttackLow={enemyAttackLow} enemyAttackHigh={enemyAttackHigh} enemySpeed={enemySpeed} enemyMaxSpeed={enemyMaxSpeed} enemyArmor={enemyArmor} enemyReward={enemyReward}\r\n"],"mappings":"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EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEI,SAASyE,SAAT,GAAqB;IACjB3C,eAAe,CAACC,eAAD,CAAf;IACAK,mBAAmB,CAACsC,oBAAoB,IAAIA,oBAAoB,GAAG,CAAhD,CAAnB;IACA9B,cAAc,CAACD,WAAW,GAAG,GAAf,CAAd;EACH,CAvHU,CAyHX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,SAASgC,YAAT,CAAsBC,IAAtB,EAA4B;IACxB,IAAGA,IAAI,KAAK,QAAZ,EAAqB;MACjB,IAAGjC,WAAW,IAAI,CAAlB,EAAoB;QAChBC,cAAc,CAACiC,eAAe,IAAIA,eAAe,GAAG,CAAtC,CAAd;QACA7C,kBAAkB,CAAC8C,mBAAmB,IAAIA,mBAAmB,GAAG,EAA9C,CAAlB;MACH,CAHD,MAGO;QACHC,KAAK,CAAC,oCAAD,CAAL;MACH;IACJ,CARuB,CASxB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACH,CAxOU,CA0OX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,SAASC,SAAT,CAAmBC,MAAnB,EAA2BC,SAA3B,EAAsCC,SAAtC,EAAiDC,UAAjD,EAA6DC,KAA7D,EAAoEC,QAApE,EAA8EC,KAA9E,EAAqFC,KAArF,EAA4FC,YAA5F,EAA0GC,aAA1G,EAAyH;IACrHC,OAAO,CAACC,GAAR,CAAYX,MAAZ,EAAoBC,SAApB,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAsDC,KAAtD,EAA6DC,QAA7D,EAAuEC,KAAvE,EAA8EC,KAA9E,EAAqFC,YAArF,EAAmGC,aAAnG;IACA5D,eAAe,CAACmD,MAAD,CAAf;IACAjD,kBAAkB,CAACkD,SAAD,CAAlB;IACAhD,kBAAkB,CAACiD,SAAD,CAAlB;IACA/C,mBAAmB,CAACgD,UAAD,CAAnB;IACA9C,cAAc,CAAC+C,KAAD,CAAd;IACA7C,iBAAiB,CAAC8C,QAAD,CAAjB;IACA5C,cAAc,CAAC6C,KAAD,CAAd;IACA3C,cAAc,CAAC4C,KAAD,CAAd;IACA1C,qBAAqB,CAAC2C,YAAD,CAArB;IACAzC,sBAAsB,CAAC0C,aAAD,CAAtB;IACAG,QAAQ;EACX;;EAED,SAASC,WAAT,CAAqBZ,SAArB,EAAgCD,MAAhC,EAAwCE,SAAxC,EAAmDC,UAAnD,EAA+DC,KAA/D,EAAsEE,KAAtE,EAA6EQ,MAA7E,EAAqFC,UAArF,EAAiGC,OAAjG,EAA0GC,UAA1G,EAAsHC,WAAtH,EAAmIC,MAAnI,EAA2IC,MAA3I,EAAmJC,OAAnJ,EAA4JC,UAA5J,EAAwKC,OAAxK,EAAiLC,UAAjL,EAA6LC,WAA7L,EAA0MC,MAA1M,EAAkNC,MAAlN,EAA0NC,OAA1N,EAAmO1C,qBAAnO,EAA0P;IACtPT,WAAW,CAACoD,YAAY,IAAI;MACxB,OAAO,EAAC,GAAGA,YAAJ;QACHnD,cAAc,EAAEuB,SADb;QAEHtB,WAAW,EAAEqB,MAFV;QAGHpB,cAAc,EAAEsB,SAHb;QAIHrB,eAAe,EAAEsB,UAJd;QAKHrB,UAAU,EAAEsB,KALT;QAMHrB,aAAa,EAAEqB,KANZ;QAOHpB,UAAU,EAAEsB,KAPT;QAQHrB,WAAW,EAAE6B;MARV,CAAP;IAUH,CAXU,CAAX,CADsP,CAatP;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA3B,wBAAwB,CAACD,qBAAD,CAAxB;EACH,CAlSU,CAoSX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;;EAEA,SAAS4C,YAAT,CAAsBC,cAAtB,EAAqC;IACjC1C,cAAc,CAAC0C,cAAD,CAAd;;IACA,IAAG3E,WAAW,GAAG,CAAjB,EAAmB;MACfC,cAAc,CAAC2E,eAAe,IAAIA,eAAe,GAAG,CAAtC,CAAd;IACH;;IACD,IAAGD,cAAc,KAAK,CAAtB,EAAyB;MACrBlB,WAAW,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,CAAtD,EAAyD,CAAzD,EAA4D,CAA5D,EAA+D,CAA/D,EAAkE,CAAlE,CAAX;IACH;EACJ,CA1UU,CA2UX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,SAASoB,WAAT,GAAuB;IACnB1D,mBAAmB,CAAC,IAAD,CAAnB;IACA2D,wBAAwB;IACxBC,iBAAiB,CAAC,CAAD,CAAjB;EACH,CApYU,CAsYX;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,SAASA,iB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"},"metadata":{},"sourceType":"module"}