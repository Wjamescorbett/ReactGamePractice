{"ast":null,"code":"import qsa from 'dom-helpers/querySelectorAll';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport { useCallback, useRef, useEffect, useMemo, useContext } from 'react';\nimport * as React from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useGlobalListener from '@restart/hooks/useGlobalListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle, { isRoleMenu } from './DropdownToggle';\nimport DropdownItem from './DropdownItem';\nimport SelectableContext from './SelectableContext';\nimport { dataAttr } from './DataKey';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useRefWithUpdate() {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(null);\n  const attachRef = useCallback(element => {\n    ref.current = element; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n/**\n * @displayName Dropdown\n * @public\n */\n\n\nfunction Dropdown(_ref) {\n  let {\n    defaultShow,\n    show: rawShow,\n    onSelect,\n    onToggle: rawOnToggle,\n    itemSelector = `* [${dataAttr('dropdown-item')}]`,\n    focusFirstItemOnShow,\n    placement = 'bottom-start',\n    children\n  } = _ref;\n  const [show, onToggle] = useUncontrolledProp(rawShow, defaultShow, rawOnToggle); // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n  const [menuRef, setMenu] = useRefWithUpdate();\n  const menuElement = menuRef.current;\n  const [toggleRef, setToggle] = useRefWithUpdate();\n  const toggleElement = toggleRef.current;\n  const lastShow = usePrevious(show);\n  const lastSourceEvent = useRef(null);\n  const focusInDropdown = useRef(false);\n  const onSelectCtx = useContext(SelectableContext);\n  const toggle = useCallback(function (nextShow, event) {\n    let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : event == null ? void 0 : event.type;\n    onToggle(nextShow, {\n      originalEvent: event,\n      source\n    });\n  }, [onToggle]);\n  const handleSelect = useEventCallback((key, event) => {\n    onSelect == null ? void 0 : onSelect(key, event);\n    toggle(false, event, 'select');\n\n    if (!event.isPropagationStopped()) {\n      onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    }\n  });\n  const context = useMemo(() => ({\n    toggle,\n    placement,\n    show,\n    menuElement,\n    toggleElement,\n    setMenu,\n    setToggle\n  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  const focusToggle = useEventCallback(() => {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  const maybeFocusFirst = useEventCallback(() => {\n    const type = lastSourceEvent.current;\n    let focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && isRoleMenu(menuRef.current) ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    const first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(() => {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(() => {\n    lastSourceEvent.current = null;\n  });\n\n  const getNextFocusedChild = (current, offset) => {\n    if (!menuRef.current) return null;\n    const items = qsa(menuRef.current, itemSelector);\n    let index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  useGlobalListener('keydown', event => {\n    var _menuRef$current, _toggleRef$current;\n\n    const {\n      key\n    } = event;\n    const target = event.target;\n    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    const isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) {\n      return;\n    }\n\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n\n    if (key === 'Tab' && (!menuRef.current || !show)) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n    const meta = {\n      originalEvent: event,\n      source: event.type\n    };\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          const next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          onToggle(true, meta);\n        } else {\n          const next = getNextFocusedChild(target, 1);\n          if (next && next.focus) next.focus();\n        }\n\n        return;\n\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        addEventListener(document, 'keyup', e => {\n          var _menuRef$current2;\n\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, meta);\n          }\n        }, {\n          once: true\n        });\n        break;\n\n      case 'Escape':\n        if (key === 'Escape') {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        onToggle(false, meta);\n        break;\n\n      default:\n    }\n  });\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(DropdownContext.Provider, {\n      value: context,\n      children: children\n    })\n  });\n}\n\nDropdown.displayName = 'Dropdown';\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nDropdown.Item = DropdownItem;\nexport default Dropdown;","map":{"version":3,"names":["qsa","addEventListener","useCallback","useRef","useEffect","useMemo","useContext","React","useUncontrolledProp","usePrevious","useForceUpdate","useGlobalListener","useEventCallback","DropdownContext","DropdownMenu","DropdownToggle","isRoleMenu","DropdownItem","SelectableContext","dataAttr","jsx","_jsx","useRefWithUpdate","forceUpdate","ref","attachRef","element","current","Dropdown","defaultShow","show","rawShow","onSelect","onToggle","rawOnToggle","itemSelector","focusFirstItemOnShow","placement","children","menuRef","setMenu","menuElement","toggleRef","setToggle","toggleElement","lastShow","lastSourceEvent","focusInDropdown","onSelectCtx","toggle","nextShow","event","source","type","originalEvent","handleSelect","key","isPropagationStopped","context","contains","document","activeElement","focusToggle","focus","maybeFocusFirst","focusType","test","first","getNextFocusedChild","offset","items","index","indexOf","Math","max","min","length","_menuRef$current","_toggleRef$current","target","fromMenu","fromToggle","isInput","tagName","meta","next","preventDefault","e","_menuRef$current2","once","stopPropagation","Provider","value","displayName","Menu","Toggle","Item"],"sources":["C:/Users/freeb/OneDrive/Desktop/Game_Project/Game_Project_Frontend/GameFrontEnd/node_modules/@restart/ui/esm/Dropdown.js"],"sourcesContent":["import qsa from 'dom-helpers/querySelectorAll';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport { useCallback, useRef, useEffect, useMemo, useContext } from 'react';\nimport * as React from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useGlobalListener from '@restart/hooks/useGlobalListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle, { isRoleMenu } from './DropdownToggle';\nimport DropdownItem from './DropdownItem';\nimport SelectableContext from './SelectableContext';\nimport { dataAttr } from './DataKey';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useRefWithUpdate() {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(null);\n  const attachRef = useCallback(element => {\n    ref.current = element; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n/**\n * @displayName Dropdown\n * @public\n */\n\n\nfunction Dropdown({\n  defaultShow,\n  show: rawShow,\n  onSelect,\n  onToggle: rawOnToggle,\n  itemSelector = `* [${dataAttr('dropdown-item')}]`,\n  focusFirstItemOnShow,\n  placement = 'bottom-start',\n  children\n}) {\n  const [show, onToggle] = useUncontrolledProp(rawShow, defaultShow, rawOnToggle); // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n  const [menuRef, setMenu] = useRefWithUpdate();\n  const menuElement = menuRef.current;\n  const [toggleRef, setToggle] = useRefWithUpdate();\n  const toggleElement = toggleRef.current;\n  const lastShow = usePrevious(show);\n  const lastSourceEvent = useRef(null);\n  const focusInDropdown = useRef(false);\n  const onSelectCtx = useContext(SelectableContext);\n  const toggle = useCallback((nextShow, event, source = event == null ? void 0 : event.type) => {\n    onToggle(nextShow, {\n      originalEvent: event,\n      source\n    });\n  }, [onToggle]);\n  const handleSelect = useEventCallback((key, event) => {\n    onSelect == null ? void 0 : onSelect(key, event);\n    toggle(false, event, 'select');\n\n    if (!event.isPropagationStopped()) {\n      onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    }\n  });\n  const context = useMemo(() => ({\n    toggle,\n    placement,\n    show,\n    menuElement,\n    toggleElement,\n    setMenu,\n    setToggle\n  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  const focusToggle = useEventCallback(() => {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  const maybeFocusFirst = useEventCallback(() => {\n    const type = lastSourceEvent.current;\n    let focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && isRoleMenu(menuRef.current) ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    const first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(() => {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(() => {\n    lastSourceEvent.current = null;\n  });\n\n  const getNextFocusedChild = (current, offset) => {\n    if (!menuRef.current) return null;\n    const items = qsa(menuRef.current, itemSelector);\n    let index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  useGlobalListener('keydown', event => {\n    var _menuRef$current, _toggleRef$current;\n\n    const {\n      key\n    } = event;\n    const target = event.target;\n    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    const isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) {\n      return;\n    }\n\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n\n    if (key === 'Tab' && (!menuRef.current || !show)) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n    const meta = {\n      originalEvent: event,\n      source: event.type\n    };\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          const next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          onToggle(true, meta);\n        } else {\n          const next = getNextFocusedChild(target, 1);\n          if (next && next.focus) next.focus();\n        }\n\n        return;\n\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        addEventListener(document, 'keyup', e => {\n          var _menuRef$current2;\n\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, meta);\n          }\n        }, {\n          once: true\n        });\n        break;\n\n      case 'Escape':\n        if (key === 'Escape') {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        onToggle(false, meta);\n        break;\n\n      default:\n    }\n  });\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(DropdownContext.Provider, {\n      value: context,\n      children: children\n    })\n  });\n}\n\nDropdown.displayName = 'Dropdown';\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nDropdown.Item = DropdownItem;\nexport default Dropdown;"],"mappings":"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"},"metadata":{},"sourceType":"module"}